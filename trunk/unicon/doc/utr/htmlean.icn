#
# Clean html output from pdftohtml
#
procedure main(av)
    f := open(av[1],"r") | stop("can't open ", av[1]|", no filename given")
    L := []
    while put(L, read(f))
    close(f)

    # ... do the in-line computation
    every i := 1 to *L do {
	L[i] := line_clean(L[i])
    }

    # do the multi-line computation
    L := multiline_clean(L)

    # create title page and move table of contents
    L := maketitle(L)

    f2 := open(av[1],"w")
    while write(f2, pop(L))
    close(f2)
end

procedure maketitle(L)
   i := 1
   # title starts after <body> tag
   while L[i] ~== "<body bgcolor=\"#A0A0A0\" vlink=\"blue\" link=\"blue\">" do
      i +:= 1
   i +:= 1 # skip over "<body>"
   ii := i
   while not integer(L[ii][-9:-5]) do ii +:= 1
   j := ii + 1
   # end of title page is an <hr> by itself
   while L[j] ~== "<hr/>" do j +:= 1

   # table of contents starts near the end, at link for "outline"
   k := j+1
   while not match("<a name=\"outline\">", L[k]) do k +:= 1
   L[k] := "<a name=\"outline\"></a><h3>Contents</h3>"

   L := L[1:i] ||| ["<center><h3>"] |||
         L[i:ii] ||| ["</h3>"] ||| L[ii:j] |||
         ["</center>", L[j]] |||
	 L[k:-2] ||| L[j+1:k] ||| L[-2:0]

   return L
end

# total special-case hacks, non-portable, needs generalization
procedure multiline_clean(L)
   i := 1
   while i <= *L do {
      if L[ i ] == "\xef\xa3\xae<br/>" &  # starting upper bracket
         L[i+1] == "\xef\xa3\xb9<br/>" &  # more starting upper bracket
         L[i+2] == "dif f use<br/>" &  #
         L[i+3] == "\xef\xa3\xaf<br/>" &  #
         L[i+4] == "\xef\xa3\xba color name<br/>" &  #
         L[i+5] == "\xef\xa3\xaf<br/>" &  #
         L[i+6] == "ambient \xef\xa3\xba<br/>" &  #
         L[i+7] == "\xef\xa3\xb0<br/>" &  #
         L[i+8] == "\xef\xa3\xbb<br/>" &  #
         L[i+9] == "specular<br/>" then {
write(&errout, "Eureka! at ", i)
	    # wow, what do I output for this?
	    L := L[1:i] |||
	       ["<table><tr><td>"] |||
	       ["<table border><tr><td>diffuse<br>ambient<br>specular</table>"] |||
	       ["<td>color name</table>"] |||
	       L[i+10:0] | stop("listconcat failed")
	    }
	 else
      if L[ i ] == "\xef\xa3\xae<br/>" &  # starting upper bracket
         L[i+1] == "\xef\xa3\xb9<br/>" &  # more starting upper bracket
         L[i+2] == "dif f use<br/>" &  #
         L[i+3] == "\xef\xa3\xaf<br/>" &  #
         L[i+4] == "ambient<br/>" &  #
         L[i+5] == "\xef\xa3\xba<br/>" &  #
         L[i+6] == "\xef\xa3\xaf<br/>" &  #
         L[i+7] == "\xef\xa3\xba color name or \"shininess n\", where n is between 0 and 128.<br/>" &  #
         L[i+8] == "\xef\xa3\xaf<br/>" &  #
         L[i+9] == "\xef\xa3\xba<br/>" &  #
         L[i+10] == "\xef\xa3\xaf<br/>" &  #
         L[i+11] == "specular \xef\xa3\xba<br/>" &
         L[i+12] == "\xef\xa3\xb0<br/>" &
         L[i+13] == "\xef\xa3\xbb<br/>" &
         L[i+14] == "emission<br/>" then {
	    # wow, what do I output for this?
	    L := L[1:i] |||
	       ["<table><tr><td>"] |||
	       ["<table border><tr><td>diffuse<br>ambient<br>specular<br>emission</table>"] |||
	       ["<td>color name or \"shininess n\", where n is between 0 and 128</table>"] |||
	       L[i+15:0] | stop("listconcat failed")
	    }
      i +:= 1
      }
   return L
end

procedure line_clean(s)
   while s[find("&#160;",s) +: 6] := " "
   while s[find("\e",s)] := "ff"
   while s[find("\x1c",s)] := "fi"
   while s[find("\x1e",s)] := "ffi"
   while s[find("\x16",s)] := "\""
   while s[find("\x17",s)] := "\""
   while s[find("\^p",s)] := "\""
   while s[find("\^q",s)] := "\""
   return s
end
