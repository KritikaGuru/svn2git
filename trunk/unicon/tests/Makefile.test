
#SHELL=/bin/bash
E=/bin/echo

CWD=$(shell pwd)
TESTNAME=$(shell basename $(CWD))

UC=unicon -s


# Do the tests
DoTest: TestHdr $(TARGETS) Summary
	@echo

%.u: %.icn
	@$(UC) $<

# For a test that does not have a data file
# or standard output file, the following two
# rule makes sure there are empty ones

%.dat:
	-@touch data/$@

%.std:
	-@touch stand/$@

local:
	-mkdir local

%: %.icn local %.dat %.std
	-@$E -n "[Testing $@]... "
	@$(UC) $<
	-@./$@ < data/$@.dat  > local/$@.out 2>&1 || true
	-@diff -wq stand/$@.std local/$@.out >/dev/null; \
	if [ $$? -eq 0 ] ; then echo "OK"; \
	else echo "Failed"; diff -wy stand/$@.std local/$@.out > $@.diff; fi || true
	-@rm $@

FILES=$(patsubst %.diff,%.report,$(wildcard *.diff))
ICNFILES=$(patsubst %.diff,%.icn,$(wildcard *.diff))

%.report: %.diff %.icn
	@echo "++++++++++++++++++++++++++++"
	@echo " *** Test: $(filter-out $<,$^) ***"
	@echo 
	@echo "----- Expected Output ---------------------------------------- Actual Output -----"
	@cat $<
	@echo

TestHdr:
	@echo
	@echo "========================="
	@echo "   $(TESTNAME) Test Suite"
	@echo "========================="	
	@echo

Summary:
	@echo
	@echo "========================"
	@echo " Test  : $(TESTNAME)"
	@if [ -n "$(ICNFILES)" ]; then echo " Failed: $(ICNFILES)"; \
	else echo " Status: All Good"; fi
	@echo "========================"
	@echo

Report: Summary $(FILES)

all: Test Report
	
.PHONY: clean Clean Test

clean Clean:
	-rm -f local/*.out *.diff *.u uniclass.* $(TARGETS)
	-rm -f *.u? foo.baz local/*.out
	-rm -f `find [a-z]* -type f -perm -100 -print`
	-touch local/.placeholder	
