#
# A test for unicon image file formats, Textures, and Dynamic Textures
# Jafar Al-Gharaibeh
# Feb 28, 2016
#

link ximage
import util  # for timing functions

record renderObj(format, imgFile, shape, rot, tex)
record windowObj(w, format)

procedure win(title, imgFile)    
   if w := open(title, "g", "image="|| imgFile) then {
      write(w, "background:", imgFile)
      return w
      }
end

procedure img(w, imgFile)
   if ReadImage(w, imgFile) then
      return
end

procedure main(argv)
    local windows, imgFormats, renderList
    
    write("Unicon Image and Texture Test")
    windows:=[]
    renderList := []
    imgFormats := ["gif", "bmp", "jpg", "png"]
    x := 1
    y := 1
    every format := !imgFormats do {
        write("\nTesting ", format, "...")
	fname := "unicon." || format
        writes("\tOpen window with " , format, " background: ")
	if w:=win(format || " 2D Window", fname) then {
	   put(windows, w)
           write("OK")
           WAttrib(w, "pos=" || x ||"," || y )
           writes("\tReadimage " , format, ": ")
           if w:=img(w, fname) then
              write("OK")
           else
              write("Failed")        
            }
        else
           write("Failed ")

           
   	x+:=256
    }

    write("\nContinuing to texture test...\n")
 
    (w3d:= open("3d win", "gl", "size=1024,256", "bg=blue", "buffer=on")) |
    stop("Can't Open 3D window, textures can't be tested\n")
    
    WAttrib(w3d, "pos=" || 1 ||"," || 290 )
    
    (wtex := open("dyn tex", "gl", "size=1024,256", "bg=very dark gray", "pos=1,258", "buffer=on")) |
       stop("Can't Open 3D window, textures can't be tested\n")
    
    WAttrib(wtex, "pos=" || 1 ||"," || 580 )

    t:=&time
    x:=-3
    #if \is3D then{
    every format := !imgFormats do {
	put(renderList, rObj:= renderObj(format,"unicon." || format))
	renderBox(w3d, x, 0,0, 1, rObj)
	x+:=2
    }
    #}

    Eye(w3d, 0,0,8, 0,0,0, 0,1,0)
    Eye(wtex, 0,0,8, 0,0,0, 0,1,0)
    Refresh(w3d)

    x:=-3
    w := windows[1]
    put(renderList, rObj:= renderObj("win",w))
    renderBox(wtex,x, 0,0, 1, rObj)
    x+:=2

    w := w3d
    put(renderList, rObj:= renderObj("win",w))
    renderBox(wtex,x, 0,0, 1, rObj)
    x+:=2

    w := windows[3]
    put(renderList, texObj:= renderObj("win",w))
    renderBox(wtex,x, 0,0, 1, texObj)
    x+:=2


    w := windows[4]
    put(renderList, texObj2:= renderObj("win",w))
    renderBox(wtex,x, 0,0, 1, texObj2)
    x+:=2
  
    Eye(w3d, 0,0,8, 0,0,0, 0,1,0)

    put(windows, \w3d)
    put(windows, \wtex)

    wid:=4
    ht:=4
    every Fg(!windows ,"red")
    j:=0
    rf:=50
    repeat{
	i:=0
	j+:=1
	update(renderList)
	Refresh(w3d)
	Refresh(wtex)
	WAttrib(w3d, "windowlabel=win 3d " || (rf:=FPS()) ||"fps" )
	every w := !windows  do{
	    i+:=1
	    if *Pending(w)>0 then { 
		case Event(w) of{
		    "q" : {
			shutdown := 1;
			break break
		    }
		    &lpress | &rpress  :{
			flag := 1
			the_win := i
		    }
		    &ldrag :{
			FillRectangle(texObj.tex, x:=&x,y:=&y, wid:=4,ht:=4)
			FillRectangle(w, x,y, wid,ht)
		    }		    
		}
	    }
	}

	if j>rf then{
	    CopyArea(windows[\the_win], texObj2.tex, 0,0, 256, 256, 0,0)
	    the_win := &null
	    j:=0
	}
    }

end

procedure copytex()
   local i:=1
    CopyArea(w2, tex, 40, 20, 432,216, 40, 20)
end


procedure update(renderList)
    every rObj := !renderList do
	rObj.rot.angle +:= 0.05;
end


procedure FPS()
    local len:=5000
   static t, fps
   initial{ 
      t:=util::milliseconds()
      fps:=0
      }
   fps+:=1
   if (d:=milliseconds()-t) > len then{
       fpsTmp := fps*1000/d
       fps:=0
       t:=util::milliseconds()
       return fpsTmp
      }
   
end


procedure renderBox(w, x,y,z, r, rObj)
    Fg(w,"red")
    PushTranslate(w, x,y,z)
    rObj.rot := Rotate(w, 0, 0, 1, 0)
    WAttrib(w,"texmode=on")
    rObj.tex := Texture(w, rObj.imgFile)
    rObj.shape := DrawCube(w, 0,0,0, r)
    WAttrib(w,"texmode=off")
    PopMatrix(w)
end
  
