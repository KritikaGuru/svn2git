############################################################################
#
#	File:     run-med.icn
#
#	Subject:  Run Unicon Benchmarks with "medium" n
#
#	Author:   Shea Newton
#
#	Date:     January 3, 2014
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#   Compile and run without arguments to run entire suite or
#   specify as runtime argumnets which benchmarks to run.
#
############################################################################

link "auxiliary" 

$ifdef _UNIX
$define NUL "/dev/null"
$else
   $define NUL "\\nul"
$endif

global output

procedure main(argv)
   local rL, tL, concurrent, tests := []

   concurrent := verify_concurrent()
   
   output := open(NUL, "w") | stop("Cannot open " || NUL || " for writing")

   if *argv < 1 then {
      if /concurrent then
         write_error(3)
      put(tests, "all")
      }
   else every put(tests, !argv) 
   while test := get(tests) do {
      case test of {
         "all" : {

            write_header()
            
            writes(left("binary-trees 17",30))
            if \concurrent then tL := gettimes(run_binarytrees_concurrent,17)
            else tL := gettimes(run_binarytrees_sequential,17)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            
            if \concurrent then {
	       writes(left("chameneos-redux 1500000",30))
               tL := gettimes(run_chameneos, 1500000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3])
               }

            writes(left("fannkuch 10",30))
            tL := gettimes(run_fannkuch, 10)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("fasta 7000000",30))
            tL := gettimes(run_fasta, 7000000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("k-nucleotide 3-mil.dat",30))
            tL := gettimes(run_knucleotide, "3-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("mandelbrot 3500",30))
            if \concurrent then tL := gettimes(run_mandelbrot_concurrent,3500)
            else tL := gettimes(run_mandelbrot_sequential,3500)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("meteor-contest 2098",30))
            tL := gettimes(run_meteorcontest, 2098)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("n-body 1500000",30))
            tL := gettimes(run_nbody, 1500000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("pidigits 10000",30))
            tL := gettimes(run_pidigits, 10000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("regex-dna 5-mil.dat",30))
            if \concurrent then tL := gettimes(run_regexdna_concurrent, "5-mil.dat")
            else tL := gettimes(run_regexdna_sequential, "5-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("reverse-complement 25-mil.dat",30))
            tL := gettimes(run_reversecomplement, "25-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("spectral-norm 1300",30))
            tL := gettimes(run_spectralnorm, 1300)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            if \concurrent then {
	       writes(left("thread-ring 15000000",30))
               tL := gettimes(run_threadring, 15000000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3])
               }
            
            }
         "concord" : {
            write("\n")
            write("concord N/A")
            }
         "deal" : {
            write("\n")
            write("deal N/A")
            }
         "ipxref" : {
            write("\n")
            write("ipxref N/A")
            }
         "queens" : {
            write("\n")
            write("queens N/A")
            }
         "rsg" : {
            write("\n")
            write("rsg N/A")
            }
         "binary-trees" : {
            write_header()
            writes(left("binary-trees 17",30))
            if \concurrent then tL := gettimes(run_binarytrees_concurrent,17)
            else tL := gettimes(run_binarytrees_sequential,17)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "chameneos-redux" : {
            write("\n")
            write_header()
            writes(left("chameneos-redux 1500000",30))
            if \concurrent then {
               tL := gettimes(run_chameneos, 1500000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3])   
               } else write_error(2)
            }
         "fannkuch" : {
            write_header()
            writes(left("fannkuch 10",30))
            tL := gettimes(run_fannkuch, 10)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "fasta" : {
            write_header()
            writes(left("fasta 7000000",30))
            tL := gettimes(run_fasta, 7000000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "k-nucleotide": {
            write_header()
            writes(left("k-nucleotide 3-mil.dat",30))
            tL := gettimes(run_knucleotide, "3-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "mandelbrot" : {
            write_header()
            writes(left("mandelbrot 3500",30))
            if \concurrent then tL := gettimes(run_mandelbrot_concurrent,3500)
            else tL := gettimes(run_mandelbrot_sequential,3500)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "meteor-contest" : {
            write_header()
            writes(left("meteor-contest 2098",30)) 
            tL := gettimes(run_meteorcontest, 2098)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "n-body" : {
            write_header()
            writes(left("n-body 1500000",30))
            tL := gettimes(run_nbody, 1500000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "pidigits" : {
            write_header()
            writes(left("pidigits 10000",30))
            tL := gettimes(run_pidigits, 10000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "regex-dna" : {
            write_header()
            writes(left("regex-dna 5-mil.dat",30))
            if \concurrent then tL := gettimes(run_regexdna_concurrent, "5-mil.dat")
            else tL := gettimes(run_regexdna_sequential, "5-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "reverse-complement" : {
            write_header()
            writes(left("reverse-complement 25-mil.dat",30))
            tL := gettimes(run_reversecomplement, "25-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "spectral-norm" : {
            write_header()
            writes(left("spectral-norm 1300",30))
            tL := gettimes(run_spectralnorm, 1300)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "thread-ring" : {
            write_header()
            writes(left("thread-ring 15000000",30))
            if \concurrent then {
               tL := gettimes(run_threadring, 15000000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3])
               } else write_error(2)
            }
         default : write("\ncannot run benchmark " || test || "\n")
         }
      }
end
