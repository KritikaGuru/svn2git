############################################################################
#
#	File:     run-benchmark.icn
#
#	Subject:  Run Unicon Benchmarks with "small" n
#
#	Author:   Shea Newton
#
#	Date:     January 3, 2014
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#   Compile and run without arguments to run entire suite or
#   specify as runtime arguments which benchmarks to run.
#
############################################################################
link "auxiliary" 

$ifdef _UNIX
$define NUL "/dev/null"
$else
   $define NUL "\\nul"
$endif

global output

procedure main(argv)
   local rL, tL, concurrent, tests := []

   concurrent := verify_concurrent()
   
   output := open(NUL, "w") | stop("Cannot open " || NUL || " for writing")

   if *argv < 1 then {
      if /concurrent then
         write_error(3)
      put(tests, "all")
      }
   else every put(tests, !argv) 
   while test := get(tests) do {
      case test of {
         "all" : {
            write_header()
            
            writes(left("concord concord.dat",30))
            tL := gettimes(run_concord, "concord.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("deal 50000",30))
            tL := gettimes(run_deal, 50000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("ipxref ipxref.dat",30))
            tL := gettimes(run_ipxref, "ipxref.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("queens 12",30))
            tL := gettimes(run_queens, 12)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("rsg rsg.dat",30))
            tL := gettimes(run_rsg, "rsg.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            
            writes(left("binary-trees 14",30))
            if \concurrent then tL := gettimes(run_binarytrees_concurrent,14)
            else tL := gettimes(run_binarytrees_sequential,14)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            
            if \concurrent then {
	       writes(left("chameneos-redux 65000",30))
               tL := gettimes(run_chameneos, 65000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3])
               }

            writes(left("fannkuch 9",30))
            tL := gettimes(run_fannkuch, 9)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("fasta 250000",30))
            tL := gettimes(run_fasta, 250000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("k-nucleotide 150-thou.dat",30))
            tL := gettimes(run_knucleotide, "150-thou.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("mandelbrot 750",30))
            if \concurrent then tL := gettimes(run_mandelbrot_concurrent,750)
            else tL := gettimes(run_mandelbrot_sequential,750)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("meteor-contest 600",30))
            tL := gettimes(run_meteorcontest, 600)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("n-body 100000",30))
            tL := gettimes(run_nbody, 100000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("pidigits 7000",30))
            tL := gettimes(run_pidigits, 7000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("regex-dna 700-thou.dat",30))
            if \concurrent then tL := gettimes(run_regexdna_concurrent, "700-thou.dat")
            else tL := gettimes(run_regexdna_sequential, "700-thou.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("reverse-complement 15-mil.dat",30))
            tL := gettimes(run_reversecomplement, "15-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            writes(left("spectral-norm 300",30))
            tL := gettimes(run_spectralnorm, 300)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])

            if \concurrent then {
	       writes(left("thread-ring 700000",30))
               tL := gettimes(run_threadring, 700000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3])
               }
            
            }
         "concord" : {
            write_header()
            writes(left("concord concord.dat",30))
            tL := gettimes(run_concord, "concord.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "deal" : {
            write_header()
            writes(left("deal 50000",30))
            tL := gettimes(run_deal, 50000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "ipxref" : {
            write_header()
            writes(left("ipxref ipxref.dat",30))
            tL := gettimes(run_ipxref, "ipxref.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "queens" : {
            write_header()
            writes(left("queens 12",30))
            tL := gettimes(run_queens, 12)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "rsg" : {
            write_header()
            writes(left("rsg rsg.dat",30))
            tL := gettimes(run_rsg, "rsg.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "binary-trees" : {
            write_header()
            writes(left("binary-trees 14",30))
            if \concurrent then tL := gettimes(run_binarytrees_concurrent,14)
            else tL := gettimes(run_binarytrees_sequential,14)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "chameneos-redux" : {
            write_header()
            writes(left("chameneos-redux 65000",30))
            if \concurrent then {
               tL := gettimes(run_chameneos, 65000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3])
               } else write_error(2)
            }
         "fannkuch" : {
            write_header()
            writes(left("fannkuch 9",30))
            tL := gettimes(run_fannkuch, 9)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "fasta" : {
            write_header()
            writes(left("fasta 250000",30))
            tL := gettimes(run_fasta, 250000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "k-nucleotide": {
            write_header()
            writes(left("k-nucleotide 150-thou.dat",30))
            tL := gettimes(run_knucleotide, "150-thou.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "mandelbrot" : {
            write_header()
            writes(left("mandelbrot 750",30))
            if \concurrent then tL := gettimes(run_mandelbrot_concurrent,750)
            else tL := gettimes(run_mandelbrot_sequential,750)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "meteor-contest" : {
            write_header()
            writes(left("meteor-contest 600",30)) 
            tL := gettimes(run_meteorcontest, 600)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "n-body" : {
            write_header()
            writes(left("n-body 100000",30))
            tL := gettimes(run_nbody, 100000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "pidigits" : {
            write_header()
            writes(left("pidigits 7000",30))
            tL := gettimes(run_pidigits, 7000)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "regex-dna" : {
            write_header()
            writes(left("regex-dna 700-thou.dat",30))
            if \concurrent then tL := gettimes(run_regexdna_concurrent, "700-thou.dat")
            else tL := gettimes(run_regexdna_sequential, "700-thou.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "reverse-complement" : {
            write_header()
            writes(left("reverse-complement 15-mil.dat",30))
            tL := gettimes(run_reversecomplement, "15-mil.dat")
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "spectral-norm" : {
            write_header()
            writes(left("spectral-norm 300",30))
            tL := gettimes(run_spectralnorm, 300)
            rL := calctimes(tL[1], tL[2], tL[3], tL[4])
            writetime(rL[1], rL[2], rL[3])
            }
         "thread-ring" : {
            write_header()
            writes(left("thread-ring 700000",30))
            if \concurrent then {
               tL := gettimes(run_threadring, 700000)
               rL := calctimes(tL[1], tL[2], tL[3], tL[4])
               writetime(rL[1], rL[2], rL[3])
               } else write_error(2)
            }
         default : write("\ncannot run benchmark " || test || "\n")
         }
      }
end
