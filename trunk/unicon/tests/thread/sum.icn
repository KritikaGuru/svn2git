
global gsum, mutex_gsum


procedure main(argv)
   gsum:=0
   thrd:=[]

   if *argv>0 then
      n:=integer(argv[1]) | stop ("arg must be integer")
    else
      n:=1

   x := 10^7
   d:= x / n
   every i:=1 to n do{
     th := create suma(d, i)
     put(thrd, th)
     }

   mutex_gsum := mutex()
  
   write(*thrd , " thread(s) will sum ", x, " ones.")
   write("The work will be divided equally between the threads. please wait... ")

   t:=&now
   every i:=1 to *thrd do
      thread(thrd[i])

   every i:=1 to *thrd do
      wait(thrd[i])

   # print the sum. (x-d*n) is just an error correction when using odd # of threads.
   write("sum=",gsum+(x-d*n))
   
   write("time:", &now-t, " seconds")
end


procedure suma(n, id)
   local sum
    sum:=0
    every i:=1 to n do
      sum+:=1

   lock(mutex_gsum)
   gsum +:= sum
   unlock(mutex_gsum)

   write("Thread ", id , " is done")
end

