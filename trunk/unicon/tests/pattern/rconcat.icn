## rconcat.icn
## Paden Rumsey
## July 10, 2016

## With the current data file there are three lines

#This is to test regex's in Unicon, a successor to Icon
#This will thoroughly test its' capablities
#This is an improvement on Icon, the original language

## The last regex fails all three tests due to the nature of grouping
## the "con" and the "I" of the concatenation after the alternation are
## considered before the concatenation meaning that the regex will match
## on UnII or conicon or Uniconcon. And some other permutations. The third
## regex fails a number of times due to the preprocessor. if you look at the
## image of the pattern you can see that it only is only identifying the
## "Unicon" portion of the pattern. A -E compilation will help see what I mean
## the alternate isn't even picked up by the preprocessor. 

procedure main()
    while s := read() do {
	write("Concatenation")
	regx := <"Uni" "con">
	write(image(regx))
	match_string(s, regx)

	write("Grouped Concatenation")
	regx := <("Uni" "con")>
	write(image(regx))
	match_string(s, regx)

	write("Multi Group Concatenation")
	regx := <("Un" "i" "con")>
	write(image(regx))
        match_string(s, regx)

	write("Multi Group Concatenation with Alternation")
	regx := <(("Un" "i" "con") | ("I" "c" "on"))>
	write(image(regx))
        match_string(s, regx)

	write("Multi Group Concatenation with Alernation minus Parens")
	regx := <(("Un" "I" "con" | "I" "c" "on"))> 
	write(image(regx))
	match_string(s, regx)
    }
end

procedure match_string(s, r)
    r := r -> out || Rem() -> remain
    if s ?? r then {
	write("The matched string is ", out, " the remainder is ", remain)
	}
    else
	write("The regex failed to match")
    write("\n")
end
