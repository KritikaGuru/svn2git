/*
 * rwin3d.ri - platform-independent 3D facilities code
 *
 * The analogy in 2D is the rwindow.r file.  As much of ropengl.ri as possible
 * should be moved here and used in all 3D implementations.
 */
#ifdef Graphics3D

/*
 * For each 3D graphics operation, there is a descriptor that
 * holds the record constructor for that type of primitive.
 * The first field is named "name"; for > 1 field, their names are in
 * an array. If fields > 2, then fields 2-4 are named "x", "y", "z".
 */
struct descrip gl_torus = {D_Null};
struct descrip gl_cube = {D_Null};
struct descrip gl_sphere = {D_Null};
struct descrip gl_cylinder = {D_Null};
struct descrip gl_disk = {D_Null};
struct descrip gl_rotate = {D_Null};
struct descrip gl_translate = {D_Null};
struct descrip gl_scale = {D_Null};
struct descrip gl_popmatrix = {D_Null};
struct descrip gl_pushmatrix = {D_Null};
struct descrip gl_identity = {D_Null};
struct descrip gl_matrixmode = {D_Null};
struct descrip gl_meshmode = {D_Null};
struct descrip gl_texture = {D_Null};
struct descrip gl_font3d = {D_Null};
struct descrip gl_drawstring3d = {D_Null};
struct descrip gl_mark = {D_Null};
struct descrip gl_endmark = {D_Null};

char * gl_torus_fields[] = {"radius1","radius2"};
char * gl_cube_fields[] = {"length"};
char * gl_sphere_fields[] = {"radius"};
char * gl_cylinder_fields[] ={"height","radius1","radius2"};
char * gl_disk_fields[] = {"radius1","radius2", "angle1","angle2"};
char * gl_rotate_fields[] = {"angle"};
char * gl_matrixmode_fields[] = {"mode"};
char * gl_meshmode_fields[] = {"mode"};
char * gl_texture_fields[] = {"texture_handle", "window_binding"};
char * gl_font_fields[] = {"font_ptr"};
char * gl_drawstring3d_fields[] = {"str"};
char * gl_mark_fields[] = {"section_name","skip","count","int_code", "depth"};
char * gl_endmark_fields[] = {"depth"};

dptr rec_structinate(dptr dp, char *name, int nfields, char *a[])
{
   int i;
   struct descrip s;
   struct descrip fields[16];
   if (is:null(*dp)) {
      AsgnCStr(s, name);
      AsgnCStr(fields[0], "name");
      AsgnCStr(fields[1], "code");
      if (nfields > 3) {
         if (!strcmp(name,"gl_mark") || !strcmp(name, "gl_texture")) {
           for(i=2; i < nfields; i++)
              AsgnCStr(fields[i], a[i-2]);
           }
         else {
           AsgnCStr(fields[2], "x");
           AsgnCStr(fields[3], "y");
           AsgnCStr(fields[4], "z");
           for(i=5; i < nfields; i++)
              AsgnCStr(fields[i], a[i-5]);
           }
         }
      else if (nfields == 3)
         AsgnCStr(fields[2], a[0]);
      dp->dword = D_Proc;
      dp->vword.bptr = (union block *)dynrecord(&s, fields, nfields);
      }
   return dp;
}


dptr rec_structor3d(char *name)
{
#ifdef Graphics3D
   if (!strcmp(name, "gl_torus"))
      return rec_structinate(&gl_torus, "gl_torus", 7, gl_torus_fields);
   else if (!strcmp(name, "gl_cube"))
      return rec_structinate(&gl_cube, "gl_cube", 6, gl_cube_fields);
   else if (!strcmp(name, "gl_sphere"))
      return rec_structinate(&gl_sphere, "gl_sphere", 6, gl_sphere_fields);
   else if (!strcmp(name, "gl_cylinder"))
      return rec_structinate(&gl_cylinder, "gl_cylinder", 8, gl_cylinder_fields);
   else if (!strcmp(name, "gl_disk"))
      return rec_structinate(&gl_disk, "gl_disk", 9, gl_disk_fields);
   else if (!strcmp(name, "gl_rotate"))
      return rec_structinate(&gl_rotate, "gl_rotate", 6, gl_rotate_fields);
   else if (!strcmp(name, "gl_translate"))
      return rec_structinate(&gl_translate, "gl_translate", 5, NULL);
   else if (!strcmp(name, "gl_scale"))
      return rec_structinate(&gl_scale, "gl_scale", 5, NULL);
   else if (!strcmp(name, "gl_popmatrix"))
      return rec_structinate(&gl_popmatrix, "gl_popmatrix", 2, NULL);
   else if (!strcmp(name, "gl_pushmatrix"))
      return rec_structinate(&gl_pushmatrix, "gl_pushmatrix", 2, NULL);
   else if (!strcmp(name, "gl_identity"))
      return rec_structinate(&gl_identity, "gl_identity", 2, NULL);
   else if (!strcmp(name, "gl_matrixmode"))
      return rec_structinate(&gl_matrixmode, "gl_matrixmode",
				3, gl_matrixmode_fields);
   else if (!strcmp(name, "gl_meshmode"))
      return rec_structinate(&gl_meshmode, "gl_meshmode",
				3, gl_meshmode_fields);
   else if (!strcmp(name, "gl_texture"))
      return rec_structinate(&gl_texture, "gl_texture", 4, gl_texture_fields);
   else if (!strcmp(name, "gl_font3d"))
      return rec_structinate(&gl_font3d, "gl_font3d", 3, gl_font_fields);
   else if (!strcmp(name, "gl_drawstring3d"))
	return rec_structinate(&gl_drawstring3d, "gl_drawstring3d",
				6, gl_drawstring3d_fields);
   else if (!strcmp(name, "gl_endmark"))
      return rec_structinate(&gl_endmark, "gl_endmark", 3, gl_mark_fields);
   else if (!strcmp(name, "gl_mark"))
	return rec_structinate(&gl_mark, "gl_mark", 7, gl_mark_fields);
#endif					/* Graphics3D */

   return 0;
}

#endif					/* Graphics3D */
