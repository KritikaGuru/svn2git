#
# $Id: canvastoolbar.icn,v 1.3 2005-12-30 17:42:33 rparlett Exp $
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

import gui


############################################################################
#
# Class for representing a ToolBar on the canvas.
#
class CanvasToolBar : CanvasPanel : ToolBar()
   # 
   # Override to stop the Ticker starting.
   #
   method firstly()
      self.Panel.firstly()
      state := 5
   end

   #
   # Copy object.
   #
   method cp()
      c := CanvasToolBar()
      self.CanvasComponent.cp(c)
      every put(c.children, (!self.children).cp())
      return c
   end

   #
   # Duplicate object.
   #
   method dup(pc)
      c := CanvasToolBar()
      self.CanvasComponent.dup(c, pc)
      every c.add((!self.children).dup(pc))
      return c
   end

   #
   # Open the configuration dialog box.
   #
   method dialog()
      return CanvasToolBarDialog(self)
   end

   method display(buffer_flag)
      EraseRectangle(self.cbwin, self.x, self.y, self.w, self.h)
      if \self.draw_border_flag then
         DrawRaisedRectangle(self.cbwin, self.x, self.y, self.w, self.h)
      else
         Rectangle(self.cbwin, self.x, self.y, self.w, self.h)
      center_string(self.cbwin, self.x + self.w / 2, self.y + 10, "<ToolBar>")
      every (!self.children).display(1)
      if /buffer_flag then
         CopyArea(self.cbwin, self.cwin, self.x, self.y, self.w, self.h, self.x, self.y)
   end

   initially
      self.CanvasComponent.initially()
      self.ToolBar.initially()
      #class_variable := 1
      self.class_name := "ToolBar"
      self.import_name := "gui"
      self.name := "toolbar"
end
