#
# $Id: guiprocs.icn,v 1.1 2003-08-04 17:32:42 jeffery Exp $
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package gui
link graphics

$include "guih.icn"     

procedure EraseRectangle(W, x, y, w, h)
   if x < 0 then {
      w +:= x
      x := 0
   }
      
   return EraseArea(W, x, y, w, h)
end

procedure Rectangle(W, x, y, w, h)
   return DrawRectangle(W, x, y, w - 1, h - 1)
end

#
# Return the char width for ch, which may be a tab
#
procedure CharWidth(win, ch)
   if ch == "\t" then
      return TextWidth(win, " ")
   else
      return TextWidth(win, ch)
end

#
# Extended TextWidth function, handling tabs in s.  Returns the
# width of the string from positions i through j.
#
procedure TextWidthEx(win, s, i, j, tw)
   local tp, w, lr, cc, ch

   if /i then {
      i := 1
      j := *s + 1
   } else {
      /j:= i + 1
      if j <= 0 then
         j +:= *s + 1
   }

   if not upto('\t', s) then
      return TextWidth(win,s[i:j])

   /tw := 8
   tp := 0
   w := 0
   lr := 0
   every cc := 1 to *s do {
      if cc = i then
         lr := w
      if cc = j then
         break
      ch := s[cc]

      if ch == "\t" then {
         repeat {
            w +:= TextWidth(win, " ")
            tp +:= 1
            if tp % tw = 0 then 
               break
         }
      } else {
         w +:= TextWidth(win, ch)
         tp +:= 1
      }
   }
   return w - lr
end

#
# Draw a raised rectangle.
#
procedure DrawRaisedRectangle(W, x, y, w, h)
   cw := Clone(W)
   Fg(cw, "black")
   DrawLine(cw, x + w - 1, y, x + w - 1, y + h - 1, x, y + h - 1)
   DrawLine(cw, x + w - 2, y + 1, x + w - 2, y + h - 2, x + 1, y + h - 2)
   Fg(cw, "pale gray")
   DrawLine(cw, x, y + h - 1, x, y, x + w - 1, y)
   Fg(cw, "white")
   DrawLine(cw, x + 1, y + h - 2, x + 1, y + 1, x + w - 2, y  + 1)
   Uncouple(cw)
end

#
# Draw a sunken rectangle.
#
procedure DrawSunkenRectangle(W, x, y, w, h)
   cw := Clone(W)

   Fg(cw, "pale gray")
   DrawLine(cw, x + w - 1, y, x + w - 1, y + h - 1, x, y + h - 1)
   Fg(cw, "white")
   DrawLine(cw, x + w - 2, y + 1, x + w - 2, y + h - 2, x + 1, y + h - 2)
   Fg(cw, "black")
   DrawLine(cw, x, y + h - 1, x, y, x + w - 1, y)
   DrawLine(cw, x + 1, y + h - 2, x + 1, y + 1, x + w - 2, y  + 1)
   Uncouple(cw)
end

#
# Draw an etched horizontal line.  The result is 3 pixels wide
#
procedure DrawEtchedHorizontalLine(W, x, y, l)
   cw := Clone(W)

   Fg(cw, "black")
   DrawLine(cw, x, y - 1, x + l, y - 1)
   Fg(cw, "pale gray")
   DrawLine(cw, x, y, x + l, y)
   Fg(cw, "white")
   DrawLine(cw, x, y + 1, x + l, y + 1)
   Uncouple(cw)
end

#
# Draw an etched vertical line.  The result is 3 pixels wide
#
procedure DrawEtchedVerticalLine(W, x, y, l)
   cw := Clone(W)

   Fg(cw, "black")
   DrawLine(cw, x - 1, y, x - 1, y + l)
   Fg(cw, "pale gray")
   DrawLine(cw, x, y, x, y + l)
   Fg(cw, "white")
   DrawLine(cw, x + 1, y, x + 1, y + l)
   Uncouple(cw)
end

procedure FilterRectangle(W, x, y, w, h)
   cw := Clone(W, "fillstyle=masked", "reverse=on", "pattern=waves")
   FillRectangle(cw, x, y, w, h)
   Uncouple(cw)
end

procedure left_string(win, x, y, s)
   y +:= (WAttrib(win, "ascent") - WAttrib(win, "descent")) / 2
   return DrawString(win, x, y, s)
end

procedure center_string(win, x, y, s)
   x -:= TextWidth(win, s) / 2
   y +:= (WAttrib(win, "ascent") - WAttrib(win, "descent")) / 2
   return DrawString(win, x, y, s)
end

procedure right_string(win, x, y, s) 
   x -:= TextWidth(win, s)
   y +:= (WAttrib(win, "ascent") - WAttrib(win, "descent")) / 2
   return DrawString(win, x, y, s)
end

procedure img_width(s)
   return s ? integer(tab(upto(',')))
end

procedure img_height(s)
   s ? {
      w := integer(tab(upto(',')))
      move(1)
      tab(upto(','))
      move(1)
      return *tab(0) / (0 ~= \w)
   }
end

procedure img_style(s)
   return case s of {
      "box_up" :
"11,g2,_
11111111111_
11111111110_
11~~~~~~~00_
11~~~~~~~00_
11~~~~~~~00_
11~~~~~~~00_
11~~~~~~~00_
11~~~~~~~00_
11~~~~~~~00_
11000000000_
10000000000_
"
         "box_down" :
"11,g2,_
00000000001_
00000000011_
00000000011_
00000000011_
00000000011_
00000000011_
00000000011_
00000000011_
00000000011_
01111111111_
11111111111_
"
      "diamond_up" :
"11,g2,_
~~~~~1~~~~~_
~~~~111~~~~_
~~~11~11~~~_
~~11~~~11~~_
~11~~~~~11~_
11~~~~~~~11_
~00~~~~~00~_
~~00~~~00~~_
~~~00~00~~~_
~~~~000~~~~_
~~~~~0~~~~~_
"
         "diamond_down" :
"11,g2,_
~~~~~0~~~~~_
~~~~000~~~~_
~~~00000~~~_
~~0000000~~_
~000000000~_
00000000000_
~110000011~_
~~1100011~~_
~~~11011~~~_
~~~~111~~~~_
~~~~~1~~~~~_
"
      "arrow_up" :
"11,c1,_
~~~~~0~~~~~_
~~~~000~~~~_
~~~00000~~~_
~~0000000~~_
~000000000~_
00000000000_
"
      "arrow_down" :
"11,c1,_
00000000000_
~000000000~_
~~0000000~~_
~~~00000~~~_
~~~~000~~~~_
~~~~~0~~~~~_
"
      "arrow_left" :
"9,c1,_
~~~~~~~~0_
~~~~~~000_
~~~~00000_
~~0000000_
000000000_
~~0000000_
~~~~00000_
~~~~~~000_
~~~~~~~~0_
"
      "arrow_right" : "9,c1,_
0~~~~~~~~_
000~~~~~~_
00000~~~~_
0000000~~_
000000000_
0000000~~_
00000~~~~_
000~~~~~~_
0~~~~~~~~_
"
      "closed_folder" : "16,c1,_
~~~~~~~~~~~~~~~~_
~~~~0000~~~~~~~~_
~~~0;;;;0~~~~~~~_
~~0;;;;;;0~~~~~~_
~0000000000000~~_
~0;;;;;;;;;;;0~~_
~0;;;;;;;;;;;0~~_
~0;;;;;;;;;;;0~~_
~0;;;;;;;;;;;0~~_
~0;;;;;;;;;;;0~~_
~0;;;;;;;;;;;0~~_
~0;;;;;;;;;;;0~~_
~0000000000000~~_
~~~~~~~~~~~~~~~~_
"

      "open_folder" : "16,c1,_
~~~~~~~~~~~~~~~~_
~~~0000~~~~~~~~~_
~~0DDDD0~~~~~~~~_
~0DDDDDD0~~~~~~~_
0000000000000~~~_
02D2D2D2D2D20~~~_
0D2D000000000000_
02D0DDDDDDDDDDD0_
0D20DDDDDDDDDD0~_
020DDDDDDDDDDD0~_
0D0DDDDDDDDDDD0~_
00DDDDDDDDDD00~~_
0000000000000~~~_
~~~~~~~~~~~~~~~~_
"

      "file" : "16,c1,_
~~~~~~~~~~~~~~~~_
~~~0000000~~~~~~_
~~~06666600~~~~~_
~~~0606060~0~~~~_
~~~0666660000~~~_
~~~0600606660~~~_
~~~0666666660~~~_
~~~0600600060~~~_
~~~0666666660~~~_
~~~0600060660~~~_
~~~0666666660~~~_
~~~0666666660~~~_
~~~0000000000~~~_
~~~~~~~~~~~~~~~~_
"

      "plus" : "9,g2,_
000000000_
0~~~~~~~0_
0~~~0~~~0_
0~~~0~~~0_
0~00000~0_
0~~~0~~~0_
0~~~0~~~0_
0~~~~~~~0_
000000000_
"

      "minus" : "9,g2,_
000000000_
0~~~~~~~0_
0~~~~~~~0_
0~~~~~~~0_
0~00000~0_
0~~~~~~~0_
0~~~~~~~0_
0~~~~~~~0_
000000000_
"
      "tiny_arrow_up" :
"7,c1,_
~~~0~~~_
~~000~~_
~00000~_
0000000_
"
      "tiny_arrow_down" :
"7,c1,_
0000000_
~00000~_
~~000~~_
~~~0~~~_
"
      default : stop("unknown image style")
   }
end

procedure set_CheckBoxes_by_flag(i, checkboxes)
   j := 1
   every c := !checkboxes do {
      if iand(i, j) ~= 0 then
         c.toggle_is_checked()
      j *:= 2
   }
end

procedure get_CheckBoxes_by_flag(checkboxes)
   i := 1
   j := 0
   every c := !checkboxes do {
      if c.is_checked() then
         j +:= i
      i *:= 2
   }
   return j
end

