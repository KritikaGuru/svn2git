#
# $Id: gethttpprocess.icn,v 1.1 2004-02-12 17:07:55 rparlett Exp $
#
# This file is in the public domain.
#
# Author: Robert Parlett (parlett@dial.pipex.com)
#

package http

import util
import lang

$include "gethttpincl.icn"

#
# The process used by GetHttp to attempt a raw http get.
# It should not be used directly.
#
class GetHttpProcess : Process(parent, mq)
   #
   # Set the parent {GetHttpControlProcess} class.
   #
   method set_parent(p)
      return self.parent := p
   end

   method set_mq(mq)
      self.mq := mq
   end

   method run()
      local f, s

      if not(f := parent.url.open()) then {
         mq.send(NO_CONNECT)
         return
      }

      /parent.headers["user-agent"] :=  "gethttp.iol [en] (" || &host || ")"
      /parent.headers["host"] := parent.url.get_address()

      s := \parent.request_type | if \parent.post_data then "POST" else "GET"

      write(f, s, " ", parent.url.get_file(), " HTTP/1.0")

      if /parent.post_data then {
         parent.write_headers(f)
         write(f)
      } else {
         #
         # Add the post data, convert from table if necessary
         #
         if lang::get_type(parent.post_data) == "table" then {
            #
            # Convert from table in exactly the same way as for a GET parameter string.
            # In this case always use the standard content-type encoding.
            #
            s := URL().make_cgi_string(parent.post_data)
            parent.headers["content-type"] := "application/x-www-form-urlencoded"
         } else {
            #
            # Allow user content-type encoding if specified for this arbitrary data.
            #
            s := parent.post_data
            /parent.headers["content-type"] := "application/x-www-form-urlencoded"
         }
         parent.headers["content-length"] := *s
         parent.write_headers(f)
         write(f)
         writes(f, s)
      }

      flush(f)

      while s := sysread(f, 1024) do
         mq.send(s)

      close(f)

      mq.send(DONE)
   end
end
