package util

class Connectable(listeners)
   #
   # Helper method to create and fire an Event object from the given parameters.
   #
   method fire(type, param)
      local e, l

      if /type then stop("null type to fire")

      e := Event(self, type, param)
      every l := !listeners do {
	 if /l.type | l.type === e.type then
	    l.meth(l.obj, e)
	 }
      return e
   end

   #
   # Create and connect a Listener to this object.
   # @return the Listener created and added.
   #
   method connect(obj, meth, type)
      local l, p

      p := lang::find_method(obj, meth) | stop("No such method ", meth)

      # omit duplicate requests
      every l := !listeners do
	 if (l.obj === obj) & (l.meth === p) & (l.type === type) then
	    fail

      l := Listener(obj, p, type)
      put(listeners, l)
      return l
   end

   #
   # Remove all {Listener}s with the given object field.
   #
   method disconnect_all(obj)
      local t, l
      t := []
      every l := !listeners do {
	 if l.obj ~=== obj then
	    put(t, l)
	 }
      listeners := t
   end

   #
   # Remove a Listener previously returned by {connect}
   #
   method disconnect(l)
      local t := []
      every put(t, l ~=== !listeners)
      listeners := t
   end

initially
   listeners := []
end
