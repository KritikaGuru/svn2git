###########################################################################
#
#	File:     main.icn
#
#	Subject:  Main File For The Unicon IDE
#
#	Authors:   Nolan Clayton
#
#	Date:     May 16, 2004
#
############################################################################

link getpaths

global IDE

#
# main()
#
procedure main(argv)
   ui_initialize()

   IDE := dialog()
   IDE.show_modeless()
   
   #
   # load file(s) from command line argument, if any; add options etc.
   #
   while *argv>0 do  IDE.handle_openfile( ,pop(argv))
   IDE.set_focus( IDE.CurrentEditBox())
   
   repeat { editor_events() }
end

#
# Editor Events Proc:
#
procedure editor_events()
   local bag, d, e
   
   bag := []
   if * dispatcher.dialogs = 0 then exit(0)
   every d := !dispatcher.dialogs do {
      if *Pending(d.win) > 0 then {
         if /d.is_blocked_flag then {
            put(bag, d)
         }
         else {
            while *Pending(d.win) > 0 do {
               
               #
               # Discard the event and beep in the window. A close on a
	       # blocked window is a bad situation, probably the
	       # application should terminate in response to a
	       # process_event(), but if not, use
               # the hidden offscreen window until it is unblocked.
               e := Event(d.win)
               
               if integer(e) = -11 then {
                  d.win := d.buffer_win
                  d$process_event(e)
               }
               else if not(integer(e) = (&lrelease | &rrelease | &mrelease | &ldrag | &rdrag | &mdrag)) then
                  Alert(d.win)
            }
         }
      }
   }
   
   if d := ?bag then {
      e := Event(d.win)
      d$process_event(e)
   }
   else {
      delay(25)
   }
   
end


#
# Set Doc Path Proc:
#
procedure set_docpath()
   match("Binaries at ", docpath := &features) |
      Notice("What, no binaries?" ||
	     "Have you added Unicon's bin directory to your path?")
   docpath ?:= (="Binaries at " & tab(0))
   if map(docpath[-4:0])==("bin/"|"bin\\") then docpath[-4:0] := ""
   else write("did not find expected Unicon binaries in a bin/ directory")
end

#
# main initialization procedure
#
procedure ui_initialize()
   local f, line
   ui_ini := getenv("UNICONINI") | "ui.ini"
   height := 400
   width := 600
   msglines := 7
   font := "sans,15"
   linebreak := "LF"                      # default to UNIX mode
   if f := open(ui_ini) then {
      while line := read(f) do {
	 line ? {
	    if ="msglines" then {
	       tab(upto(&digits))
	       msglines := integer(tab(many(&digits)))
               }
	    else if ="height" then {
	       tab(upto(&digits))
	       height := integer(tab(many(&digits)))
               }
	    else if ="width" then {
	       tab(upto(&digits))
	       width := integer(tab(many(&digits)))
               }
	    else if ="font" then {
	       tab(many('= \t'))
	       font := tab(0)
               }
	    else if ="linebreak" then {
	       tab(many('= \t'))
	       linebreak := tab(0)
               }
            }
         }
      close(f)
      }
   wiconlog := tempname("ui",".tmp",,)
   xargs := ""
$ifdef _UNIX
   every browser := getenv("BROWSER") | "netscape" | "mozilla"| "opera" do {
      if stat(getpaths() || browser) then {
         write("found browser ", browser)
	 break
	 }
      else browser := &null
      }
$else
      (browser := "\"" || WinAssociate("HTM") || "\"" ) |
      write(
        "What, no browser?  Unicon's online help won't be readable until you\n_
	associate an HTML reader application with the HTM file extension.\n")
$endif
   set_docpath()
end

#
# newer(): is t1 newer than t2?
#
procedure newer(s1, s2)
   local t1, t2
   t1 := stat(s1).mtime | fail
   t2 := stat(s2).mtime | fail
   return t1 - t2 > 0 # or something like that
end
