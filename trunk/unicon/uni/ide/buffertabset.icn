import gui
link graphics
$include "guih.icn"

class BufferTabSet : TabSet()
   method get_tabitem(lab)
   local c
   if (c := !children).label == lab then return c
   end

   method display(buffer_flag)
      local last_on_a_line, cw

      #
      # Erase all and display outline of tabbed pane area.
      #
      EraseRectangle(self.cbwin, self.x, self.y, self.w, self.h)
      DrawRaisedRectangle(self.cbwin, self.x, self.y, self.w, self.h, 2)
      #
      # Display all tabs.
      #
      every (!!self.line_break).display_tab()
      last_on_a_line := (!self.line_break)[-1] === self.which_one

      #
      # Display line under tabs.
      #
      cw := Clone(self.cbwin, "drawop=reverse")
      Fg(cw, "pale gray")
      DrawLine(cw, x, y + tab_h - 2, which_one.label_x, y + tab_h - 2)

      if /last_on_a_line then
         DrawLine(cw, which_one.label_x + which_one.label_w, y + tab_h - 2,
		  x + w - 1, y + tab_h - 2)

      Fg(cw, "black")
      DrawLine(cw, x, y + tab_h - 1, which_one.label_x, y + tab_h - 1)

      if /last_on_a_line then
         DrawLine(cw, which_one.label_x + which_one.label_w, y + tab_h - 1,
		  x + w - 2, y + tab_h - 1)

      Uncouple(cw)

      #
      # Display contents of current tab into buffer
      #
      which_one.display(1)
      do_shading(cbwin)

      if /buffer_flag then
         CopyArea(cbwin, cwin, x, y, w, h, x, y)
   end

   method tab_right(c)
      local i
      if *components = 1 then fail
      every i := 1 to *components do if components[i] === c then break
      if (i > *components) | (components[i] ~=== c) then fail
      set_which_one( components[ (i % *components) +1 ] )
   end

initially
   self$TabSet.initially()
end
