global matching, L

class MatchParen(stack)

   method leftMatch(c)
      case (c) of {
         "("|")" : return "("
         "["|"]" : return "["
         "{"|"}" : return "{"
         }
   end

   method add_char( c) 
      local m, n

      if m := leftMatch(c) then {
         if m == c then { # c is some kind of left parenthesis
            push(stack, m)          # push a Character version, m
            }
         else {
            if (not (n := pop(stack))) | (n ~=== m) then {
            return "false"
            } 
         }
      }
   end
  
   method add_string(s)
      if add_char(!s) == "false" then fail
      return
   end

   method test(s)
   local i, sav
      stack := [ ]

      if add_string(s) & *stack=0 then {
         sav := &window
         &window  := &null
            Notice("Good: Matching")
         &window := sav
         }
      else {
         sav := &window
         &window  := &null
            Notice("Bad: No Matching")
         &window := sav
         }
   end

initially
   matching := "true"
   stack := []
end
