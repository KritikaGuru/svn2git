#################################################################
#
#   File:         utags.icn
#
#   Subject:   Parse File and Generate Nodes for  
#		 Class Browser Tree
#   Author:   Nolan Clayton
#
#   Date:       May 26, 04
#
##################################################################

import gui
global line

##################################################################
# class  Tag : is a subclass of Node used only to keep 
#  track of Node attribs
##################################################################

procedure utags(contents, parentfile)
   local  lineno, outlines, notid, word, x, gword

   notid := &cset -- &ucase -- &digits -- &lcase -- '_'

   lineno := 1
   outlines   := []

   every line := !contents do {

      line[upto('#',line):0] := ""
      line[upto("*/",line):0] := ""
      line[upto("/*",line):0] := ""
      line[upto("//",line):0] := ""

   line ? {
      gword3 := getword3(line)
### Unicon Tags ###

      if find(".icn", parentfile) then {    #Unicon Tags
         gword := getword()
         tab(many(' ')) 

         if gword === "procedure" then {
	       put(outlines, Tag("procedure", getword(), lineno, parentfile))
	  }
         if gword === "class" then {
	       put(outlines, Tag("class", getword(), lineno, parentfile))
          }
         if gword === "method" then {
	       outlines[-1].add( Tag("method", getword(), lineno, parentfile))
          }
         if gword === "initially" then {
	       outlines[-1].add(Tag("initially","initially",lineno,parentfile))
          }
         if gword === "link" then {
            every  word := getword()  do
               put(outlines, Tag("link", word, lineno, parentfile) )
          }
         if gword === "$include" then {
            every  word := getword()  do
               put(outlines, Tag("$include", word, lineno, parentfile) )
          }
         if gword === "package" then {
            every  word := getword()  do
               put(outlines, Tag("package", word, lineno, parentfile) )
          }
       }
       lineno +:= 1
   }
}
   return outlines
end


#
# procedures' names are self explanitory.  Taken from itags. #
#

procedure getword()
   local word
   static letts, ids
   initial {
        letts := &letters ++ '(' ++ '{'
        ids :=&letters ++ &digits ++ '_' ++ '.'
     }

   while tab(upto(letts)) do {
      word := tab(many(ids))
      suspend word
   }
end

procedure getword3(line)
 local i, c, ch1, ch2, index, index2

#
# returns the index of the location of 
# '(' or '{' in the method header.
#
 ch1:=0
 every c := !line do {
    ch1+:=1
    if  c == "(" | c == "{" then {
       index2 := ch1
       break
    }
  }

#
# returns the index of the location of 
# the first blank before the method name.
#
 i:=\index2-2
 while line[\i] ~== " " do
    i-:=1

 index1:=i
 word := line[\index1:\index2] 
 suspend word

end



#################################################################
# Stand Alone Version
#         Uncomment The Lines Below...
#################################################################
#
# global Tags
#
# procedure main(args)
#    local i, lines, d, name, l, temp
   
#    Tags := []
#    lines := []
#    l := []
   
#    while *args > 0 do {
#       name := pop(args)
#       i  := open(  name,"r")
 
#       while put( lines, read(i))
#       close(i)
#       l := utags(lines)

#       temp := Tag("file",name, 0)
#       every  i :=  ! l do temp.add(i) 

#       put( Tags, temp)
#       lines := []
#    }

 
   
#    d := dialog()
#    d.show_modal()
   
# end


# class dialog : _Dialog(class_browser)

#    method handle_class_browser(ev)
#       class_browser$flatten()
#    end

#    method handle_default(ev)
#    end
      
#    method dialog_event(ev)
#       case ev.get_component() of {
#          class_browser : handle_class_browser(ev)
#          default : handle_default(ev)
#       }
#    end
   
#    method setup()
#       local nodes, names, i, j
      

#       self.set_attribs("size=500,600", "bg=pale gray")
#       self.min_width  := 200
#       self.min_height := 200
      
#       class_browser := ClassBrowser()
#       class_browser$set_pos("5", "5")
#       class_browser$set_size("100%-10", "100%-10")
#       class_browser$set_attribs("bg=white","font=sans,18","label=Unicon Class File Browser", "resize=on")
      
#       class_browser$filltree(Tags)
#       self$add(class_browser)
      
#    end
   
#    method component_setup()
#       self.setup()
#    end

#    initially
#       self$_Dialog.initially()
# end
