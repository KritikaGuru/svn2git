################################################################
#
#   File:	whitemenubar.icn
#
#   Subject:	SubClass of Menu Bar
#
#   Author:	Nolan Clayton
#
#   Date:	May 25, 04
#
################################################################


$include "guih.icn"


#
# class White Menu Bar: Used only to overide the display method.
#
class WhiteMenuBar : MenuBar( )

   method display(buffer_flag)
      local m, oldfg

      EraseRectangle(cbwin, x, y, w, h)
      DrawRaisedRectangle(cbwin, x, y, w, h,1)

      
      #
      #These  4 rectangles give the tabs a nice look
      oldfg := Fg(cbwin)
      set_attribs("fg=white")
      FillRectangle(cbwin, x, y + h/2, w, h/2)
      set_attribs("fg=pale greyish white")
      FillRectangle(cbwin, x, y + h/2, w, h/4)
      set_attribs("fg=light greyish white")
      FillRectangle(cbwin, x, y, w, h/2)
      set_attribs("fg=greyish white")
      FillRectangle(cbwin, x, y, w, h/4)
      set_attribs("fg="||oldfg)
       
      #
      # Draw the menu options with a raised rectangle around the open menu.
      #m.label_mid_w gives the space for the menu label, which includes
      # DEFAULT_TEXT_X_SURROUND either side
      # of the label itself. m.label_x is the x position, so
      # m.label_x + DEFAULT_TEXT_X_SURROUND
      # put the string in the centre of its area.
      every m := !menus do {
	 if m === \which_open then
	    DrawRaisedRectangle(cbwin, m.label_x, y + BORDER_WIDTH,
				m.label_mid_w, h - 2 * BORDER_WIDTH,1)
	 
	 left_string(cbwin, m.label_x + DEFAULT_TEXT_X_SURROUND,
		     y + h / 2, m.get_label())
	 
	 if \m.is_shaded_flag then
	    FilterRectangle(cbwin, m.label_x, y + BORDER_WIDTH,
			    m.label_mid_w, h - 2 * BORDER_WIDTH)
      }

      do_shading(cbwin)
      if /buffer_flag then
	 CopyArea(cbwin, cwin, x, y, w, h, x, y)
   end
   
   initially(argv[])
      self$MenuBar.initially()
      if *argv > 0 then set_fields(argv)
end
