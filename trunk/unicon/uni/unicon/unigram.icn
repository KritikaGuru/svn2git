### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 150 "unigram.y"

procedure Keyword(x1,x2)
   static keywords
   initial {
      keywords := set(["allocated","clock","collections","column","current",
		       "date","now","dateline","digits","e","error",
		       "errornumber","errortext","errorvalue","errout","fail",
		       "eventcode","eventsource","eventvalue","features",
		       "file","host","input","lcase","letters","level",
		       "line","main","null","output","phi","pi","pick","pos",
		       "progname","random","regions","source","storage",
		       "subject","time","trace","dump","ucase","version",
		       "errno","window","col","row","x","y","interval",
		       "control","shift","meta","lpress","mpress","rpress",
		       "lrelease","mrelease","rrelease","ldrag","mdrag",
		       "rdrag","resize","ascii","cset"])
      }

   # verify that x2 is a valid keyword
   if not member(keywords, x2.s) then
      write(&errout, "&",x2.s," is not a valid keyword!")

   return node("keyword",x1,x2)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
initial { set_of_all_fields := set(); dummyrecno := 1 }

   if \iconc then {
      if type(x3) == "token" then {
	 insert(set_of_all_fields, x3.s)
#	 write(&errout, "field ", image(x3.s))
	 }
      }

   return node("field",x1,x2,x3)
end

procedure Clone1stToken(n)
   case type(n) of {
      "token": return copy(n)
      "treenode": {
	 return Clone1stToken(!n.children)
	 }
      }
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
   
   if *\parsingErrors > 0 then {
      every pe := !parsingErrors do {
	 write(&errout, pe.errorMessage)
	 }
      istop(*\parsingErrors || " error" ||
	    (if *\parsingErrors > 1 then "s" else ""))
      }

   if /x1 then istop("error: empty file")

   package_level_syms := set()
   package_level_class_syms := set()
   set_package_level_syms(x1)
   scopecheck_superclass_decs(x1)

   outline := 1
   outcol := 1
   #
   # export specifications for each class
   #
   native := set()
   every cl := classes.foreach_t() do {
      cl.WriteSpec()
      insert(native, cl)
      }
   #
   # import class specifications, transitively
   #
   repeat {
      added := 0
      every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
         if /classes.lookup(super) then {
	    added := 1
	    readspec(super)
	    cl := classes.lookup(super)
	    if /cl then halt("can't inherit class '",super,"'")
	    iwrite("  inherits ", super, " from ", cl.linkfile)
	    writelink(cl.dir, cl.linkfile)
            }
       }
    if added = 0 then break
  }
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
  every (classes.foreach_t()).transitive_closure()
  every (classes.foreach_t()).resolve()

  scopecheck_bodies(x1)

   if \thePackage then {
      every thePackage.insertsym(!package_level_syms)
      }

  if \iconc then  {
     iconc_prep_parse_tree(&null, x1)
     }

  #
  # generate output
  #
#  iwrite("Generating code:")
   yyprint(x1)
   write(yyout)

   if \iconc & (type(set_of_all_fields) == "set") &
	(*set_of_all_fields > 0) then {
	arandomfield := !set_of_all_fields
      writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
      delete(set_of_all_fields, arandomfield)
      every writes(yyout, ",", !set_of_all_fields)
      write(yyout, ")")
      dummyrecno +:= 1
      set_of_all_fields := set()
      }
end
#line 134 "unigram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define iconINITIAL 278
$define INITIALLY 279
$define INVOCABLE 280
$define LINK 281
$define LOCAL 282
$define METHOD 283
$define NEXT 284
$define NOT 285
$define OF 286
$define PACKAGE 287
$define PROCEDURE 288
$define RECORD 289
$define REPEAT 290
$define RETURN 291
$define STATIC 292
$define SUSPEND 293
$define THEN 294
$define THREAD 295
$define TO 296
$define UNTIL 297
$define WHILE 298
$define BANG 299
$define MOD 300
$define AUGMOD 301
$define AND 302
$define AUGAND 303
$define STAR 304
$define AUGSTAR 305
$define INTER 306
$define AUGINTER 307
$define PLUS 308
$define AUGPLUS 309
$define UNION 310
$define AUGUNION 311
$define MINUS 312
$define AUGMINUS 313
$define DIFF 314
$define AUGDIFF 315
$define DOT 316
$define SLASH 317
$define AUGSLASH 318
$define ASSIGN 319
$define SWAP 320
$define NMLT 321
$define AUGNMLT 322
$define REVASSIGN 323
$define REVSWAP 324
$define SLT 325
$define AUGSLT 326
$define SLE 327
$define AUGSLE 328
$define NMLE 329
$define AUGNMLE 330
$define NMEQ 331
$define AUGNMEQ 332
$define SEQ 333
$define AUGSEQ 334
$define EQUIV 335
$define AUGEQUIV 336
$define NMGT 337
$define AUGNMGT 338
$define NMGE 339
$define AUGNMGE 340
$define SGT 341
$define AUGSGT 342
$define SGE 343
$define AUGSGE 344
$define QMARK 345
$define AUGQMARK 346
$define AT 347
$define AUGAT 348
$define BACKSLASH 349
$define CARET 350
$define AUGCARET 351
$define BAR 352
$define CONCAT 353
$define AUGCONCAT 354
$define LCONCAT 355
$define AUGLCONCAT 356
$define TILDE 357
$define NMNE 358
$define AUGNMNE 359
$define SNE 360
$define AUGSNE 361
$define NEQUIV 362
$define AUGNEQUIV 363
$define LPAREN 364
$define RPAREN 365
$define PCOLON 366
$define COMMA 367
$define MCOLON 368
$define COLON 369
$define COLONCOLON 370
$define SEMICOL 371
$define LBRACK 372
$define RBRACK 373
$define LBRACE 374
$define RBRACE 375
$define DOLLAR 376
$define ABSTRACT 377
$define PMATCH 378
$define PAND 379
$define POR 380
$define PUNEVAL 381
$define PASSNONMATCH 382
$define PIMDASSN 383
$define PSETCUR 384
$define SND 385
$define SNDBK 386
$define RCV 387
$define RCVBK 388
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
    2,   11,   11,   11,   16,   16,   10,   10,   17,   20,
   20,   20,   22,   22,   19,   19,   19,   19,    9,   24,
   24,   25,   25,   25,    7,    8,    6,   28,   28,   27,
   27,   26,   26,    5,    3,   30,   30,    4,   23,   23,
   31,   32,   15,   15,   15,   21,   21,   21,   29,   29,
   35,   35,   35,   35,   37,   37,   37,   37,   33,   33,
   34,   34,   38,   38,   38,   38,   39,   41,   41,   41,
   18,   18,   12,   12,   12,   13,   13,   14,   14,   43,
   43,   42,   42,   44,   44,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   45,   45,
   46,   46,   46,   46,   47,   47,   47,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   49,   49,   49,   50,   50,   50,
   50,   50,   51,   51,   51,   51,   51,   52,   52,   52,
   54,   54,   54,   54,   53,   53,   53,   53,   53,   53,
   53,   53,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   61,
   61,   62,   62,   63,   63,   64,   58,   58,   58,   58,
   59,   59,   60,   67,   67,   69,   69,   65,   65,   68,
   68,   40,   40,   40,   40,   57,   70,   70,   70,   66,
   66,    0,    4,   42,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    8,    0,    1,    3,    7,    6,    0,
    3,    3,    3,    2,    0,    2,    2,    2,    2,    1,
    3,    1,    1,    3,    2,    2,    2,    1,    3,    1,
    3,    1,    1,    2,    5,    0,    1,    6,    6,    2,
    5,    5,    0,    1,    3,    0,    1,    3,    1,    3,
    1,    3,    3,    5,    1,    3,    3,    5,    1,    3,
    1,    3,    1,    3,    3,    5,    2,    0,    1,    1,
    0,    4,    0,    4,    4,    0,    3,    0,    3,    0,
    1,    1,    3,    1,    3,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
    1,    3,    5,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    3,    3,    1,    1,    3,
    2,    2,    2,    2,    1,    3,    3,    3,    3,    3,
    3,    3,    1,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    4,    1,
    1,    2,    3,    3,    3,    3,    4,    3,    4,    4,
    6,    6,    8,    8,    3,    1,    3,    2,    2,    2,
    4,    2,    4,    2,    4,    2,    1,    2,    2,    4,
    4,    6,    6,    1,    3,    3,    3,    1,    3,    1,
    3,    1,    1,    1,    1,    6,    1,    1,    1,    1,
    3,    3,    4,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    4,    5,    6,    7,    8,    9,
   10,   11,    0,    0,  282,    0,   59,    0,   42,   43,
   40,    0,   32,    0,    0,   30,   38,    0,   35,    0,
    0,    0,   81,    0,   83,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   17,    0,  284,    0,  272,  273,
  274,  275,    0,    0,    0,    0,    0,  257,    0,  231,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  226,    0,    0,    0,    0,
    0,    0,  246,   94,  213,    0,    0,    0,    0,    0,
  131,    0,    0,    0,    0,  163,    0,  169,  175,    0,
  214,  215,  216,  217,  218,  219,  220,  221,    0,    0,
    0,    0,   60,   41,   34,   31,   39,    0,    0,    0,
   69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  232,    0,    0,    0,    0,    0,  189,    0,
  258,    0,  259,    0,    0,    0,  194,  249,  248,  197,
  200,  196,  208,  202,  195,  193,  198,  203,  205,  207,
  209,  184,  211,  199,  190,  191,  192,  201,  204,  206,
  210,  268,    0,   24,    0,    0,    0,    0,  264,    0,
    0,  212,  185,  186,  187,  188,  283,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   21,   22,   79,   80,    0,    0,   71,    0,    0,   51,
    0,    0,   45,    0,    0,    0,   50,   28,   27,   16,
    0,   26,   83,   23,    0,    0,    0,    0,    0,    0,
    0,  233,    0,    0,    0,  236,    0,  235,    0,  234,
    0,   89,   95,  110,  127,  107,  108,  105,  104,  106,
  103,  109,   98,   97,  117,  100,   99,  124,  123,  116,
  112,  120,  113,  115,  114,  122,  121,  126,  128,  111,
  101,  102,  118,  125,  119,    0,    0,  134,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
    0,    0,    0,  136,    0,    0,    0,    0,    0,    0,
    0,    0,  167,  164,  165,  166,  182,  177,  176,  170,
  178,  179,  180,  181,  245,  247,    0,    0,    0,  238,
  270,    0,    0,    0,    0,    0,    0,    0,    0,   19,
    0,    0,   77,    0,   75,   70,   55,    0,    0,   82,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  269,    0,    0,    0,  265,  281,    0,  240,  278,
  279,  277,    0,  237,    0,  239,    0,    0,    0,   87,
   84,    0,    0,   85,   48,   72,   58,    0,   62,    0,
    0,    0,   83,   18,    0,    0,    0,  133,    0,  271,
    0,    0,    0,    0,   66,    0,   76,    0,   52,    0,
    0,    0,  263,    0,  276,    0,    0,  242,  241,    0,
   64,    0,    0,   49,    0,    0,   68,   83,   13,  244,
  243,    0,    0,   14,
  ]
  yydgoto := [                          2,
    3,   14,  157,   16,  158,   18,   19,   20,   21,   22,
  443,  139,  300,  112,  149,   43,   23,   56,  159,   47,
  305,  113,  160,   35,   36,   31,   32,   38,   28,  153,
   24,  161,  150,  306,  315,  114,  428,  151,  307,  115,
  308,  116,  202,  118,  119,  120,  121,  122,  123,  124,
  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
  135,  136,  137,  138,  203,  211,  208,  422,  209,  463,
  ]
  yysindex := [                      -171,
    0,    0,  108,  142,    0, -122,  -98,  127,  156,  127,
  127,  -85,  -60,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -145, -246,    0, -131,    0, -105,    0,    0,
    0,  -74,    0, -112,  -54,    0,    0,    4,    0,  -65,
   16,  114,    0,  586,    0, -237,   30,  150,  127,  162,
  156,  127,  157,  -98,    0, -219,    0,   72,    0,    0,
    0,    0,  586,  586,  586,  718,  586,    0,  586,    0,
  718,  586,  586,  586,  586,  586,  586,  718, -224,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  586,  180,  320,  586,    0,  718,  718,  718,  718,
  718,  177,    0,    0,    0,  149,   82,  111, 7851, -252,
    0,   -4, -331,  -10,  -58,    0, -110,    0,    0, -186,
    0,    0,    0,    0,    0,    0,    0,    0,  -77, -322,
 -131,   20,    0,    0,    0,    0,    0,   88,   93,  -53,
    0, -105,   97,  207,  208,  183, -216, -216,   96, -216,
   99,  211,    0,  -57,  149, -335, -234,  -50,    0,  149,
    0, -233,    0,  149, -221,  -90,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -281,    0,  104, -279, -316,  -35,    0,  103,
  100,    0,    0,    0,    0,    0,    0,  718,  586,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
  718,  -95,  586,  586,  453,  -70,  586,  207,  219,  586,
    0,    0,    0,    0,  116,  -52,    0,  157,   92,    0,
  157,  110,    0,  168,  -37,  124,    0,    0,    0,    0,
  213,    0,    0,    0,  120,  586,  586,  586,  586,  586,
  586,    0,  586,  586,  586,    0,  320,    0,  586,    0,
  111,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -252,  226,    0, -331, -331,
 -331, -331, -331, -331, -331, -331, -331, -331, -331,    0,
 -331, -331, -331,    0, -331, -331,  -10,  -10,  -58,  -58,
  -58,  -58,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   -2, -133, -191,    0,
    0, -120, -290,  136, -284,  -12,  186,   -7,  224,    0,
   20,  134,    0,  137,    0,    0,    0,  718,  251,    0,
  157, -111,  237,  -77,  320,  149,  149,  -92,  149,  149,
  149,    0,  149,  149, -279,    0,    0,  718,    0,    0,
    0,    0,  586,    0,  586,    0,  -62,  586,  586,    0,
    0,  718,  253,    0,    0,    0,    0,  132,    0,  193,
  154,  157,    0,    0,  586,  -14,  586,    0, -242,    0,
  151,  163,   60,   61,    0,  195,    0,  718,    0,  161,
  -77,  249,    0,  149,    0,  586,  586,    0,    0,  718,
    0,  158,  586,    0,   67,   68,    0,    0,    0,    0,
    0,  -77,  586,    0,
  ]
  yyrindex := [                       236,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -217,    0,    0,  164,    0,  -81,    0,    0,
    0,  369,    0, -235,  502,    0,    0,  635,    0,    0,
    0, -200,    0, -247,    0,    0,    0,    0,    0,    0,
    0,    0,  166,  170,    0, -201,    0,  837,    0,    0,
    0,    0, 6713,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 6713, 6713,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   71,    0,  -79,   -9,    0,    0, 6830, 6947, 7064,
 7181,    0,    0,    0,    0,  957,    0, 1077, 6476, 2397,
    0, 6357, 2517, 5277, 5397,    0, 6596,    0,    0, 6237,
    0,    0,    0,    0,    0,    0,    0,    0,  187,  164,
  164, -236,    0,    0,    0,    0,    0, -140,    0,  173,
    0,  176,    0,    0,    0,    0, -201, -201,  -18, -201,
    0,    0,    0,    0, 1197,    0, 2637,    0,    0, 1317,
    0, 2757,    0, 1437, 2877, 2997,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -76,    0,    0,    0,  155,
    0,    0,    0,    0,    0,    0,    0,    0, -247,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 7298, 7415, 7532,
 7649,    0,   71,  -79,  179,    0,    0,    0,    0, -247,
    0,    0,    0,    0,    0,  178,    0,    0,    0,    0,
    0,    0,    0,  -61, -217,    0,    0,    0,    0,    0,
  261,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -124,    0,    0,    0,    0,    0,   -9,    0,
 1557,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3117, 7763,    0, 3237, 3357,
 3477, 3597, 3717, 3837, 3957, 4077, 4197, 4317, 4437,    0,
 4557, 4677, 4797,    0, 4917, 5037, 5517, 5637, 5757, 5877,
 5997, 6117,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -76,    0,    0,
    0,    0,    0,    0,    0,    0,    5,    0,    0,    0,
  291,    0,    0,  -80,    0,    0,    0,    0,    0,    0,
  166,    0,    0,  187,    0, 1677, 1797, 5157, 1917, 2037,
 2157,    0,  -68,  -49,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -117,    0,    0,   71,   71,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -59,
    0,  166,    0,    0, -247,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    6,    0,    0,    0,    0,
  187,    0,    0, 2277,    0,   71,   71,    0,    0,    0,
    0,    0, -247,    0,    0,    0,    0,    0,    0,    0,
    0,  187, -247,    0,
  ]
  yygindex := [                         0,
  549,    0,  266,    0,  280,    0,    0,    0,    0,    0,
    0, -315, -318, -212, -406, -142,    0,    0,  241,  262,
    0,  506,    0,    0,  503,   28,    0,    0,  499,    0,
    0,  399,    0,    0,  258, -129,    0,  107,  129, -304,
    0,  -63,  -44,  344,  497,  311, -239,    0, 7962,  165,
  133,   -1,    0,    0,   56,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -101,  227,  122,    0,  228,    0,
  ]
$define YYTABLESIZE 8235
  yytable := [                        117,
  164,  165,  207,  167,  435,  168,  342,  444,  170,   44,
  172,  174,  175,  176,  377,  378,  321,  218,  163,  140,
   78,  274,  218,  275,   88,  467,   33,  390,  171,  173,
   33,  394,  178,  326,  481,  327,  329,   37,   39,   33,
  206,   33,  253,  254,   33,   33,   46,  162,  330,  179,
  333,   33,   33,   33,   15,    7,  336,   15,    7,  218,
  210,   15,  154,  155,   15,   15,  155,  218,  218,   13,
   25,   15,   13,  468,   16,  500,  144,   25,   16,  147,
  218,   16,   16,  332,    1,  333,  470,  429,   16,  335,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,  368,  369,  370,  371,  372,
  373,  374,  375,   90,   45,  485,  169,  255,   56,  292,
  505,   33,  103,  177,   26,  180,  181,  182,  183,  184,
  185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
  195,  196,  197,  198,  199,  200,  201,  156,   27,   15,
  156,  415,  212,  213,  214,  215,  216,  501,  218,   25,
   16,   40,  440,  497,  117,  333,   16,  293,  487,  331,
   44,  464,  513,  416,   44,  294,  423,  295,  284,  296,
   44,  417,  419,   44,  491,   44,   41,   44,   44,   44,
  297,   44,  522,  523,  298,   44,   44,   44,  424,  218,
   61,  218,   63,   61,  299,   63,  492,   61,  488,   63,
   61,   61,   63,   63,   73,   42,   73,   61,  325,   63,
  418,   73,  460,  425,  461,  462,  285,   46,  286,  287,
   90,  280,   90,  328,  218,  281,  465,  282,   90,   90,
  421,  218,  482,   15,  466,  117,   50,   90,  283,  483,
   15,   48,  446,  447,  448,  449,  450,  451,   15,   15,
  453,  454,  502,  455,  288,  289,  290,  291,  403,  404,
  405,  406,   17,   17,   74,  410,   74,   90,  452,   44,
   91,   74,   49,   90,  210,   44,   91,  276,   53,  277,
  519,  278,  266,  279,  266,   61,  266,   63,  479,   61,
  524,   63,   51,  311,  431,   61,  256,   63,  312,  432,
  257,  267,  258,  267,  259,  267,  260,  303,  261,  439,
  262,  304,  263,  320,  264,  337,  265,  338,  266,  407,
  408,  409,  495,  411,  412,  413,  414,  267,  434,   59,
   60,   61,   62,  268,  439,  269,  337,  270,  471,  473,
  503,   90,  459,  474,  333,   90,  493,  494,  511,    5,
   52,   65,   67,    6,  271,   65,   67,  272,  273,   54,
  517,  455,    7,   29,    8,   55,   30,    9,   10,   59,
   60,   61,   62,  142,   11,   12,   13,  318,  319,  489,
  322,  301,  302,   25,  515,  516,  143,    6,  399,  400,
  401,  402,   33,  148,  433,   34,    7,  436,    8,  145,
  490,    9,   10,  504,  508,  509,  333,  333,   11,   12,
   13,  520,  521,  333,  333,   90,  204,   90,  397,  398,
  117,  162,   86,   86,   86,   86,   86,   86,  217,   86,
  218,   86,  219,   86,   86,  220,  309,  310,   86,   86,
   86,  313,   86,  314,  316,  155,  320,  324,  117,  323,
   86,   86,  334,  339,  340,  427,   86,   86,  117,   86,
  430,   86,  437,   86,   86,   86,  438,  441,   86,  458,
   86,  442,   86,  445,   86,  475,   86,    2,   86,  469,
   86,    2,   86,   86,  472,  478,  477,  480,  484,  496,
    2,  498,    2,  510,  506,    2,    2,   86,  499,   86,
  514,   86,    2,    2,    2,  512,  507,   20,  518,  280,
   53,   86,   12,   86,   46,   86,   86,   54,   86,   86,
   47,   86,   57,   86,   86,   90,   86,   78,   86,    4,
   86,  141,  152,  146,  317,  426,   86,   86,   86,  476,
   86,  341,  166,  376,  456,  457,  486,   86,    0,    0,
   86,   86,   86,   86,   86,   57,   58,   59,   60,   61,
   62,    0,   63,    0,   64,    0,   65,   66,  205,    0,
    0,    0,   67,   68,    0,   69,    0,    0,    0,    0,
    0,    0,    0,   70,   71,    0,    0,    0,    0,   72,
   73,    0,   74,    0,   75,    0,   76,   77,   78,    0,
    0,   79,    0,   80,    0,   81,    0,   82,    0,   83,
   36,   84,    0,   85,   36,   86,   87,    0,    0,    0,
    0,    0,    0,   36,    0,   36,    0,    0,   36,   36,
   88,    0,   89,    0,   90,   36,   36,   36,    0,    0,
    0,    0,    0,    0,   91,    0,   92,    0,   93,   94,
    0,   95,   96,    0,   97,    0,   98,   99,    0,  100,
    0,  101,    0,  102,    0,    0,    0,    0,    0,  103,
    0,  104,    0,  105,    0,    0,    0,    0,    0,    0,
  106,    0,    0,  107,  108,  109,  110,  111,   57,   58,
   59,   60,   61,   62,    0,   63,    0,   64,    0,   65,
   66,    0,    0,    0,    0,   67,   68,    0,   69,    0,
    0,    0,    0,    0,    0,    0,   70,   71,    0,    0,
    0,    0,   72,   73,    0,   74,    0,   75,    0,   76,
   77,   78,    0,    0,   79,    0,   80,    0,   81,    0,
   82,    0,   83,   29,   84,    0,   85,   29,   86,   87,
    0,    0,    0,    0,    0,    0,   29,    0,   29,    0,
    0,   29,   29,   88,    0,   89,    0,   90,   29,   29,
   29,    0,    0,    0,    0,    0,    0,   91,    0,   92,
    0,   93,   94,    0,   95,   96,    0,   97,    0,   98,
   99,    0,  100,    0,  101,    0,  102,    0,    0,    0,
    0,    0,  103,    0,  104,    0,  105,  420,    0,    0,
    0,    0,    0,  106,    0,    0,  107,  108,  109,  110,
  111,   57,   58,   59,   60,   61,   62,    0,   63,    0,
   64,    0,   65,   66,    0,    0,    0,    0,   67,   68,
    0,   69,    0,    0,    0,    0,    0,    0,    0,   70,
   71,    0,    0,    0,    0,   72,   73,    0,   74,    0,
   75,    0,   76,   77,   78,    0,    0,   79,    0,   80,
    0,   81,    0,   82,    0,   83,   37,   84,    0,   85,
   37,   86,   87,    0,    0,    0,    0,    0,    0,   37,
    0,   37,    0,    0,   37,   37,   88,    0,   89,    0,
   90,   37,   37,   37,    0,    0,    0,    0,    0,    0,
   91,    0,   92,    0,   93,   94,    0,   95,   96,    0,
   97,    0,   98,   99,    0,  100,    0,  101,    0,  102,
    0,    0,    0,    0,    0,  103,    0,  104,    0,  105,
    0,    0,    0,    0,    0,    0,  106,    0,    0,  107,
  108,  109,  110,  111,   58,   59,   60,   61,   62,    0,
   63,    0,   64,    0,   65,   66,    0,    0,    0,    0,
   67,   68,    0,   69,    0,    0,    0,    0,    0,    0,
    0,   70,   71,    0,    0,    0,    0,   72,   73,    0,
   74,    0,   75,    0,   76,   77,   78,    0,    0,   79,
    0,   80,    0,   81,    0,   82,    0,   83,    0,   84,
    0,   85,    0,   86,   87,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   88,    0,
   89,    0,   90,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   91,    0,   92,    0,   93,   94,    0,   95,
   96,    0,   97,    0,   98,   99,    0,  100,    0,  101,
    0,  102,    0,    0,    0,    0,    0,  103,    0,  104,
    0,  105,    0,    0,    0,    0,    0,    0,  106,    0,
  230,  107,  108,  109,  110,  111,  230,  230,  230,    0,
    0,  230,    0,    0,    0,  230,    0,    0,  230,  230,
    0,    0,  230,    0,    0,  230,    0,    0,    0,    0,
  230,    0,  230,    0,    0,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,    0,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,    0,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,    0,  230,  230,
   91,  230,  230,  230,  230,    0,   91,   91,   91,    0,
    0,   91,    0,    0,    0,   91,    0,    0,   91,   91,
    0,    0,   91,    0,    0,   91,    0,    0,    0,    0,
   91,    0,   91,    0,    0,   91,   91,   91,    0,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,    0,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,    0,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,    0,   91,   91,
   92,   91,   91,   91,   91,    0,   92,   92,   92,    0,
    0,   92,    0,    0,    0,   92,    0,    0,   92,   92,
    0,    0,   92,    0,    0,   92,    0,    0,    0,    0,
   92,    0,   92,    0,    0,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,    0,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,    0,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,    0,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,    0,   92,   92,
  227,   92,   92,   92,   92,    0,  227,  227,  227,    0,
    0,  227,    0,    0,    0,  227,    0,    0,  227,  227,
    0,    0,  227,    0,    0,  227,    0,    0,    0,    0,
  227,    0,  227,    0,    0,  227,  227,  227,    0,  227,
  227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,    0,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  227,  227,    0,  227,  227,  227,
  227,  227,  227,  227,  227,  227,  227,    0,  227,  227,
  256,  227,  227,  227,  227,    0,  256,  256,  256,    0,
    0,  256,    0,    0,    0,  256,    0,    0,  256,  256,
    0,    0,  256,    0,    0,  256,    0,    0,    0,    0,
  256,    0,  256,    0,    0,  256,  256,  256,    0,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,    0,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,    0,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,    0,  256,  256,
  228,  256,  256,  256,  256,    0,  228,  228,  228,    0,
    0,  228,    0,    0,    0,  228,    0,    0,  228,  228,
    0,    0,  228,    0,    0,  228,    0,    0,    0,    0,
  228,    0,  228,    0,    0,  228,  228,  228,    0,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,    0,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,    0,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,    0,  228,  228,
   93,  228,  228,  228,  228,    0,   93,   93,   93,    0,
    0,   93,    0,    0,    0,   93,    0,    0,   93,   93,
    0,    0,   93,    0,    0,   93,    0,    0,    0,    0,
   93,    0,   93,    0,    0,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,    0,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,    0,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,    0,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,    0,   93,   93,
  229,   93,   93,   93,   93,    0,  229,  229,  229,    0,
    0,  229,    0,    0,    0,  229,    0,    0,  229,  229,
    0,    0,  229,    0,    0,  229,    0,    0,    0,    0,
  229,    0,  229,    0,    0,  229,  229,  229,    0,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,    0,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,    0,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,    0,  229,  229,
  255,  229,  229,  229,  229,    0,  255,  255,  255,    0,
    0,  255,    0,    0,    0,  255,    0,    0,  255,  255,
    0,    0,  255,    0,    0,  255,    0,    0,    0,    0,
  255,    0,  255,    0,    0,  255,  255,  255,    0,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
  255,  255,  255,    0,  255,  255,  255,  255,  255,  255,
  255,  255,  255,  255,  255,  255,    0,  255,  255,  255,
  255,  255,  255,  255,  255,  255,  255,    0,  255,  255,
  260,  255,  255,  255,  255,    0,  260,  260,  260,    0,
    0,  260,    0,    0,    0,  260,    0,    0,  260,  260,
    0,    0,  260,    0,    0,  260,    0,    0,    0,    0,
  260,    0,  260,    0,    0,  260,  260,  260,    0,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,    0,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,    0,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,    0,  260,  260,
  253,  260,  260,  260,  260,    0,  253,  253,  253,    0,
    0,  253,    0,    0,    0,  253,    0,    0,  253,  253,
    0,    0,  253,    0,    0,  253,    0,    0,    0,    0,
  253,    0,  253,    0,    0,  253,  253,  253,    0,  253,
  253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
  253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
  253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
  253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
  253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
  253,  253,  253,    0,  253,  253,  253,  253,  253,  253,
  253,  253,  253,  253,  253,  253,    0,  253,  253,  253,
  253,  253,  253,  253,  253,  253,  253,    0,  253,  253,
  251,  253,  253,  253,  253,    0,  251,  251,  251,    0,
    0,  251,    0,    0,    0,  251,    0,    0,  251,  251,
    0,    0,  251,    0,    0,  251,    0,    0,    0,    0,
  251,    0,  251,    0,    0,  251,  251,  251,    0,  251,
  251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
  251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
  251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
  251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
  251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
  251,  251,  251,    0,  251,  251,  251,  251,  251,  251,
  251,  251,  251,  251,  251,  251,    0,  251,  251,  251,
  251,  251,  251,  251,  251,  251,  251,    0,  251,  251,
  262,  251,  251,  251,  251,    0,  262,  262,  262,    0,
    0,  262,    0,    0,    0,  262,    0,    0,  262,  262,
    0,    0,  262,    0,    0,  262,    0,    0,    0,    0,
  262,    0,  262,    0,    0,  262,  262,  262,    0,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,    0,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,    0,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,    0,  262,  262,
  129,  262,  262,  262,  262,    0,  129,  129,  129,    0,
    0,  129,    0,    0,    0,  129,    0,    0,  129,  129,
    0,    0,  129,    0,    0,  129,    0,    0,    0,    0,
  129,    0,    0,    0,    0,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,    0,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,    0,  129,  129,  129,
  129,  129,  129,  129,  129,  129,    0,    0,  129,  129,
  138,  129,  129,  129,  129,    0,  138,  138,  138,    0,
    0,  138,    0,    0,    0,  138,    0,    0,  138,  138,
    0,    0,  138,    0,    0,  138,    0,    0,    0,    0,
  138,    0,  138,    0,    0,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,    0,
  138,    0,  138,    0,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,    0,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,    0,  138,  138,
  254,  138,  138,  138,  138,    0,    0,  254,  254,    0,
    0,  254,    0,    0,    0,  254,    0,    0,  254,  254,
    0,    0,  254,    0,    0,  254,    0,    0,    0,    0,
  254,    0,  254,    0,    0,  254,  254,  254,    0,  254,
  254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
  254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
  254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
  254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
  254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
  254,  254,  254,    0,  254,  254,  254,  254,  254,  254,
  254,  254,  254,  254,  254,  254,    0,  254,  254,  254,
  254,  254,  254,  254,  254,  254,  254,    0,  254,  254,
   91,  254,  254,  254,  254,    0,    0,   91,   91,    0,
    0,   91,    0,    0,    0,   91,    0,    0,   91,   91,
    0,    0,   91,    0,    0,   91,    0,    0,    0,    0,
   91,    0,   91,    0,    0,   91,   91,   91,    0,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,    0,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,    0,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,    0,   91,   91,
  252,   91,   91,   91,   91,    0,    0,  252,  252,    0,
    0,  252,    0,    0,    0,  252,    0,    0,  252,  252,
    0,    0,  252,    0,    0,  252,    0,    0,    0,    0,
  252,    0,  252,    0,    0,  252,  252,  252,    0,  252,
  252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
  252,  252,  252,    0,  252,  252,  252,  252,  252,  252,
  252,  252,  252,  252,  252,  252,    0,  252,  252,  252,
  252,  252,  252,  252,  252,  252,  252,    0,  252,  252,
  250,  252,  252,  252,  252,    0,    0,  250,  250,    0,
    0,  250,    0,    0,    0,  250,    0,    0,  250,  250,
    0,    0,  250,    0,    0,  250,    0,    0,    0,    0,
  250,    0,  250,    0,    0,  250,  250,  250,    0,  250,
  250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
  250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
  250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
  250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
  250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
  250,  250,  250,    0,  250,  250,  250,  250,  250,  250,
  250,  250,  250,  250,  250,  250,    0,  250,  250,  250,
  250,  250,  250,  250,  250,  250,  250,    0,  250,  250,
  130,  250,  250,  250,  250,    0,  130,  130,  130,    0,
    0,  130,    0,    0,    0,  130,    0,    0,  130,  130,
    0,    0,  130,    0,    0,  130,    0,    0,    0,    0,
  130,    0,    0,    0,    0,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,    0,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,    0,  130,  130,  130,
  130,  130,  130,  130,  130,  130,    0,    0,  130,  130,
  151,  130,  130,  130,  130,    0,  151,  151,  151,    0,
    0,  151,    0,    0,    0,  151,    0,    0,  151,  151,
    0,    0,  151,    0,    0,  151,    0,    0,    0,    0,
  151,    0,  151,    0,    0,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,    0,
  151,    0,  151,    0,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,    0,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,    0,  151,  151,
  145,  151,  151,  151,  151,    0,  145,  145,  145,    0,
    0,  145,    0,    0,    0,  145,    0,    0,  145,  145,
    0,    0,  145,    0,    0,  145,    0,    0,    0,    0,
  145,    0,  145,    0,    0,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,    0,
  145,    0,  145,    0,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,    0,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,    0,  145,  145,
  144,  145,  145,  145,  145,    0,  144,  144,  144,    0,
    0,  144,    0,    0,    0,  144,    0,    0,  144,  144,
    0,    0,  144,    0,    0,  144,    0,    0,    0,    0,
  144,    0,  144,    0,    0,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,    0,
  144,    0,  144,    0,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,    0,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,    0,  144,  144,
  150,  144,  144,  144,  144,    0,  150,  150,  150,    0,
    0,  150,    0,    0,    0,  150,    0,    0,  150,  150,
    0,    0,  150,    0,    0,  150,    0,    0,    0,    0,
  150,    0,  150,    0,    0,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,    0,
  150,    0,  150,    0,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,    0,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,    0,  150,  150,
  147,  150,  150,  150,  150,    0,  147,  147,  147,    0,
    0,  147,    0,    0,    0,  147,    0,    0,  147,  147,
    0,    0,  147,    0,    0,  147,    0,    0,    0,    0,
  147,    0,  147,    0,    0,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,    0,
  147,    0,  147,    0,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,    0,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,    0,  147,  147,
  141,  147,  147,  147,  147,    0,  141,  141,  141,    0,
    0,  141,    0,    0,    0,  141,    0,    0,  141,  141,
    0,    0,  141,    0,    0,  141,    0,    0,    0,    0,
  141,    0,  141,    0,    0,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,    0,
  141,    0,  141,    0,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,    0,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,    0,  141,  141,
  153,  141,  141,  141,  141,    0,  153,  153,  153,    0,
    0,  153,    0,    0,    0,  153,    0,    0,  153,  153,
    0,    0,  153,    0,    0,  153,    0,    0,    0,    0,
  153,    0,  153,    0,    0,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,    0,
  153,    0,  153,    0,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,    0,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,    0,  153,  153,
  149,  153,  153,  153,  153,    0,  149,  149,  149,    0,
    0,  149,    0,    0,    0,  149,    0,    0,  149,  149,
    0,    0,  149,    0,    0,  149,    0,    0,    0,    0,
  149,    0,  149,    0,    0,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,    0,
  149,    0,  149,    0,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,    0,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,    0,  149,  149,
  148,  149,  149,  149,  149,    0,  148,  148,  148,    0,
    0,  148,    0,    0,    0,  148,    0,    0,  148,  148,
    0,    0,  148,    0,    0,  148,    0,    0,    0,    0,
  148,    0,  148,    0,    0,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,    0,
  148,    0,  148,    0,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,    0,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,    0,  148,  148,
  143,  148,  148,  148,  148,    0,  143,  143,  143,    0,
    0,  143,    0,    0,    0,  143,    0,    0,  143,  143,
    0,    0,  143,    0,    0,  143,    0,    0,    0,    0,
  143,    0,  143,    0,    0,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,    0,
  143,    0,  143,    0,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,    0,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,    0,  143,  143,
  142,  143,  143,  143,  143,    0,  142,  142,  142,    0,
    0,  142,    0,    0,    0,  142,    0,    0,  142,  142,
    0,    0,  142,    0,    0,  142,    0,    0,    0,    0,
  142,    0,  142,    0,    0,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,    0,
  142,    0,  142,    0,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,    0,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,    0,  142,  142,
  152,  142,  142,  142,  142,    0,  152,  152,  152,    0,
    0,  152,    0,    0,    0,  152,    0,    0,  152,  152,
    0,    0,  152,    0,    0,  152,    0,    0,    0,    0,
  152,    0,  152,    0,    0,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,    0,
  152,    0,  152,    0,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,    0,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,    0,  152,  152,
  146,  152,  152,  152,  152,    0,  146,  146,  146,    0,
    0,  146,    0,    0,    0,  146,    0,    0,  146,  146,
    0,    0,  146,    0,    0,  146,    0,    0,    0,    0,
  146,    0,  146,    0,    0,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,    0,
  146,    0,  146,    0,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,    0,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,    0,  146,  146,
  154,  146,  146,  146,  146,    0,  154,  154,  154,    0,
    0,  154,    0,    0,    0,  154,    0,    0,  154,  154,
    0,    0,  154,    0,    0,  154,    0,    0,    0,    0,
  154,    0,  154,    0,    0,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,    0,
  154,    0,  154,    0,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,    0,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,    0,  154,  154,
  140,  154,  154,  154,  154,    0,  140,  140,  140,    0,
    0,  140,    0,    0,    0,  140,    0,    0,  140,  140,
    0,    0,  140,    0,    0,  140,    0,    0,    0,    0,
  140,    0,  140,    0,    0,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,    0,
  140,    0,  140,    0,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,    0,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,    0,  140,  140,
  139,  140,  140,  140,  140,    0,  139,  139,  139,    0,
    0,  139,    0,    0,    0,  139,    0,    0,  139,  139,
    0,    0,  139,    0,    0,  139,    0,    0,    0,    0,
  139,    0,  139,    0,    0,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,    0,
  139,    0,  139,    0,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,    0,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,    0,  139,  139,
  261,  139,  139,  139,  139,    0,  261,    0,  261,    0,
    0,  261,    0,    0,    0,  261,    0,    0,  261,  261,
    0,    0,  261,    0,    0,  261,    0,    0,    0,    0,
  261,    0,  261,    0,    0,  261,  261,  261,    0,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,    0,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,    0,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,    0,  261,  261,
  155,  261,  261,  261,  261,    0,  155,  155,  155,    0,
    0,  155,    0,    0,    0,  155,    0,    0,  155,  155,
    0,    0,  155,    0,    0,  155,    0,    0,    0,    0,
  155,    0,  155,    0,    0,  155,  155,  155,  155,  155,
  155,  155,  155,  155,    0,  155,    0,  155,    0,  155,
    0,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,    0,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,    0,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,    0,  155,  155,
  158,  155,  155,  155,  155,    0,  158,  158,  158,    0,
    0,  158,    0,    0,    0,  158,    0,    0,  158,  158,
    0,    0,  158,    0,    0,  158,    0,    0,    0,    0,
  158,    0,  158,    0,    0,  158,    0,  158,  158,  158,
    0,  158,    0,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,    0,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,    0,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,    0,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,    0,  158,  158,
  156,  158,  158,  158,  158,    0,  156,  156,  156,    0,
    0,  156,    0,    0,    0,  156,    0,    0,  156,  156,
    0,    0,  156,    0,    0,  156,    0,    0,    0,    0,
  156,    0,  156,    0,    0,  156,  156,  156,  156,  156,
  156,  156,  156,  156,    0,  156,    0,  156,    0,  156,
    0,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,    0,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,    0,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,    0,  156,  156,
  157,  156,  156,  156,  156,    0,  157,  157,  157,    0,
    0,  157,    0,    0,    0,  157,    0,    0,  157,  157,
    0,    0,  157,    0,    0,  157,    0,    0,    0,    0,
  157,    0,  157,    0,    0,  157,  157,  157,  157,  157,
  157,  157,  157,  157,    0,  157,    0,  157,    0,  157,
    0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,    0,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,    0,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,    0,  157,  157,
  159,  157,  157,  157,  157,    0,  159,  159,  159,    0,
    0,  159,    0,    0,    0,  159,    0,    0,  159,  159,
    0,    0,  159,    0,    0,  159,    0,    0,    0,    0,
  159,    0,  159,    0,    0,  159,    0,  159,  159,  159,
    0,  159,    0,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,    0,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,    0,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,    0,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,    0,  159,  159,
  161,  159,  159,  159,  159,    0,  161,  161,  161,    0,
    0,  161,    0,    0,    0,  161,    0,    0,  161,  161,
    0,    0,  161,    0,    0,  161,    0,    0,    0,    0,
  161,    0,  161,    0,    0,  161,    0,  161,  161,  161,
    0,  161,    0,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,    0,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,    0,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,    0,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,    0,  161,  161,
  162,  161,  161,  161,  161,    0,  162,  162,  162,    0,
    0,  162,    0,    0,    0,  162,    0,    0,  162,  162,
    0,    0,  162,    0,    0,  162,    0,    0,    0,    0,
  162,    0,  162,    0,    0,  162,    0,  162,  162,  162,
    0,  162,    0,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,    0,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,    0,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,    0,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,    0,  162,  162,
  160,  162,  162,  162,  162,    0,  160,  160,  160,    0,
    0,  160,    0,    0,    0,  160,    0,    0,  160,  160,
    0,    0,  160,    0,    0,  160,    0,    0,    0,    0,
  160,    0,  160,    0,    0,  160,    0,  160,  160,  160,
    0,  160,    0,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,    0,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,    0,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,    0,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,    0,  160,  160,
  183,  160,  160,  160,  160,    0,  183,  183,  183,    0,
    0,  183,    0,    0,    0,  183,    0,    0,  183,  183,
    0,    0,  183,    0,    0,  183,    0,    0,    0,    0,
  183,    0,  183,    0,    0,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,    0,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,    0,  183,  183,  183,  183,  183,  183,
    0,  183,  183,  183,  183,  183,    0,  183,    0,  183,
    0,  183,    0,  183,  183,  183,  183,    0,  183,  183,
  135,  183,  183,  183,  183,    0,  135,  135,  135,    0,
    0,  135,    0,    0,    0,  135,    0,    0,  135,  135,
    0,    0,  135,    0,    0,  135,    0,    0,    0,    0,
  135,    0,  135,    0,    0,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,    0,  135,  135,
  135,    0,  135,    0,  135,    0,  135,    0,  135,    0,
  135,    0,  135,    0,  135,    0,  135,    0,  135,    0,
  135,  135,  135,  135,  135,  135,  135,  135,    0,  135,
  135,  135,  135,    0,    0,  135,    0,  135,    0,  135,
  135,  135,  135,  135,  135,  135,    0,  135,  135,  135,
  135,  135,  135,  135,  135,    0,  135,    0,    0,   96,
    0,  135,  135,  135,  135,   96,   96,   96,    0,    0,
   96,    0,    0,    0,   96,    0,    0,   96,   96,    0,
    0,   96,    0,    0,   96,    0,    0,    0,    0,   96,
    0,   96,    0,    0,   96,   96,    0,   96,    0,   96,
    0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
    0,   96,   96,    0,    0,    0,   96,    0,    0,    0,
   96,    0,   96,    0,   96,    0,   96,    0,   96,    0,
   96,    0,   96,    0,   96,    0,   96,    0,   96,    0,
   96,    0,   96,    0,   96,   96,    0,   96,   96,    0,
   96,    0,    0,   96,    0,   96,    0,   96,    0,   96,
   96,   96,   96,   96,   96,    0,   96,   96,   96,   96,
   96,   96,   96,    0,   96,   96,    0,   96,   96,  168,
   96,   96,   96,   96,    0,  168,  168,  168,    0,    0,
  168,    0,    0,    0,  168,    0,    0,  168,  168,    0,
    0,  168,    0,    0,  168,    0,    0,    0,    0,  168,
    0,  168,    0,    0,    0,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,    0,  168,    0,    0,  168,  168,  168,  168,
  168,  168,    0,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,    0,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,   90,  168,  168,    0,
    0,    0,   90,   90,   90,    0,    0,   90,    0,    0,
    0,   90,    0,    0,   90,   90,    0,    0,   90,    0,
    0,   90,    0,    0,    0,    0,   90,    0,   90,    0,
    0,    0,   90,   90,    0,   90,    0,   90,    0,   90,
    0,   90,    0,   90,    0,   90,    0,   90,    0,    0,
   90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
   90,   90,   90,    0,   90,    0,   90,    0,   90,   90,
   90,   90,   90,   90,   90,   90,   90,    0,   90,    0,
   90,    0,    0,   90,    0,    0,   90,    0,   90,    0,
    0,   90,    0,   90,    0,   90,    0,   90,   90,   90,
   90,   90,    0,   90,    0,   90,    0,   90,   90,   90,
   90,   90,   90,  222,   90,   90,    0,    0,    0,  222,
  222,  222,    0,    0,  222,    0,    0,    0,  222,    0,
    0,  222,  222,    0,    0,  222,    0,    0,  222,    0,
    0,    0,    0,  222,    0,  222,    0,    0,    0,  222,
  222,    0,  222,    0,  222,    0,  222,    0,  222,    0,
  222,    0,  222,    0,  222,    0,    0,  222,  222,  222,
  222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
    0,  222,    0,  222,    0,  222,  222,  222,  222,  222,
  222,  222,  222,  222,    0,  222,    0,  222,    0,    0,
  222,    0,    0,  222,    0,  222,    0,    0,  222,    0,
  222,    0,  222,    0,  222,  222,  222,  222,  222,    0,
  222,    0,  222,    0,  222,  222,  222,  222,  222,  222,
  223,  222,  222,    0,    0,    0,  223,  223,  223,    0,
    0,  223,    0,    0,    0,  223,    0,    0,  223,  223,
    0,    0,  223,    0,    0,  223,    0,    0,    0,    0,
  223,    0,  223,    0,    0,    0,  223,  223,    0,  223,
    0,  223,    0,  223,    0,  223,    0,  223,    0,  223,
    0,  223,    0,    0,  223,  223,  223,  223,  223,  223,
  223,  223,  223,  223,  223,  223,  223,    0,  223,    0,
  223,    0,  223,  223,  223,  223,  223,  223,  223,  223,
  223,    0,  223,    0,  223,    0,    0,  223,    0,    0,
  223,    0,  223,    0,    0,  223,    0,  223,    0,  223,
    0,  223,  223,  223,  223,  223,    0,  223,    0,  223,
    0,  223,  223,  223,  223,  223,  223,  224,  223,  223,
    0,    0,    0,  224,  224,  224,    0,    0,  224,    0,
    0,    0,  224,    0,    0,  224,  224,    0,    0,  224,
    0,    0,  224,    0,    0,    0,    0,  224,    0,  224,
    0,    0,    0,  224,  224,    0,  224,    0,  224,    0,
  224,    0,  224,    0,  224,    0,  224,    0,  224,    0,
    0,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  224,  224,  224,    0,  224,    0,  224,    0,  224,
  224,  224,  224,  224,  224,  224,  224,  224,    0,  224,
    0,  224,    0,    0,  224,    0,    0,  224,    0,  224,
    0,    0,  224,    0,  224,    0,  224,    0,  224,  224,
  224,  224,  224,    0,  224,    0,  224,    0,  224,  224,
  224,  224,  224,  224,  225,  224,  224,    0,    0,    0,
  225,  225,  225,    0,    0,  225,    0,    0,    0,  225,
    0,    0,  225,  225,    0,    0,  225,    0,    0,  225,
    0,    0,    0,    0,  225,    0,  225,    0,    0,    0,
  225,  225,    0,  225,    0,  225,    0,  225,    0,  225,
    0,  225,    0,  225,    0,  225,    0,    0,  225,  225,
  225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
  225,    0,  225,    0,  225,    0,  225,  225,  225,  225,
  225,  225,  225,  225,  225,    0,  225,    0,  225,    0,
    0,  225,    0,    0,  225,    0,  225,    0,    0,  225,
    0,  225,    0,  225,    0,  225,  225,  225,  225,  225,
    0,  225,    0,  225,    0,  225,  225,  225,  225,  225,
  225,  171,  225,  225,    0,    0,    0,  171,  171,  171,
    0,    0,  171,    0,    0,    0,  171,    0,    0,  171,
  171,    0,    0,  171,    0,    0,  171,    0,    0,    0,
    0,  171,    0,  171,    0,    0,    0,  171,  171,    0,
  171,    0,  171,    0,  171,    0,  171,    0,  171,    0,
  171,    0,  171,    0,    0,  171,  171,  171,  171,  171,
  171,  171,  171,  171,  171,  171,  171,  171,    0,  171,
    0,  171,    0,  171,  171,  171,  171,  171,  171,  171,
  171,  171,    0,  171,    0,  171,    0,    0,  171,    0,
    0,  171,    0,  171,    0,    0,  171,    0,  171,    0,
  171,    0,  171,  171,  171,  171,  171,    0,  171,    0,
  171,    0,  171,  171,  171,  171,  171,  171,  172,  171,
  171,    0,    0,    0,  172,  172,  172,    0,    0,  172,
    0,    0,    0,  172,    0,    0,  172,  172,    0,    0,
  172,    0,    0,  172,    0,    0,    0,    0,  172,    0,
  172,    0,    0,    0,  172,  172,    0,  172,    0,  172,
    0,  172,    0,  172,    0,  172,    0,  172,    0,  172,
    0,    0,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,    0,  172,    0,  172,    0,
  172,  172,  172,  172,  172,  172,  172,  172,  172,    0,
  172,    0,  172,    0,    0,  172,    0,    0,  172,    0,
  172,    0,    0,  172,    0,  172,    0,  172,    0,  172,
  172,  172,  172,  172,    0,  172,    0,  172,    0,  172,
  172,  172,  172,  172,  172,  173,  172,  172,    0,    0,
    0,  173,  173,  173,    0,    0,  173,    0,    0,    0,
  173,    0,    0,  173,  173,    0,    0,  173,    0,    0,
  173,    0,    0,    0,    0,  173,    0,  173,    0,    0,
    0,  173,  173,    0,  173,    0,  173,    0,  173,    0,
  173,    0,  173,    0,  173,    0,  173,    0,    0,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  173,    0,  173,    0,  173,    0,  173,  173,  173,
  173,  173,  173,  173,  173,  173,    0,  173,    0,  173,
    0,    0,  173,    0,    0,  173,    0,  173,    0,    0,
  173,    0,  173,    0,  173,    0,  173,  173,  173,  173,
  173,    0,  173,    0,  173,    0,  173,  173,  173,  173,
  173,  173,  174,  173,  173,    0,    0,    0,  174,  174,
  174,    0,    0,  174,    0,    0,    0,  174,    0,    0,
  174,  174,    0,    0,  174,    0,    0,  174,    0,    0,
    0,    0,  174,    0,  174,    0,    0,    0,  174,  174,
    0,  174,    0,  174,    0,  174,    0,  174,    0,  174,
    0,  174,    0,  174,    0,    0,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,    0,
  174,    0,  174,    0,  174,  174,  174,  174,  174,  174,
  174,  174,  174,    0,  174,    0,  174,    0,    0,  174,
    0,    0,  174,    0,  174,    0,    0,  174,    0,  174,
    0,  174,    0,  174,  174,  174,  174,  174,    0,  174,
    0,  174,    0,  174,  174,  174,  174,  174,  174,    0,
  174,  174,  132,  132,  132,    0,    0,  132,    0,    0,
    0,  132,    0,    0,  132,  132,    0,    0,  132,    0,
    0,  132,    0,    0,    0,    0,  132,    0,  132,    0,
    0,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,    0,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,    0,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,    0,  132,  132,    0,  132,  132,  132,
  132,  221,    0,  222,    0,  223,    0,  224,    0,  225,
    0,  226,    0,  227,    0,  228,    0,    0,  229,  230,
  231,    0,  232,  233,  234,    0,  235,    0,  236,    0,
  237,    0,  238,    0,  239,    0,  240,    0,  241,    0,
  242,    0,  243,    0,  244,    0,  245,    0,  246,    0,
    0,  247,    0,    0,  248,    0,  249,    0,    0,  250,
    0,  251,    0,  252,    0,    0,    0,  379,  380,  381,
  382,  383,  384,  385,  386,  387,  388,  389,  253,  391,
  392,  393,    0,  395,  396,
  ]
  yycheck := [                         44,
   64,   65,  104,   67,  309,   69,  219,  323,   72,  256,
   74,   75,   76,   77,  254,  255,  159,  302,   63,  257,
  257,  353,  302,  355,  272,  316,  262,  267,   73,   74,
  266,  271,  257,  369,  441,  270,  270,   10,   11,  275,
  104,  277,  378,  296,  280,  281,  369,  370,  270,  274,
  367,  287,  288,  289,  272,  275,  373,  275,  275,  302,
  105,  279,  282,  283,  282,  283,  283,  302,  302,  289,
  272,  289,  289,  364,  275,  482,   49,  279,  279,   52,
  302,  282,  283,  365,  256,  367,  371,  300,  289,  369,
  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
  250,  251,  252,  371,  371,  444,   71,  380,  365,  316,
  373,  367,  370,   78,  257,   80,   81,   82,   83,   84,
   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
   95,   96,   97,   98,   99,  100,  101,  377,  257,  377,
  377,  257,  107,  108,  109,  110,  111,  483,  302,  371,
  371,  257,  315,  478,  219,  367,  377,  364,  271,  270,
  262,  373,  501,  279,  266,  372,  257,  374,  299,  376,
  272,  293,  294,  275,  257,  277,  257,  279,  280,  281,
  278,  283,  518,  522,  282,  287,  288,  289,  279,  302,
  272,  302,  272,  275,  292,  275,  279,  279,  458,  279,
  282,  283,  282,  283,  365,  371,  367,  289,  286,  289,
  294,  372,  366,  297,  368,  369,  347,  369,  349,  350,
  365,  300,  367,  294,  302,  304,  367,  306,  373,  367,
  295,  302,  364,  272,  375,  300,  369,  375,  317,  371,
  279,  367,  326,  327,  328,  329,  330,  331,    3,    4,
  334,  335,  485,  337,  385,  386,  387,  388,  280,  281,
  282,  283,    3,    4,  365,  287,  367,  367,  333,  371,
  367,  372,  367,  373,  339,  377,  373,  308,  364,  310,
  513,  312,  371,  314,  373,  367,  375,  367,  438,  371,
  523,  371,  367,  367,  367,  377,  321,  377,  372,  372,
  325,  371,  327,  373,  329,  375,  331,  308,  333,  367,
  335,  312,  337,  371,  339,  371,  341,  373,  343,  284,
  285,  286,  472,  288,  289,  290,  291,  352,  257,  258,
  259,  260,  261,  358,  367,  360,  371,  362,  371,  367,
  375,  371,  365,  371,  367,  375,  468,  469,  498,  262,
  367,  367,  367,  266,  379,  371,  371,  382,  383,  364,
  510,  445,  275,  257,  277,  272,  260,  280,  281,  258,
  259,  260,  261,  364,  287,  288,  289,  157,  158,  463,
  160,  140,  141,  262,  506,  507,  257,  266,  276,  277,
  278,  279,  257,  257,  308,  260,  275,  311,  277,  258,
  465,  280,  281,  487,  365,  365,  367,  367,  287,  288,
  289,  365,  365,  367,  367,  365,  257,  367,  274,  275,
  485,  370,  256,  257,  258,  259,  260,  261,  272,  263,
  302,  265,  371,  267,  268,  345,  369,  365,  272,  273,
  274,  365,  276,  257,  257,  283,  371,  257,  513,  371,
  284,  285,  369,  371,  375,  257,  290,  291,  523,  293,
  365,  295,  373,  297,  298,  299,  319,  364,  302,  264,
  304,  279,  306,  374,  308,  272,  310,  262,  312,  364,
  314,  266,  316,  317,  319,  369,  373,  257,  272,  257,
  275,  319,  277,  319,  364,  280,  281,  331,  365,  333,
  272,  335,  287,  288,  289,  365,  364,  364,  371,  375,
  365,  345,  272,  347,  365,  349,  350,  365,  352,  353,
  365,  355,  365,  357,  358,  367,  360,  257,  362,    1,
  364,   46,   54,   51,  156,  298,  370,  371,  372,  431,
  374,  218,   66,  253,  337,  339,  445,  381,   -1,   -1,
  384,  385,  386,  387,  388,  256,  257,  258,  259,  260,
  261,   -1,  263,   -1,  265,   -1,  267,  268,  269,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,  290,
  291,   -1,  293,   -1,  295,   -1,  297,  298,  299,   -1,
   -1,  302,   -1,  304,   -1,  306,   -1,  308,   -1,  310,
  262,  312,   -1,  314,  266,  316,  317,   -1,   -1,   -1,
   -1,   -1,   -1,  275,   -1,  277,   -1,   -1,  280,  281,
  331,   -1,  333,   -1,  335,  287,  288,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  345,   -1,  347,   -1,  349,  350,
   -1,  352,  353,   -1,  355,   -1,  357,  358,   -1,  360,
   -1,  362,   -1,  364,   -1,   -1,   -1,   -1,   -1,  370,
   -1,  372,   -1,  374,   -1,   -1,   -1,   -1,   -1,   -1,
  381,   -1,   -1,  384,  385,  386,  387,  388,  256,  257,
  258,  259,  260,  261,   -1,  263,   -1,  265,   -1,  267,
  268,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,
   -1,   -1,  290,  291,   -1,  293,   -1,  295,   -1,  297,
  298,  299,   -1,   -1,  302,   -1,  304,   -1,  306,   -1,
  308,   -1,  310,  262,  312,   -1,  314,  266,  316,  317,
   -1,   -1,   -1,   -1,   -1,   -1,  275,   -1,  277,   -1,
   -1,  280,  281,  331,   -1,  333,   -1,  335,  287,  288,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  345,   -1,  347,
   -1,  349,  350,   -1,  352,  353,   -1,  355,   -1,  357,
  358,   -1,  360,   -1,  362,   -1,  364,   -1,   -1,   -1,
   -1,   -1,  370,   -1,  372,   -1,  374,  375,   -1,   -1,
   -1,   -1,   -1,  381,   -1,   -1,  384,  385,  386,  387,
  388,  256,  257,  258,  259,  260,  261,   -1,  263,   -1,
  265,   -1,  267,  268,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,   -1,  290,  291,   -1,  293,   -1,
  295,   -1,  297,  298,  299,   -1,   -1,  302,   -1,  304,
   -1,  306,   -1,  308,   -1,  310,  262,  312,   -1,  314,
  266,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,  275,
   -1,  277,   -1,   -1,  280,  281,  331,   -1,  333,   -1,
  335,  287,  288,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  345,   -1,  347,   -1,  349,  350,   -1,  352,  353,   -1,
  355,   -1,  357,  358,   -1,  360,   -1,  362,   -1,  364,
   -1,   -1,   -1,   -1,   -1,  370,   -1,  372,   -1,  374,
   -1,   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,  384,
  385,  386,  387,  388,  257,  258,  259,  260,  261,   -1,
  263,   -1,  265,   -1,  267,  268,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,   -1,  290,  291,   -1,
  293,   -1,  295,   -1,  297,  298,  299,   -1,   -1,  302,
   -1,  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,
   -1,  314,   -1,  316,  317,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  331,   -1,
  333,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  345,   -1,  347,   -1,  349,  350,   -1,  352,
  353,   -1,  355,   -1,  357,  358,   -1,  360,   -1,  362,
   -1,  364,   -1,   -1,   -1,   -1,   -1,  370,   -1,  372,
   -1,  374,   -1,   -1,   -1,   -1,   -1,   -1,  381,   -1,
  264,  384,  385,  386,  387,  388,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,   -1,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,   -1,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,  373,
   -1,  375,   -1,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,   -1,  322,  323,
  324,   -1,  326,   -1,  328,   -1,  330,   -1,  332,   -1,
  334,   -1,  336,   -1,  338,   -1,  340,   -1,  342,   -1,
  344,  345,  346,  347,  348,  349,  350,  351,   -1,  353,
  354,  355,  356,   -1,   -1,  359,   -1,  361,   -1,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,   -1,  380,   -1,   -1,  264,
   -1,  385,  386,  387,  388,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,
   -1,  296,   -1,   -1,  299,  300,   -1,  302,   -1,  304,
   -1,  306,   -1,  308,   -1,  310,   -1,  312,   -1,  314,
   -1,  316,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
  325,   -1,  327,   -1,  329,   -1,  331,   -1,  333,   -1,
  335,   -1,  337,   -1,  339,   -1,  341,   -1,  343,   -1,
  345,   -1,  347,   -1,  349,  350,   -1,  352,  353,   -1,
  355,   -1,   -1,  358,   -1,  360,   -1,  362,   -1,  364,
  365,  366,  367,  368,  369,   -1,  371,  372,  373,  374,
  375,  376,  377,   -1,  379,  380,   -1,  382,  383,  264,
  385,  386,  387,  388,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,
   -1,  296,   -1,   -1,   -1,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,   -1,  348,   -1,   -1,  351,  352,  353,  354,
  355,  356,   -1,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  368,  369,   -1,  371,  372,  373,  374,
  375,  376,  377,  378,  379,  380,  264,  382,  383,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,
   -1,   -1,  300,  301,   -1,  303,   -1,  305,   -1,  307,
   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,   -1,  332,   -1,  334,   -1,  336,  337,
  338,  339,  340,  341,  342,  343,  344,   -1,  346,   -1,
  348,   -1,   -1,  351,   -1,   -1,  354,   -1,  356,   -1,
   -1,  359,   -1,  361,   -1,  363,   -1,  365,  366,  367,
  368,  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,
  378,  379,  380,  264,  382,  383,   -1,   -1,   -1,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,  300,
  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,
  311,   -1,  313,   -1,  315,   -1,   -1,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,  340,
  341,  342,  343,  344,   -1,  346,   -1,  348,   -1,   -1,
  351,   -1,   -1,  354,   -1,  356,   -1,   -1,  359,   -1,
  361,   -1,  363,   -1,  365,  366,  367,  368,  369,   -1,
  371,   -1,  373,   -1,  375,  376,  377,  378,  379,  380,
  264,  382,  383,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,   -1,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,   -1,  332,   -1,
  334,   -1,  336,  337,  338,  339,  340,  341,  342,  343,
  344,   -1,  346,   -1,  348,   -1,   -1,  351,   -1,   -1,
  354,   -1,  356,   -1,   -1,  359,   -1,  361,   -1,  363,
   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,  373,
   -1,  375,  376,  377,  378,  379,  380,  264,  382,  383,
   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,
   -1,   -1,   -1,  300,  301,   -1,  303,   -1,  305,   -1,
  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,
   -1,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,   -1,  332,   -1,  334,   -1,  336,
  337,  338,  339,  340,  341,  342,  343,  344,   -1,  346,
   -1,  348,   -1,   -1,  351,   -1,   -1,  354,   -1,  356,
   -1,   -1,  359,   -1,  361,   -1,  363,   -1,  365,  366,
  367,  368,  369,   -1,  371,   -1,  373,   -1,  375,  376,
  377,  378,  379,  380,  264,  382,  383,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,
  300,  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,   -1,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
  340,  341,  342,  343,  344,   -1,  346,   -1,  348,   -1,
   -1,  351,   -1,   -1,  354,   -1,  356,   -1,   -1,  359,
   -1,  361,   -1,  363,   -1,  365,  366,  367,  368,  369,
   -1,  371,   -1,  373,   -1,  375,  376,  377,  378,  379,
  380,  264,  382,  383,   -1,   -1,   -1,  270,  271,  272,
   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,
  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,  294,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,
  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,   -1,   -1,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,   -1,  332,
   -1,  334,   -1,  336,  337,  338,  339,  340,  341,  342,
  343,  344,   -1,  346,   -1,  348,   -1,   -1,  351,   -1,
   -1,  354,   -1,  356,   -1,   -1,  359,   -1,  361,   -1,
  363,   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,
  373,   -1,  375,  376,  377,  378,  379,  380,  264,  382,
  383,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,   -1,  300,  301,   -1,  303,   -1,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,
   -1,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,   -1,  332,   -1,  334,   -1,
  336,  337,  338,  339,  340,  341,  342,  343,  344,   -1,
  346,   -1,  348,   -1,   -1,  351,   -1,   -1,  354,   -1,
  356,   -1,   -1,  359,   -1,  361,   -1,  363,   -1,  365,
  366,  367,  368,  369,   -1,  371,   -1,  373,   -1,  375,
  376,  377,  378,  379,  380,  264,  382,  383,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
   -1,  300,  301,   -1,  303,   -1,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,   -1,  315,   -1,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,   -1,  332,   -1,  334,   -1,  336,  337,  338,
  339,  340,  341,  342,  343,  344,   -1,  346,   -1,  348,
   -1,   -1,  351,   -1,   -1,  354,   -1,  356,   -1,   -1,
  359,   -1,  361,   -1,  363,   -1,  365,  366,  367,  368,
  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,  378,
  379,  380,  264,  382,  383,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,  300,  301,
   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,
   -1,  313,   -1,  315,   -1,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,   -1,
  332,   -1,  334,   -1,  336,  337,  338,  339,  340,  341,
  342,  343,  344,   -1,  346,   -1,  348,   -1,   -1,  351,
   -1,   -1,  354,   -1,  356,   -1,   -1,  359,   -1,  361,
   -1,  363,   -1,  365,  366,  367,  368,  369,   -1,  371,
   -1,  373,   -1,  375,  376,  377,  378,  379,  380,   -1,
  382,  383,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,
   -1,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,  369,   -1,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  380,   -1,  382,  383,   -1,  385,  386,  387,
  388,  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,   -1,   -1,  318,  319,
  320,   -1,  322,  323,  324,   -1,  326,   -1,  328,   -1,
  330,   -1,  332,   -1,  334,   -1,  336,   -1,  338,   -1,
  340,   -1,  342,   -1,  344,   -1,  346,   -1,  348,   -1,
   -1,  351,   -1,   -1,  354,   -1,  356,   -1,   -1,  359,
   -1,  361,   -1,  363,   -1,   -1,   -1,  256,  257,  258,
  259,  260,  261,  262,  263,  264,  265,  266,  378,  268,
  269,  270,   -1,  272,  273,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 388
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","CRITICAL",
"DEFAULT","DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","INVOCABLE","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"PROCEDURE","RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","THREAD","TO",
"UNTIL","WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","SWAP","NMLT","AUGNMLT","REVASSIGN",
"REVSWAP","SLT","AUGSLT","SLE","AUGSLE","NMLE","AUGNMLE","NMEQ","AUGNMEQ","SEQ",
"AUGSEQ","EQUIV","AUGEQUIV","NMGT","AUGNMGT","NMGE","AUGNMGE","SGT","AUGSGT",
"SGE","AUGSGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET",
"BAR","CONCAT","AUGCONCAT","LCONCAT","AUGLCONCAT","TILDE","NMNE","AUGNMNE",
"SNE","AUGSNE","NEQUIV","AUGNEQUIV","LPAREN","RPAREN","PCOLON","COMMA","MCOLON",
"COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR",
"ABSTRACT","PMATCH","PAND","POR","PUNEVAL","PASSNONMATCH","PIMDASSN","PSETCUR",
"SND","SNDBK","RCV","RCVBK",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : proc",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : invocable",
"decl : cl",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial procbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial procbody",
"optsemi :",
"optsemi : SEMICOL",
"cl : classhead SEMICOL END",
"cl : classhead optsemi clocals methods optsemi initiallysection END",
"classhead : CLASS IDENT supers LPAREN carglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON IDENT",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"invocable : INVOCABLE invoclist",
"invoclist : invocop",
"invoclist : invoclist COMMA invocop",
"invocop : IDENT",
"invocop : STRINGLIT",
"invocop : STRINGLIT COLON INTLIT",
"package : PACKAGE lnkfile",
"import : IMPORT implist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"implist : lnkfile",
"implist : implist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"fldlist :",
"fldlist : idlist",
"proc : prochead SEMICOL locals initial procbody END",
"meth : methhead SEMICOL locals initial procbody END",
"meth : ABSTRACT methhead",
"prochead : PROCEDURE IDENT LPAREN arglist RPAREN",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"carglist :",
"carglist : cparmlist",
"carglist : cparmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"varlist : IDENT",
"varlist : IDENT ASSIGN expr1",
"varlist : varlist COMMA IDENT",
"varlist : varlist COMMA IDENT ASSIGN expr1",
"stalist : IDENT",
"stalist : IDENT ASSIGN expr1",
"stalist : stalist COMMA IDENT",
"stalist : stalist COMMA IDENT ASSIGN expr1",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"cparmlist : carg",
"cparmlist : cparmlist COMMA carg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"carg : priv arg",
"priv :",
"priv : PLUS",
"priv : MINUS",
"clocals :",
"clocals : clocals LOCAL varlist optsemi",
"locals :",
"locals : locals LOCAL varlist SEMICOL",
"locals : locals STATIC stalist SEMICOL",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"procbody :",
"procbody : nexpr SEMICOL procbody",
"nexpr :",
"nexpr : expr",
"expr : expr1a",
"expr : expr AND expr1a",
"expr1a : expr1",
"expr1a : expr1a QMARK expr1",
"expr1 : expr2a",
"expr1 : expr2a SWAP expr1",
"expr1 : expr2a ASSIGN expr1",
"expr1 : expr2a REVSWAP expr1",
"expr1 : expr2a REVASSIGN expr1",
"expr1 : expr2a AUGCONCAT expr1",
"expr1 : expr2a AUGLCONCAT expr1",
"expr1 : expr2a AUGDIFF expr1",
"expr1 : expr2a AUGUNION expr1",
"expr1 : expr2a AUGPLUS expr1",
"expr1 : expr2a AUGMINUS expr1",
"expr1 : expr2a AUGSTAR expr1",
"expr1 : expr2a AUGINTER expr1",
"expr1 : expr2a AUGSLASH expr1",
"expr1 : expr2a AUGMOD expr1",
"expr1 : expr2a AUGCARET expr1",
"expr1 : expr2a AUGNMEQ expr1",
"expr1 : expr2a AUGEQUIV expr1",
"expr1 : expr2a AUGNMGE expr1",
"expr1 : expr2a AUGNMGT expr1",
"expr1 : expr2a AUGNMLE expr1",
"expr1 : expr2a AUGNMLT expr1",
"expr1 : expr2a AUGNMNE expr1",
"expr1 : expr2a AUGNEQUIV expr1",
"expr1 : expr2a AUGSEQ expr1",
"expr1 : expr2a AUGSGE expr1",
"expr1 : expr2a AUGSGT expr1",
"expr1 : expr2a AUGSLE expr1",
"expr1 : expr2a AUGSLT expr1",
"expr1 : expr2a AUGSNE expr1",
"expr1 : expr2a AUGQMARK expr1",
"expr1 : expr2a AUGAND expr1",
"expr1 : expr2a AUGAT expr1",
"expr2a : expr2",
"expr2a : expr2a PMATCH expr2",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr2 : expr2 POR expr3",
"expr3 : expr4",
"expr3 : expr4 PAND expr3",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 PIMDASSN expr5",
"expr4 : expr4 PASSNONMATCH expr5",
"expr4 : expr4 SEQ expr5",
"expr4 : expr4 SGE expr5",
"expr4 : expr4 SGT expr5",
"expr4 : expr4 SLE expr5",
"expr4 : expr4 SLT expr5",
"expr4 : expr4 SNE expr5",
"expr4 : expr4 NMEQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr4 : expr4 EQUIV expr5",
"expr4 : expr4 NEQUIV expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr5 : expr5 LCONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : postfixthreadop",
"expr8 : expr9 CARET expr8",
"postfixthreadop : expr9 SND",
"postfixthreadop : expr9 SNDBK",
"postfixthreadop : expr9 RCV",
"postfixthreadop : expr9 RCVBK",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 SND expr10",
"expr9 : expr9 SNDBK expr10",
"expr9 : expr9 RCV expr10",
"expr9 : expr9 RCVBK expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : SND expr10",
"expr10 : SNDBK expr10",
"expr10 : RCV expr10",
"expr10 : RCVBK expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : LCONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NMEQ expr10",
"expr10 : NMNE expr10",
"expr10 : SEQ expr10",
"expr10 : SNE expr10",
"expr10 : EQUIV expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : NEQUIV expr10",
"expr10 : BACKSLASH expr10",
"expr10 : PSETCUR expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : SND",
"expr11 : SNDBK",
"expr11 : RCV",
"expr11 : RCVBK",
"expr11 : PUNEVAL",
"expr11 : CREATE expr",
"expr11 : THREAD expr",
"expr11 : CRITICAL expr2a COLON expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK caselist RBRACK",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : packageref",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"proc : prochead error procbody END",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 783 "unigram.y"

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
   local rhs

   if /iconc then
      return nd
   if not (*nd.children = 3) then
      return nd
   rhs := nd.children[3]
   if (not(type(rhs) == "treenode")) then
      return nd
   if (not(rhs.label == "invoke")) then
      return nd
   rhs := node("Paren", "(", rhs, ")")
   nd.children[3] := rhs
   return nd
end

procedure FieldRef(lhs, dot, rhs)
   if /iconc | (type(lhs) ~== "treenode") then
      return Field(lhs, dot, rhs)

   if (lhs.label == "invoke") then {
      tmpcount +:= 1;
      return node("Paren", "(",
         node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
         node("invoke", Field("__" || tmpcount, ".", rhs))
         );
      }
   return Field(lhs, dot, rhs)
end

procedure InvocationNode(args[])
   tmpcount +:= 1
   if type(args[1]) == "token" & (args[1].tok = IDENT) then {
       n1 := args[1]
       lparen := copy(args[1])
       lparen.tok := LPAREN
       lparen.s := "("
   }
   else {
       n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
       if lparen := Clone1stToken(args[1]) then {
	   lparen.tok := LPAREN
	   lparen.s := "("
       }
       else lparen := "("
   }
   if *args = 6 then {
       return node("Paren",lparen,node("invoke",
		    # iconc uses no __m business
		   (if /iconc then Field(Field(n1, ".", "__m"), "." , args[3])
			      else Field(n1, ".", args[3])),

	     args[4], node("exprlist",
	     if n1 === args[1] then args[1] else "__"||tmpcount,
	     if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
	     ,")")
      }
   else {
      if /iconc then
	 return  node("Paren",lparen,node("invoke",Field(Field(
			  Field(n1,".", "__m"),
			 "." , args[3]),".",args[5]),
		       args[6], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
		      ,")")
      else return SuperMethodInvok ! args
   }
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
   if /iconc then
      return node("invoke", expr11, lparen, args, rparen)

   if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
      return node("invoke", expr11, lparen, args, rparen)
      }

   if (type(expr11) == "treenode") then {
      case expr11.label of {
         "field": {
            #
            # need to examine lhs of field-ref to determine
            # whether we need to decompose the expr11 further...
            #
            if (type(expr11.children[1]) == "treenode") then {
               tmpcount +:= 1;
               n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
                  expr11.children[1]), ")")
               return node("exprlist", "(", n1, "&",
                  node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
                  lparen, args, rparen), ")")
               }
            else {
               return node("invoke", expr11, lparen, args, rparen)
               }
            }
         default: {
            return node("invoke", expr11, lparen, args, rparen)
            }
         }
      }
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
   tmpcount +:= 1
   if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
      n1 := args[1]
      lparen := copy(args[1])
      lparen.tok := LPAREN
      lparen.s := "("
      }
   else {
      n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
      if lparen := Clone1stToken(args[1]) then {
         lparen.tok := LPAREN
         lparen.s := "("
         }
      else
         lparen := "("
      }

   args[3].s := mangle_class_sym(args[3].s)
   args[3].s ||:= "__oprec"
   return node("exprlist", "(", n1, ")", " & ",
      node("Paren", lparen, node("invoke",
      Field(args[3], ".", args[5]),
      args[6], node("exprlist",
      if n1 === args[1] then args[1] else "__" || tmpcount,
      if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
      ")", ))
end

procedure isloco(node, s)
case type(node) of {
   "treenode": {
      if *node.children > 0 then return isloco(!node.children, s)
      }
   "token" : {
      if (node.tok = IDENT) & (node.s == s) then return
      }
   }
end

procedure buildtab_from_cclause(n, args)
   if type(n) ~== "treenode" then stop("bad table literal")
   comma := copy(n.children[2])
   comma.tok := COMMA
   comma.s := ","
   case n.label of {
     "cclause0": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	}
     "cclause1": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	push(args.children, comma)
	push(args.children, n.children[1])
	}
   }
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
   args := node("elst1")
   write("I am a tablelit, cl is ", image(cl.label))
   while type(cl)=="treenode" & cl.label == "Caselist" do {
      buildtab_from_cclause(cl.children[3], args)
      cl := cl.children[1]
      }
   buildtab_from_cclause(cl, args)
   tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
   lp := copy(lb); lp.tok := LPAREN; lp.s := "("
   rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
   return node("invoke", tabid, lp, args, rp)
end

#
# A record type for recording errors for later reporting e.g. within an IDE,
# or to stderr.
#
record ParseError ( lineNumber, errorMessage )
#line 2718 "unigram.icn"
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    action[yyn]()          # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 289 "unigram.y"
 Progend(valstk[2]);
end

procedure action_2()
#line 291 "unigram.y"
 yyval := EmptyNode 
end

procedure action_3()
#line 292 "unigram.y"

	     if /parsingErrors | *parsingErrors = 0 then iwrites(&errout,".")
	     yyval := node("decls", valstk[2], valstk[1])
	     
end

procedure action_12()
#line 307 "unigram.y"
 yyval := EmptyNode 
end

procedure action_13()
#line 308 "unigram.y"

	   yyval := Method( , , , , , valstk[5], "initially", EmptyNode, "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_14()
#line 314 "unigram.y"

	   yyval := Method( , , , , , valstk[8], "initially", valstk[6], "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_15()
#line 322 "unigram.y"
 yyval := EmptyNode 
end

procedure action_17()
#line 325 "unigram.y"

   yyval := valstk[3]
   yyval.methods := methodstaque(&null, yyval)
   
end

procedure action_18()
#line 329 "unigram.y"

   yyval := valstk[7]
   if valstk[5] ~=== EmptyNode then {
      if valstk[5].label == "locals3" then
         yyerror("static class variables not yet implemented")
      # splice in any class locals into the field list
      yyval.fields.traverse(valstk[5])
      }
   if valstk[2] ~=== EmptyNode then
      valstk[4] := node("methods", valstk[4], valstk[2])
   yyval.methods := methodstaque(valstk[4], yyval)
   
end

procedure action_19()
#line 342 "unigram.y"

   yyval := Class()
   yyval.tag := valstk[6]
   yyval.unmangled_name := valstk[5].s
   yyval.name := package_mangled_symbol(valstk[5].s)
   if proc(yyval.name, 0) then
      warning("Warning: class "|| yyval.name ||" overrides the built-in function")
   else if \ (foobar := classes.lookup(yyval.name)) then {
      yyerror("redeclaration of class " || yyval.name)
      }
   else
      classes.insert(yyval, yyval.name)

   yyval.supers_node := valstk[4]
   yyval.fields := valstk[2]
   yyval.lptoken := valstk[3]
   yyval.rptoken := valstk[1]
   
end

procedure action_20()
#line 361 "unigram.y"
 yyval := EmptyNode 
end

procedure action_21()
#line 362 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_22()
#line 363 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_23()
#line 366 "unigram.y"
 yyval := node("packageref", valstk[3],valstk[2],valstk[1]) 
end

procedure action_24()
#line 367 "unigram.y"
 yyval := node("packageref", valstk[2],valstk[1]) 
end

procedure action_25()
#line 370 "unigram.y"
 yyval := EmptyNode 
end

procedure action_26()
#line 371 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_27()
#line 372 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_28()
#line 373 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_29()
#line 376 "unigram.y"
 yyval := node("invocable", valstk[2], valstk[1]);
end

procedure action_31()
#line 379 "unigram.y"
 yyval := node("invoclist", valstk[3],valstk[2],valstk[1]);
end

procedure action_34()
#line 383 "unigram.y"
yyval := node("invocop3", valstk[3],valstk[2],valstk[1]);
end

procedure action_35()
#line 385 "unigram.y"

   if \thePackage then {
      if not (thePackage.name == valstk[1].s) then {
         yyerror(fName || " cannot be in both package "|| thePackage.name ||
            " and package " || valstk[1].s)
         yyval := EmptyNode
         }
      else { # this branch allowed for -C / iconc
         thePackage.insertfname(fName)
         thePackage.add_imported()
         }
      }
   else {
      yyval := node("package", valstk[2],valstk[1]);
      thePackage := Package(valstk[1].s)
      thePackage.insertfname(fName)
      thePackage.add_imported()
      }
   
end

procedure action_36()
#line 405 "unigram.y"

   yyval := node("import", valstk[2],valstk[1]," ")
   import_class(valstk[1])
   
end

procedure action_37()
#line 410 "unigram.y"
 yyval := node("link", valstk[2],valstk[1]," "); 
end

procedure action_39()
#line 413 "unigram.y"
 yyval := node("lnklist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_41()
#line 416 "unigram.y"
 yyval := node("implist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_44()
#line 421 "unigram.y"
 yyval := node("global", valstk[2],valstk[1]) 
end

procedure action_45()
#line 423 "unigram.y"

		yyval := declaration(valstk[4],valstk[2],valstk[5],valstk[3],valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_46()
#line 429 "unigram.y"
 yyval := EmptyNode 
end

procedure action_48()
#line 432 "unigram.y"

#		body_scopeck(valstk[2])
		yyval := node("proc", valstk[6],";",valstk[4],valstk[3],valstk[2],valstk[1])
		
end

procedure action_49()
#line 437 "unigram.y"

		yyval := valstk[6]
		yyval.locals := valstk[4]
		yyval.initl := valstk[3]
		yyval.procbody := valstk[2]
		
end

procedure action_50()
#line 443 "unigram.y"

		yyval := valstk[1]
                yyval.abstract_flag := 1
		
end

procedure action_51()
#line 448 "unigram.y"

		yyval := declaration(valstk[4], valstk[2], valstk[5], valstk[3], valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_52()
#line 454 "unigram.y"

		yyval := Method( , , , , , valstk[5], valstk[4].s, valstk[2], valstk[5].s, valstk[3], valstk[1])
		
end

procedure action_53()
#line 459 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_54()
#line 460 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_55()
#line 461 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_56()
#line 463 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_57()
#line 464 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_58()
#line 465 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_60()
#line 469 "unigram.y"
 yyval := node("idlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_62()
#line 472 "unigram.y"
 yyval := node("varlist2", valstk[3], valstk[2], valstk[1])
end

procedure action_63()
#line 473 "unigram.y"
 yyval := node("varlist3", valstk[3], valstk[2], valstk[1])
end

procedure action_64()
#line 474 "unigram.y"
 yyval := node("varlist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_66()
#line 477 "unigram.y"
 yyval := node("stalist2", valstk[3], valstk[2], valstk[1])
end

procedure action_67()
#line 478 "unigram.y"
 yyval := node("stalist3", valstk[3], valstk[2], valstk[1])
end

procedure action_68()
#line 479 "unigram.y"
 yyval := node("stalist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_70()
#line 482 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_72()
#line 485 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_74()
#line 488 "unigram.y"
 yyval := node("arg2", valstk[3], valstk[2], valstk[1]) 
end

procedure action_75()
#line 489 "unigram.y"
 yyval := node("arg3", valstk[3], valstk[2], valstk[1]) 
end

procedure action_76()
#line 490 "unigram.y"
 yyval := node("arg4", valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]) 
end

procedure action_77()
#line 492 "unigram.y"
 yyval := valstk[1] 
end

procedure action_78()
#line 494 "unigram.y"
 yyval := EmptyNode;
end

procedure action_81()
#line 498 "unigram.y"
 yyval := EmptyNode;
end

procedure action_82()
#line 499 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_83()
#line 501 "unigram.y"
 yyval := EmptyNode;
end

procedure action_84()
#line 502 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_85()
#line 503 "unigram.y"
 yyval := node("locals3", valstk[4],valstk[3],valstk[2],";");
end

procedure action_86()
#line 505 "unigram.y"
 yyval := EmptyNode 
end

procedure action_87()
#line 506 "unigram.y"

	   yyval := node("initial", valstk[3], valstk[2],";")
	      
end

procedure action_88()
#line 510 "unigram.y"
 yyval := EmptyNode 
end

procedure action_89()
#line 511 "unigram.y"
 yyval := node("procbody", valstk[3],";",valstk[1]);
end

procedure action_90()
#line 513 "unigram.y"
 yyval := EmptyNode 
end

procedure action_93()
#line 517 "unigram.y"
 yyval := node("and", valstk[3],valstk[2],valstk[1]) 
end

procedure action_95()
#line 520 "unigram.y"
 yyval := node("binques", valstk[3],valstk[2],valstk[1]);
end

procedure action_97()
#line 523 "unigram.y"
 yyval := node("swap", valstk[3],valstk[2],valstk[1]);
end

procedure action_98()
#line 524 "unigram.y"
 
          yyval := parenthesize_assign(node("assign",valstk[3],valstk[2],valstk[1]));
          
end

procedure action_99()
#line 527 "unigram.y"
 yyval := node("revswap", valstk[3],valstk[2],valstk[1]);
end

procedure action_100()
#line 528 "unigram.y"
 yyval := node("revasgn", valstk[3],valstk[2],valstk[1]);
end

procedure action_101()
#line 529 "unigram.y"
 yyval := node("augcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_102()
#line 530 "unigram.y"
 yyval := node("auglcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_103()
#line 531 "unigram.y"
 yyval := node("Bdiffa", valstk[3],valstk[2],valstk[1]);
end

procedure action_104()
#line 532 "unigram.y"
 yyval := node("Buniona", valstk[3],valstk[2],valstk[1]);
end

procedure action_105()
#line 533 "unigram.y"
 yyval := node("Bplusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_106()
#line 534 "unigram.y"
 yyval := node("Bminusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_107()
#line 535 "unigram.y"
 yyval := node("Bstara", valstk[3],valstk[2],valstk[1]);
end

procedure action_108()
#line 536 "unigram.y"
 yyval := node("Bintera", valstk[3],valstk[2],valstk[1]);
end

procedure action_109()
#line 537 "unigram.y"
 yyval := node("Bslasha", valstk[3],valstk[2],valstk[1]);
end

procedure action_110()
#line 538 "unigram.y"
 yyval := node("Bmoda", valstk[3],valstk[2],valstk[1]);
end

procedure action_111()
#line 539 "unigram.y"
 yyval := node("Bcareta", valstk[3],valstk[2],valstk[1]);
end

procedure action_112()
#line 540 "unigram.y"
 yyval := node("Baugeq", valstk[3],valstk[2],valstk[1]);
end

procedure action_113()
#line 541 "unigram.y"
 yyval := node("Baugeqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_114()
#line 542 "unigram.y"
 yyval := node("Baugge", valstk[3],valstk[2],valstk[1]);
end

procedure action_115()
#line 543 "unigram.y"
 yyval := node("Bauggt", valstk[3],valstk[2],valstk[1]);
end

procedure action_116()
#line 544 "unigram.y"
 yyval := node("Baugle", valstk[3],valstk[2],valstk[1]);
end

procedure action_117()
#line 545 "unigram.y"
 yyval := node("Bauglt", valstk[3],valstk[2],valstk[1]);
end

procedure action_118()
#line 546 "unigram.y"
 yyval := node("Baugne", valstk[3],valstk[2],valstk[1]);
end

procedure action_119()
#line 547 "unigram.y"
 yyval := node("Baugneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_120()
#line 548 "unigram.y"
 yyval := node("Baugseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_121()
#line 549 "unigram.y"
 yyval := node("Baugsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_122()
#line 550 "unigram.y"
 yyval := node("Baugsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_123()
#line 551 "unigram.y"
 yyval := node("Baugsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_124()
#line 552 "unigram.y"
 yyval := node("Baugslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_125()
#line 553 "unigram.y"
 yyval := node("Baugsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_126()
#line 554 "unigram.y"
 yyval := node("Baugques", valstk[3],valstk[2],valstk[1]);
end

procedure action_127()
#line 555 "unigram.y"
 yyval := node("Baugamper", valstk[3],valstk[2],valstk[1]);
end

procedure action_128()
#line 556 "unigram.y"
 yyval := node("Baugact", valstk[3],valstk[2],valstk[1]);
end

procedure action_130()
#line 559 "unigram.y"
 yyval := node("BPmatch", valstk[3],valstk[2],valstk[1]);
end

procedure action_132()
#line 562 "unigram.y"
 yyval := node("to", valstk[3],valstk[2],valstk[1]);
end

procedure action_133()
#line 563 "unigram.y"
 yyval := node("toby", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_134()
#line 564 "unigram.y"
 yyval := node("BPor", valstk[3],valstk[2],valstk[1]); 
end

procedure action_136()
#line 567 "unigram.y"
 yyval := node("BPand", valstk[3],valstk[2],valstk[1]); 
end

procedure action_137()
#line 568 "unigram.y"
yyval := node(BAR, valstk[3],valstk[2],valstk[1]);
end

procedure action_139()
#line 571 "unigram.y"
 yyval := node("BPiam", valstk[3],valstk[2],valstk[1]);
end

procedure action_140()
#line 572 "unigram.y"
 yyval := node("BPaom", valstk[3],valstk[2],valstk[1]);
end

procedure action_141()
#line 573 "unigram.y"
 yyval := node("Bseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_142()
#line 574 "unigram.y"
 yyval := node("Bsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_143()
#line 575 "unigram.y"
 yyval := node("Bsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_144()
#line 576 "unigram.y"
 yyval := node("Bsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_145()
#line 577 "unigram.y"
 yyval := node("Bslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_146()
#line 578 "unigram.y"
 yyval := node("Bsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_147()
#line 579 "unigram.y"
 yyval := node("Beq", valstk[3],valstk[2],valstk[1]);
end

procedure action_148()
#line 580 "unigram.y"
 yyval := node("Bge", valstk[3],valstk[2],valstk[1]);
end

procedure action_149()
#line 581 "unigram.y"
 yyval := node("Bgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_150()
#line 582 "unigram.y"
 yyval := node("Ble", valstk[3],valstk[2],valstk[1]);
end

procedure action_151()
#line 583 "unigram.y"
 yyval := node("Blt", valstk[3],valstk[2],valstk[1]);
end

procedure action_152()
#line 584 "unigram.y"
 yyval := node("Bne", valstk[3],valstk[2],valstk[1]);
end

procedure action_153()
#line 585 "unigram.y"
 yyval := node("Beqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_154()
#line 586 "unigram.y"
 yyval := node("Bneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_156()
#line 589 "unigram.y"
 yyval := node("Bcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_157()
#line 590 "unigram.y"
 yyval := node("Blcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_159()
#line 597 "unigram.y"
 yyval := node("Bplus", valstk[3],valstk[2],valstk[1]);
end

procedure action_160()
#line 598 "unigram.y"
 yyval := node("Bdiff", valstk[3],valstk[2],valstk[1]);
end

procedure action_161()
#line 599 "unigram.y"
 yyval := node("Bunion", valstk[3],valstk[2],valstk[1]);
end

procedure action_162()
#line 600 "unigram.y"
 yyval := node("Bminus", valstk[3],valstk[2],valstk[1]);
end

procedure action_164()
#line 603 "unigram.y"
 yyval := node("Bstar", valstk[3],valstk[2],valstk[1]);
end

procedure action_165()
#line 604 "unigram.y"
 yyval := node("Binter", valstk[3],valstk[2],valstk[1]);
end

procedure action_166()
#line 605 "unigram.y"
 yyval := node("Bslash", valstk[3],valstk[2],valstk[1]);
end

procedure action_167()
#line 606 "unigram.y"
 yyval := node("Bmod", valstk[3],valstk[2],valstk[1]);
end

procedure action_170()
#line 610 "unigram.y"
 yyval := node("Bcaret", valstk[3],valstk[2],valstk[1]);
end

procedure action_171()
#line 613 "unigram.y"
 yyval := node("Bsnd", valstk[2],valstk[1],EmptyNode);
end

procedure action_172()
#line 614 "unigram.y"
 yyval := node("Bsndbk", valstk[2],valstk[1],EmptyNode);
end

procedure action_173()
#line 615 "unigram.y"
 yyval := node("Brcv", valstk[2],valstk[1],EmptyNode);
end

procedure action_174()
#line 616 "unigram.y"
 yyval := node("Brcvbk", valstk[2],valstk[1],EmptyNode);
end

procedure action_176()
#line 619 "unigram.y"
 yyval := node("limit", valstk[3],valstk[2],valstk[1]);
end

procedure action_177()
#line 620 "unigram.y"
 yyval := node("at", valstk[3],valstk[2],valstk[1]);
end

procedure action_178()
#line 621 "unigram.y"
 yyval := node("Bsnd", valstk[3],valstk[2],valstk[1]);
end

procedure action_179()
#line 622 "unigram.y"
 yyval := node("Bsndbk", valstk[3],valstk[2],valstk[1]);
end

procedure action_180()
#line 623 "unigram.y"
 yyval := node("Brcv", valstk[3],valstk[2],valstk[1]);
end

procedure action_181()
#line 624 "unigram.y"
 yyval := node("Brcvbk", valstk[3],valstk[2],valstk[1]);
end

procedure action_182()
#line 625 "unigram.y"
 yyval := node("apply", valstk[3],valstk[2],valstk[1]);
end

procedure action_184()
#line 628 "unigram.y"
 yyval := node("uat", valstk[2],valstk[1]);
end

procedure action_185()
#line 629 "unigram.y"
 yyval := node("Bsnd", EmptyNode,valstk[2],valstk[1]);
end

procedure action_186()
#line 630 "unigram.y"
 yyval := node("Bsndbk", EmptyNode,valstk[2],valstk[1]);
end

procedure action_187()
#line 631 "unigram.y"
 yyval := node("Brcv", EmptyNode,valstk[2],valstk[1]);
end

procedure action_188()
#line 632 "unigram.y"
 yyval := node("Brcvbk", EmptyNode,valstk[2],valstk[1]);
end

procedure action_189()
#line 633 "unigram.y"
 yyval := node("unot", valstk[2],valstk[1]);
end

procedure action_190()
#line 634 "unigram.y"
 yyval := node("ubar", valstk[2],valstk[1]);
end

procedure action_191()
#line 635 "unigram.y"
 yyval := node("uconcat", valstk[2],valstk[1]);
end

procedure action_192()
#line 636 "unigram.y"
 yyval := node("ulconcat", valstk[2],valstk[1]);
end

procedure action_193()
#line 637 "unigram.y"
 yyval := node("udot", valstk[2],valstk[1]);
end

procedure action_194()
#line 638 "unigram.y"
 yyval := node("ubang", valstk[2],valstk[1]);
end

procedure action_195()
#line 639 "unigram.y"
 yyval := node("udiff", valstk[2],valstk[1]);
end

procedure action_196()
#line 640 "unigram.y"
 yyval := node("uplus", valstk[2],valstk[1]);
end

procedure action_197()
#line 641 "unigram.y"
 yyval := node("ustar", valstk[2],valstk[1]);
end

procedure action_198()
#line 642 "unigram.y"
 yyval := node("uslash", valstk[2],valstk[1]);
end

procedure action_199()
#line 643 "unigram.y"
 yyval := node("ucaret", valstk[2],valstk[1]);
end

procedure action_200()
#line 644 "unigram.y"
 yyval := node("uinter", valstk[2],valstk[1]);
end

procedure action_201()
#line 645 "unigram.y"
 yyval := node("utilde", valstk[2],valstk[1]);
end

procedure action_202()
#line 646 "unigram.y"
 yyval := node("uminus", valstk[2],valstk[1]);
end

procedure action_203()
#line 647 "unigram.y"
 yyval := node("unumeq", valstk[2],valstk[1]);
end

procedure action_204()
#line 648 "unigram.y"
 yyval := node("unumne", valstk[2],valstk[1]);
end

procedure action_205()
#line 649 "unigram.y"
 yyval := node("ulexeq", valstk[2],valstk[1]);
end

procedure action_206()
#line 650 "unigram.y"
 yyval := node("ulexne", valstk[2],valstk[1]);
end

procedure action_207()
#line 651 "unigram.y"
 yyval := node("uequiv", valstk[2],valstk[1]);
end

procedure action_208()
#line 652 "unigram.y"
 yyval := node("uunion", valstk[2],valstk[1]);
end

procedure action_209()
#line 653 "unigram.y"
 yyval := node("uqmark", valstk[2],valstk[1]);
end

procedure action_210()
#line 654 "unigram.y"
 yyval := node("unotequiv", valstk[2],valstk[1]);
end

procedure action_211()
#line 655 "unigram.y"
 yyval := node("ubackslash", valstk[2],valstk[1]);
end

procedure action_212()
#line 656 "unigram.y"
 yyval := node("upsetcur", valstk[2],valstk[1]);
end

procedure action_222()
#line 667 "unigram.y"
 yyval := node("Bsnd", EmptyNode,valstk[1],EmptyNode);
end

procedure action_223()
#line 668 "unigram.y"
 yyval := node("Bsndbk", EmptyNode,valstk[1],EmptyNode);
end

procedure action_224()
#line 669 "unigram.y"
 yyval := node("Brcv", EmptyNode,valstk[1],EmptyNode);
end

procedure action_225()
#line 670 "unigram.y"
 yyval := node("Brcvbk", EmptyNode,valstk[1],EmptyNode);
end

procedure action_226()
#line 671 "unigram.y"
 yyval := node("BPuneval", valstk[1]);
end

procedure action_227()
#line 672 "unigram.y"
 yyval := node("create", valstk[2],valstk[1]);
end

procedure action_228()
#line 673 "unigram.y"

	      fakeThreadIdent := Clone1stToken(valstk[2])
	      fakeThreadIdent.tok := IDENT
	      fakeCreate := Clone1stToken(valstk[2])
	      fakeCreate.tok := CREATE
	      fakeCreate.s := "create"
	      fakeThreadIdent.s := "spawn"
	      fakeLParen := Clone1stToken(valstk[2])
	      fakeLParen.tok := LPAREN
	      fakeLParen.s := "("
	      fakeRParen := Clone1stToken(valstk[2])
	      fakeRParen.tok := RPAREN
	      fakeRParen.s := ")"

	      yyval := SimpleInvocation(fakeThreadIdent,fakeLParen,
				     node("create", fakeCreate, valstk[1]),
				     fakeRParen);
	      
end

procedure action_229()
#line 691 "unigram.y"
 yyval := node("critical", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_231()
#line 693 "unigram.y"
 yyval := node("Next", valstk[1]);
end

procedure action_232()
#line 694 "unigram.y"
 yyval := node("Break", valstk[2],valstk[1]);
end

procedure action_233()
#line 695 "unigram.y"
 yyval := node("Paren", valstk[3],valstk[2],valstk[1]);
end

procedure action_234()
#line 696 "unigram.y"
 yyval := node("Brace", valstk[3],valstk[2],valstk[1]);
end

procedure action_235()
#line 697 "unigram.y"
 yyval := tablelit(valstk[3],valstk[2],valstk[1]);
end

procedure action_236()
#line 698 "unigram.y"
 yyval := node("Brack", valstk[3],valstk[2],valstk[1]);
end

procedure action_237()
#line 699 "unigram.y"
 yyval := node("Subscript", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_238()
#line 700 "unigram.y"
 yyval := node("Pdco0", valstk[3],valstk[2],valstk[1]);
end

procedure action_239()
#line 701 "unigram.y"
 yyval := node("Pdco1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_240()
#line 702 "unigram.y"

           yyval := SimpleInvocation(valstk[4],valstk[3],valstk[2],valstk[1]);
      
end

procedure action_241()
#line 705 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_242()
#line 708 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_243()
#line 711 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_244()
#line 714 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_245()
#line 717 "unigram.y"

           yyval := FieldRef(valstk[3],valstk[2],valstk[1]);
      
end

procedure action_247()
#line 721 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]) 
end

procedure action_248()
#line 722 "unigram.y"
 yyval := node("keyword",valstk[2],valstk[1]) 
end

procedure action_249()
#line 723 "unigram.y"
 yyval := Keyword(valstk[2],valstk[1]) 
end

procedure action_250()
#line 725 "unigram.y"
 yyval := node("While0", valstk[2],valstk[1]);
end

procedure action_251()
#line 726 "unigram.y"
 yyval := node("While1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_252()
#line 728 "unigram.y"
 yyval := node("until", valstk[2],valstk[1]);
end

procedure action_253()
#line 729 "unigram.y"
 yyval := node("until1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_254()
#line 731 "unigram.y"
 yyval := node("every", valstk[2],valstk[1]);
end

procedure action_255()
#line 732 "unigram.y"
 yyval := node("every1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_256()
#line 734 "unigram.y"
 yyval := node("repeat", valstk[2],valstk[1]);
end

procedure action_258()
#line 737 "unigram.y"
 yyval := node("return", valstk[2], valstk[1]);
end

procedure action_259()
#line 738 "unigram.y"
 yyval := node("Suspend0", valstk[2],valstk[1]);
end

procedure action_260()
#line 739 "unigram.y"
 yyval := node("Suspend1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_261()
#line 741 "unigram.y"
 yyval := node("If0", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_262()
#line 742 "unigram.y"
 yyval := node("If1", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_263()
#line 744 "unigram.y"
 yyval := node("Case", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_265()
#line 747 "unigram.y"
 yyval := node("Caselist", valstk[3],";",valstk[1]);
end

procedure action_266()
#line 749 "unigram.y"
 yyval := node("cclause0", valstk[3],valstk[2],valstk[1]);
end

procedure action_267()
#line 750 "unigram.y"
 yyval := node("cclause1", valstk[3],valstk[2],valstk[1]);
end

procedure action_269()
#line 753 "unigram.y"

	   if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
	      yyval := valstk[3]; put(yyval.children, valstk[2], valstk[1])
	      }
	   else
	      yyval := node("elst1", valstk[3],valstk[2],valstk[1])
	   
end

procedure action_270()
#line 761 "unigram.y"
 yyval := node("pdcolist0", valstk[1]) 
end

procedure action_271()
#line 762 "unigram.y"
 yyval := node("pdcolist1", valstk[3],valstk[2],valstk[1]); 
end

procedure action_276()
#line 769 "unigram.y"
 yyval := node("section", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_281()
#line 776 "unigram.y"
 yyval := node("compound", valstk[3],";",valstk[1]);
end

procedure action_283()
#line 779 "unigram.y"
 yyval := node("error", valstk[4],valstk[2],valstk[1]); 
end

procedure action_284()
#line 780 "unigram.y"
 yyval := node("error"); 
end

#line 4108 "unigram.icn"
