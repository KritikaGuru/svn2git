### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 144 "unigram.y"

procedure Keyword(x1,x2)
   static keywords
   initial {
      keywords := set(["allocated","clock","collections","column","current",
		       "date","now","dateline","digits","e","error",
		       "errornumber","errortext","errorvalue","errout","fail",
		       "eventcode","eventsource","eventvalue","features",
		       "file","host","input","lcase","letters","level",
		       "line","main","null","output","phi","pi","pick","pos",
		       "progname","random","regions","source","storage",
		       "subject","time","trace","dump","ucase","version",
		       "errno","window","col","row","x","y","interval",
		       "control","shift","meta","lpress","mpress","rpress",
		       "lrelease","mrelease","rrelease","ldrag","mdrag",
		       "rdrag","resize","ascii","cset"])
      }

   # verify that x2 is a valid keyword
   if not member(keywords, x2.s) then
      write(&errout, "&",x2.s," is not a valid keyword!")

   return node("keyword",x1,x2)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
initial { set_of_all_fields := set(); dummyrecno := 1 }

   if \iconc then {
      if type(x3) == "token" then {
	 insert(set_of_all_fields, x3.s)
#	 write(&errout, "field ", image(x3.s))
	 }
      }

   return node("field",x1,x2,x3)
end

procedure Clone1stToken(n)
   case type(n) of {
      "token": return copy(n)
      "treenode": {
	 return Clone1stToken(!n.children)
	 }
      }
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
   
   if yynerrs > 0 then
      istop(yynerrs || " error" || (if yynerrs > 1 then "s" else ""))

   if /x1 then istop("error: empty file")

   package_level_syms := set()
   package_level_class_syms := set()
   set_package_level_syms(x1)
   scopecheck_superclass_decs(x1)

   outline := 1
   outcol := 1
   #
   # export specifications for each class
   #
   native := set()
   every cl := classes.foreach_t() do {
      cl.WriteSpec()
      insert(native, cl)
      }
   #
   # import class specifications, transitively
   #
   repeat {
      added := 0
      every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
         if /classes.lookup(super) then {
	    added := 1
	    readspec(super)
	    cl := classes.lookup(super)
	    if /cl then halt("can't inherit class '",super,"'")
	    iwrite("  inherits ", super, " from ", cl.linkfile)
	    writelink(cl.dir, cl.linkfile)
            }
       }
    if added = 0 then break
  }
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
  every (classes.foreach_t()).transitive_closure()
  every (classes.foreach_t()).resolve()

  scopecheck_bodies(x1)

   if \thePackage then {
      every thePackage.insertsym(!package_level_syms)
      }

  if \iconc then  {
     iconc_prep_parse_tree(&null, x1)
     }

  #
  # generate output
  #
#  iwrite("Generating code:")
   yyprint(x1)
   write(yyout)

   if \iconc & (type(set_of_all_fields) == "set") &
	(*set_of_all_fields > 0) then {
	arandomfield := !set_of_all_fields
      writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
      delete(set_of_all_fields, arandomfield)
      every writes(yyout, ",", !set_of_all_fields)
      write(yyout, ")")
      dummyrecno +:= 1
      set_of_all_fields := set()
      }
end
#line 129 "unigram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define iconINITIAL 278
$define INITIALLY 279
$define INVOCABLE 280
$define LINK 281
$define LOCAL 282
$define METHOD 283
$define NEXT 284
$define NOT 285
$define OF 286
$define PACKAGE 287
$define PROCEDURE 288
$define RECORD 289
$define REPEAT 290
$define RETURN 291
$define STATIC 292
$define SUSPEND 293
$define THEN 294
$define TO 295
$define UNTIL 296
$define WHILE 297
$define BANG 298
$define MOD 299
$define AUGMOD 300
$define AND 301
$define AUGAND 302
$define STAR 303
$define AUGSTAR 304
$define INTER 305
$define AUGINTER 306
$define PLUS 307
$define AUGPLUS 308
$define UNION 309
$define AUGUNION 310
$define MINUS 311
$define AUGMINUS 312
$define DIFF 313
$define AUGDIFF 314
$define DOT 315
$define SLASH 316
$define AUGSLASH 317
$define ASSIGN 318
$define SWAP 319
$define NMLT 320
$define AUGNMLT 321
$define REVASSIGN 322
$define REVSWAP 323
$define SLT 324
$define AUGSLT 325
$define SLE 326
$define AUGSLE 327
$define NMLE 328
$define AUGNMLE 329
$define NMEQ 330
$define AUGNMEQ 331
$define SEQ 332
$define AUGSEQ 333
$define EQUIV 334
$define AUGEQUIV 335
$define NMGT 336
$define AUGNMGT 337
$define NMGE 338
$define AUGNMGE 339
$define SGT 340
$define AUGSGT 341
$define SGE 342
$define AUGSGE 343
$define QMARK 344
$define AUGQMARK 345
$define AT 346
$define AUGAT 347
$define BACKSLASH 348
$define CARET 349
$define AUGCARET 350
$define BAR 351
$define CONCAT 352
$define AUGCONCAT 353
$define LCONCAT 354
$define AUGLCONCAT 355
$define TILDE 356
$define NMNE 357
$define AUGNMNE 358
$define SNE 359
$define AUGSNE 360
$define NEQUIV 361
$define AUGNEQUIV 362
$define LPAREN 363
$define RPAREN 364
$define PCOLON 365
$define COMMA 366
$define MCOLON 367
$define COLON 368
$define COLONCOLON 369
$define SEMICOL 370
$define LBRACK 371
$define RBRACK 372
$define LBRACE 373
$define RBRACE 374
$define DOLLAR 375
$define ABSTRACT 376
$define PMATCH 377
$define PAND 378
$define POR 379
$define PUNEVAL 380
$define PASSNONMATCH 381
$define PIMDASSN 382
$define PSETCUR 383
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
    2,   11,   11,   11,   16,   16,   10,   10,   17,   20,
   20,   20,   22,   22,   19,   19,   19,   19,    9,   24,
   24,   25,   25,   25,    7,    8,    6,   28,   28,   27,
   27,   26,   26,    5,    3,   30,   30,    4,   23,   23,
   31,   32,   15,   15,   15,   21,   21,   21,   29,   29,
   35,   35,   35,   35,   37,   37,   37,   37,   33,   33,
   34,   34,   38,   38,   38,   38,   39,   41,   41,   41,
   18,   18,   12,   12,   12,   13,   13,   14,   14,   43,
   43,   42,   42,   44,   44,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   45,   45,
   46,   46,   46,   46,   47,   47,   47,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   49,   49,   49,   50,   50,   50,
   50,   50,   51,   51,   51,   51,   51,   52,   52,   53,
   53,   53,   53,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   60,   60,   61,   61,   62,   62,   63,   57,   57,
   57,   57,   58,   58,   59,   66,   66,   68,   68,   64,
   64,   67,   67,   40,   40,   40,   40,   56,   69,   69,
   69,   65,   65,    0,    4,   42,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    8,    0,    1,    3,    7,    6,    0,
    3,    3,    3,    2,    0,    2,    2,    2,    2,    1,
    3,    1,    1,    3,    2,    2,    2,    1,    3,    1,
    3,    1,    1,    2,    5,    0,    1,    6,    6,    2,
    5,    5,    0,    1,    3,    0,    1,    3,    1,    3,
    1,    3,    3,    5,    1,    3,    3,    5,    1,    3,
    1,    3,    1,    3,    3,    5,    2,    0,    1,    1,
    0,    4,    0,    4,    4,    0,    3,    0,    3,    0,
    1,    1,    3,    1,    3,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
    1,    3,    5,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    3,    3,    1,    3,    1,
    3,    3,    3,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    4,    1,    1,    2,    3,    3,    3,    3,    4,    3,
    4,    4,    6,    6,    8,    8,    3,    1,    3,    2,
    2,    2,    4,    2,    4,    2,    4,    2,    1,    2,
    2,    4,    4,    6,    6,    1,    3,    3,    3,    1,
    3,    1,    3,    1,    1,    1,    1,    6,    1,    1,
    1,    1,    3,    3,    4,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    4,    5,    6,    7,    8,    9,
   10,   11,    0,    0,  264,    0,   59,    0,   42,   43,
   40,    0,   32,    0,    0,   30,   38,    0,   35,    0,
    0,    0,   81,    0,   83,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   17,    0,  266,    0,  254,  255,
  256,  257,    0,    0,    0,    0,    0,  239,    0,  213,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  209,    0,    0,  228,   94,  200,
    0,    0,    0,    0,    0,  131,    0,    0,    0,    0,
  163,    0,  170,    0,  201,  202,  203,  204,  205,  206,
  207,  208,    0,    0,    0,    0,   60,   41,   34,   31,
   39,    0,    0,    0,   69,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  214,    0,    0,    0,
    0,    0,  176,    0,  240,    0,  241,    0,    0,  181,
  231,  230,  184,  187,  183,  195,  189,  182,  180,  185,
  190,  192,  194,  196,  175,  198,  186,  177,  178,  179,
  188,  191,  193,  197,  250,    0,   24,    0,    0,    0,
    0,  246,    0,    0,  199,  265,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   21,   22,   79,   80,    0,
    0,   71,    0,    0,   51,    0,    0,   45,    0,    0,
    0,   50,   28,   27,   16,    0,   26,   83,   23,    0,
    0,    0,    0,    0,    0,    0,  215,    0,    0,    0,
  218,    0,  217,    0,  216,    0,   89,   95,  110,  127,
  107,  108,  105,  104,  106,  103,  109,   98,   97,  117,
  100,   99,  124,  123,  116,  112,  120,  113,  115,  114,
  122,  121,  126,  128,  111,  101,  102,  118,  125,  119,
    0,    0,  134,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  137,    0,    0,    0,  136,    0,
    0,    0,    0,    0,    0,    0,    0,  167,  164,  165,
  166,  173,  172,  171,  169,  227,  229,    0,    0,    0,
  220,  252,    0,    0,    0,    0,    0,    0,    0,    0,
   19,    0,    0,   77,    0,   75,   70,   55,    0,    0,
   82,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  251,    0,    0,    0,  247,  263,    0,  222,
  260,  261,  259,    0,  219,    0,  221,    0,    0,    0,
   87,   84,    0,    0,   85,   48,   72,   58,    0,   62,
    0,    0,    0,   83,   18,    0,    0,    0,  133,    0,
  253,    0,    0,    0,    0,   66,    0,   76,    0,   52,
    0,    0,    0,  245,    0,  258,    0,    0,  224,  223,
    0,   64,    0,    0,   49,    0,    0,   68,   83,   13,
  226,  225,    0,    0,   14,
  ]
  yydgoto := [                          2,
    3,   14,  151,   16,  152,   18,   19,   20,   21,   22,
  424,  133,  285,  107,  143,   43,   23,   56,  153,   47,
  290,  108,  154,   35,   36,   31,   32,   38,   28,  147,
   24,  155,  144,  291,  300,  109,  409,  145,  292,  110,
  293,  111,  195,  113,  114,  115,  116,  117,  118,  119,
  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
  130,  131,  132,  196,  204,  201,  403,  202,  444,
  ]
  yysindex := [                       -87,
    0,    0,   51,  158,    0,  -74,  -32,  152,  174,  152,
  152,  -17,  -11,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -67, -223,    0,  -56,    0,  -50,    0,    0,
    0,  -31,    0,  -46,   32,    0,    0,   38,    0,  -53,
   47,    5,    0,  494,    0, -221,   55,  175,  152,  190,
  174,  152,  200,  -32,    0, -257,    0,   83,    0,    0,
    0,    0,  494,  494,  494,  621,  494,    0,  494,    0,
  621,  494,  494,  494,  494,  494,  621,  -60,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  494,  215,  238,  494,    0,  621,  206,    0,    0,    0,
  181,  114,  141, 6483, -261,    0,  -36,  -92,   -2,  -73,
    0, -271,    0, -142,    0,    0,    0,    0,    0,    0,
    0,    0,  -54, -215,  -56,  -25,    0,    0,    0,    0,
    0,  118,  123,  -42,    0,  -50,  124,  232,  234,  217,
  -79,  -79,  122,  -79,  132,  247,    0, -255,  181, -340,
 -235,  -86,    0,  181,    0, -231,    0, -227, -225,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   -5,    0,  140, -151, -111,
   27,    0,  139,  136,    0,    0,  621,  494,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
  621,  621,  621,  621,  621,  621,  -72,  494,  494,  366,
  -70,  494,  232,  256,  494,    0,    0,    0,    0,  151,
  -30,    0,  200,   97,    0,  200,  144,    0,  199,  -71,
  155,    0,    0,    0,    0,  240,    0,    0,    0,  147,
  494,  494,  494,  494,  494,  494,    0,  494,  494,  494,
    0,  238,    0,  494,    0,  141,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -261,  257,    0,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
  -92,  -92,  -92,  -92,    0,  -92,  -92,  -92,    0,  -92,
  -92,   -2,   -2,  -73,  -73,  -73,  -73,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   50, -145,  -96,
    0,    0, -325, -292,  161, -152,  -33,  207,  -23,  254,
    0,  -25,  160,    0,  159,    0,    0,    0,  621,  273,
    0,  200, -136,  261,  -54,  238,  181,  181, -254,  181,
  181,  181,    0,  181,  181, -151,    0,    0,  621,    0,
    0,    0,    0,  494,    0,  494,    0,  -68,  494,  494,
    0,    0,  621,  280,    0,    0,    0,    0,  169,    0,
  220,  176,  200,    0,    0,  494,  -40,  494,    0, -251,
    0,  179,  183,   77,   85,    0,  226,    0,  621,    0,
  186,  -54,  283,    0,  181,    0,  494,  494,    0,    0,
  621,    0,  187,  494,    0,   89,   99,    0,    0,    0,
    0,    0,  -54,  494,    0,
  ]
  yyrindex := [                       286,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -107,    0,    0,  193,    0, -224,    0,    0,
    0,  414,    0, -208,  542,    0,    0,  669,    0,    0,
    0,  -89,    0, -250,    0,    0,    0,    0,    0,    0,
    0,    0,  194,  196,    0, -211,    0,  727,    0,    0,
    0,    0, 6061,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 6061, 6061,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  104,    0,  -83,  -26,    0,    0,    0,    0,    0,    0,
  843,    0,  959, 6177, 2119,    0, 6290, 2234, 4901, 5017,
    0, 5133,    0, 5945,    0,    0,    0,    0,    0,    0,
    0,    0,  110,  193,  193, -241,    0,    0,    0,    0,
    0, -209,    0,  198,    0,  201,    0,    0,    0,    0,
 -211, -211,  -37, -211,    0,    0,    0,    0, 1075,    0,
 2350,    0,    0, 1191,    0, 2466,    0, 2582, 2698,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -58,    0,
    0,    0,  185,    0,    0,    0,    0, -250,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,  -83,  203,
    0,    0,    0,    0, -250,    0,    0,    0,    0,    0,
  212,    0,    0,    0,    0,    0,    0,    0, -112, -107,
    0,    0,    0,    0,    0,  292,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -127,    0,    0,
    0,    0,    0,  -26,    0, 1307,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2814, 6400,    0, 2929, 3045, 3161, 3277, 3393, 3509, 3625,
 3741, 3857, 3973, 4089,    0, 4205, 4321, 4437,    0, 4553,
 4669, 5249, 5365, 5481, 5597, 5713, 5829,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -58,    0,
    0,    0,    0,    0,    0,    0,    0,   19,    0,    0,
    0,  314,    0,    0,  -93,    0,    0,    0,    0,    0,
    0,  194,    0,    0,  110,    0, 1423, 1539, 4785, 1655,
 1771, 1887,    0,  -10,    2,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -322,    0,    0,  104,  104,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -91,    0,  194,    0,    0, -250,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   26,    0,    0,    0,
    0,  110,    0,    0, 2003,    0,  104,  104,    0,    0,
    0,    0,    0, -250,    0,    0,    0,    0,    0,    0,
    0,    0,  110, -250,    0,
  ]
  yygindex := [                         0,
  576,    0,  348,    0,  376,    0,    0,    0,    0,    0,
    0, -298, -308, -203, -401, -139,    0,    0,  239,   78,
    0,  532,    0,    0,  528,  195,    0,    0,  526,    0,
    0,  431,    0,    0,  300, -126,    0,  -94,  184, -279,
    0,  -63,  -44,  378,  522,  349, -236,    0, 6604,  173,
  209,   -4,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -100,  269,  172,    0,  278,    0,
  ]
$define YYTABLESIZE 6866
  yytable := [                        112,
  158,  159,  200,  161,  327,  162,  362,  363,  164,  425,
  166,  168,  169,  306,  416,   78,  468,    7,  157,  375,
  462,   88,  448,  379,  148,  149,  273,  311,  165,  167,
  310,   13,   44,  243,  312,  134,  242,   44,  314,  199,
  446,   44,  315,   90,  316,  207,  207,   44,  447,  207,
   44,   90,   44,   33,   44,   44,   44,   33,   44,  203,
   25,  481,   44,   44,   44,  207,   33,   25,   33,  207,
  449,   33,   33,  207,  274,  207,  275,  276,   33,   33,
   33,  410,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,  358,  359,  360,  163,  466,  244,  150,   90,
  486,  170,   56,  173,  174,  175,  176,  177,  178,  179,
  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
  190,  191,  192,  193,  194,   44,   45,  102,  207,  207,
  205,   44,   46,  156,   73,  207,   73,   33,   25,   61,
  421,   73,   61,  112,   15,  482,   61,   15,    1,   61,
   61,   15,  277,  494,   15,   15,   61,  398,  400,  478,
   63,   15,   26,   63,  396,   16,  404,   63,  472,   16,
   63,   63,   16,   16,  504,    7,  171,   63,  414,   16,
  503,  417,  469,  149,   37,   39,  397,  313,  405,   13,
  473,  286,  287,  172,  207,  399,  320,  451,  406,  441,
  278,  442,  443,  282,   27,  269,  463,  283,  279,  270,
  280,  271,  281,  464,   15,  402,   90,  284,   90,   40,
  112,   15,  272,  138,   90,   41,  141,  427,  428,  429,
  430,  431,  432,   61,  318,  434,  435,   61,  436,  263,
  321,  264,  483,   61,  388,  389,  390,  391,   15,  318,
   74,  395,   74,  433,   63,  445,   55,   74,   63,  203,
   16,  288,   90,  245,   63,  289,   16,  246,   90,  247,
  500,  248,  460,  249,  420,  250,  150,  251,  305,  252,
  505,  253,   42,  254,  265,  255,  266,   91,  267,   53,
  268,   46,    5,   91,  256,   48,    6,  392,  393,  394,
  257,   50,  258,  296,  259,    7,  476,    8,  297,  322,
    9,   10,  420,  484,   49,  412,  452,   11,   12,   13,
  413,  260,  454,   90,  261,  262,  455,   90,  474,  475,
   15,   15,  492,  415,   59,   60,   61,   62,  317,  248,
  318,  248,  436,  248,  498,   86,   86,   86,   86,   86,
   86,  249,   86,  249,   86,  249,   86,   86,   17,   17,
  470,   86,   86,   86,   65,   86,  496,  497,   65,  303,
  304,   67,  307,   86,   86,   67,  322,   51,  323,   86,
   86,  471,   86,   52,  485,   86,   86,   86,   29,   54,
   86,   30,   86,  440,   86,  318,   86,  136,   86,   25,
   86,  112,   86,    6,   86,   86,   59,   60,   61,   62,
   33,  137,    7,   34,    8,  382,  383,    9,   10,   86,
  489,   86,  318,   86,   11,   12,   13,  139,  490,  112,
  318,  156,  501,   86,  318,   86,  142,   86,   86,  112,
   86,   86,  502,   86,  318,   86,   86,   90,   86,   90,
   86,  197,   86,  384,  385,  386,  387,  206,   86,   86,
   86,  207,   86,  208,  209,  294,  295,  298,  299,   86,
  301,  305,   86,   57,   58,   59,   60,   61,   62,  149,
   63,  308,   64,  309,   65,   66,  198,  319,  324,  325,
   67,   68,  408,   69,  411,  418,  419,  422,  423,  426,
  439,   70,   71,  450,  453,  456,  459,   72,   73,  461,
   74,  458,  465,   75,   76,   77,  477,  479,   78,  480,
   79,  487,   80,  491,   81,  488,   82,    2,   83,  493,
   84,    2,   85,   86,  495,   20,  499,   53,  262,   46,
    2,   54,    2,   12,   47,    2,    2,   87,   90,   88,
   78,   89,    2,    2,    2,   57,    4,  135,  140,  146,
  302,   90,  407,   91,  326,   92,   93,  160,   94,   95,
  361,   96,  438,   97,   98,  457,   99,  467,  100,  437,
  101,    0,    0,    0,    0,    0,  102,    0,  103,    0,
  104,    0,    0,    0,    0,    0,    0,  105,    0,    0,
  106,   57,   58,   59,   60,   61,   62,    0,   63,    0,
   64,    0,   65,   66,    0,    0,    0,    0,   67,   68,
    0,   69,    0,    0,    0,    0,    0,    0,    0,   70,
   71,    0,    0,    0,    0,   72,   73,    0,   74,    0,
    0,   75,   76,   77,    0,    0,   78,    0,   79,    0,
   80,    0,   81,    0,   82,   36,   83,    0,   84,   36,
   85,   86,    0,    0,    0,    0,    0,    0,   36,    0,
   36,    0,    0,   36,   36,   87,    0,   88,    0,   89,
   36,   36,   36,    0,    0,    0,    0,    0,    0,   90,
    0,   91,    0,   92,   93,    0,   94,   95,    0,   96,
    0,   97,   98,    0,   99,    0,  100,    0,  101,    0,
    0,    0,    0,    0,  102,    0,  103,    0,  104,  401,
    0,    0,    0,    0,    0,  105,    0,    0,  106,   57,
   58,   59,   60,   61,   62,    0,   63,    0,   64,    0,
   65,   66,    0,    0,    0,    0,   67,   68,    0,   69,
    0,    0,    0,    0,    0,    0,    0,   70,   71,    0,
    0,    0,    0,   72,   73,    0,   74,    0,    0,   75,
   76,   77,    0,    0,   78,    0,   79,    0,   80,    0,
   81,    0,   82,   29,   83,    0,   84,   29,   85,   86,
    0,    0,    0,    0,    0,    0,   29,    0,   29,    0,
    0,   29,   29,   87,    0,   88,    0,   89,   29,   29,
   29,    0,    0,    0,    0,    0,    0,   90,    0,   91,
    0,   92,   93,    0,   94,   95,    0,   96,    0,   97,
   98,    0,   99,    0,  100,    0,  101,    0,    0,    0,
    0,    0,  102,    0,  103,    0,  104,    0,    0,    0,
    0,    0,    0,  105,    0,    0,  106,   58,   59,   60,
   61,   62,    0,   63,    0,   64,    0,   65,   66,    0,
    0,    0,    0,   67,   68,    0,   69,    0,    0,    0,
    0,    0,    0,    0,   70,   71,    0,    0,    0,    0,
   72,   73,    0,   74,    0,    0,   75,   76,   77,    0,
    0,   78,    0,   79,    0,   80,    0,   81,    0,   82,
   37,   83,    0,   84,   37,   85,   86,    0,    0,    0,
    0,    0,    0,   37,    0,   37,    0,    0,   37,   37,
   87,    0,   88,    0,   89,   37,   37,   37,    0,    0,
    0,    0,    0,    0,   90,    0,   91,    0,   92,   93,
    0,   94,   95,    0,   96,    0,   97,   98,    0,   99,
    0,  100,    0,  101,    0,    0,    0,    0,    0,  102,
  212,  103,    0,  104,    0,    0,  212,  212,  212,    0,
  105,  212,    0,  106,    0,  212,    0,    0,  212,  212,
    0,    0,  212,    0,    0,  212,    0,    0,    0,    0,
  212,  212,    0,    0,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,    0,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,    0,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,   91,  212,  212,    0,
    0,    0,   91,   91,   91,    0,    0,   91,    0,    0,
    0,   91,    0,    0,   91,   91,    0,    0,   91,    0,
    0,   91,    0,    0,    0,    0,   91,   91,    0,    0,
   91,   91,   91,    0,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,    0,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,    0,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   92,   91,   91,    0,    0,    0,   92,   92,
   92,    0,    0,   92,    0,    0,    0,   92,    0,    0,
   92,   92,    0,    0,   92,    0,    0,   92,    0,    0,
    0,    0,   92,   92,    0,    0,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,    0,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,    0,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,    0,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,  210,   92,
   92,    0,    0,    0,  210,  210,  210,    0,    0,  210,
    0,    0,    0,  210,    0,    0,  210,  210,    0,    0,
  210,    0,    0,  210,    0,    0,    0,    0,  210,  210,
    0,    0,  210,  210,  210,    0,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
    0,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,    0,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  238,  210,  210,    0,    0,    0,
  238,  238,  238,    0,    0,  238,    0,    0,    0,  238,
    0,    0,  238,  238,    0,    0,  238,    0,    0,  238,
    0,    0,    0,    0,  238,  238,    0,    0,  238,  238,
  238,    0,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,    0,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,    0,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
   93,  238,  238,    0,    0,    0,   93,   93,   93,    0,
    0,   93,    0,    0,    0,   93,    0,    0,   93,   93,
    0,    0,   93,    0,    0,   93,    0,    0,    0,    0,
   93,   93,    0,    0,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
    0,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,    0,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,    0,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,  211,   93,   93,    0,
    0,    0,  211,  211,  211,    0,    0,  211,    0,    0,
    0,  211,    0,    0,  211,  211,    0,    0,  211,    0,
    0,  211,    0,    0,    0,    0,  211,  211,    0,    0,
  211,  211,  211,    0,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,    0,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,    0,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  237,  211,  211,    0,    0,    0,  237,  237,
  237,    0,    0,  237,    0,    0,    0,  237,    0,    0,
  237,  237,    0,    0,  237,    0,    0,  237,    0,    0,
    0,    0,  237,  237,    0,    0,  237,  237,  237,    0,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,    0,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,    0,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  242,  237,
  237,    0,    0,    0,  242,  242,  242,    0,    0,  242,
    0,    0,    0,  242,    0,    0,  242,  242,    0,    0,
  242,    0,    0,  242,    0,    0,    0,    0,  242,  242,
    0,    0,  242,  242,  242,    0,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
    0,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,    0,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  235,  242,  242,    0,    0,    0,
  235,  235,  235,    0,    0,  235,    0,    0,    0,  235,
    0,    0,  235,  235,    0,    0,  235,    0,    0,  235,
    0,    0,    0,    0,  235,  235,    0,    0,  235,  235,
  235,    0,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,    0,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,    0,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  233,  235,  235,    0,    0,    0,  233,  233,  233,    0,
    0,  233,    0,    0,    0,  233,    0,    0,  233,  233,
    0,    0,  233,    0,    0,  233,    0,    0,    0,    0,
  233,  233,    0,    0,  233,  233,  233,    0,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,    0,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,    0,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  244,  233,  233,    0,
    0,    0,  244,  244,  244,    0,    0,  244,    0,    0,
    0,  244,    0,    0,  244,  244,    0,    0,  244,    0,
    0,  244,    0,    0,    0,    0,  244,  244,    0,    0,
  244,  244,  244,    0,  244,  244,  244,  244,  244,  244,
  244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
  244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
  244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
  244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
  244,  244,  244,  244,  244,  244,  244,  244,    0,  244,
  244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
  244,    0,  244,  244,  244,  244,  244,  244,  244,  244,
  244,  244,  129,  244,  244,    0,    0,    0,  129,  129,
  129,    0,    0,  129,    0,    0,    0,  129,    0,    0,
  129,  129,    0,    0,  129,    0,    0,  129,    0,    0,
    0,    0,  129,    0,    0,    0,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,    0,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,    0,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  138,    0,  129,
  129,    0,    0,  138,  138,  138,    0,    0,  138,    0,
    0,    0,  138,    0,    0,  138,  138,    0,    0,  138,
    0,    0,  138,    0,    0,    0,    0,  138,  138,    0,
    0,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,    0,  138,    0,  138,    0,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,    0,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  236,  138,  138,    0,    0,    0,    0,
  236,  236,    0,    0,  236,    0,    0,    0,  236,    0,
    0,  236,  236,    0,    0,  236,    0,    0,  236,    0,
    0,    0,    0,  236,  236,    0,    0,  236,  236,  236,
    0,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,    0,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,    0,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,   91,
  236,  236,    0,    0,    0,    0,   91,   91,    0,    0,
   91,    0,    0,    0,   91,    0,    0,   91,   91,    0,
    0,   91,    0,    0,   91,    0,    0,    0,    0,   91,
   91,    0,    0,   91,   91,   91,    0,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,    0,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,    0,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,  234,   91,   91,    0,    0,
    0,    0,  234,  234,    0,    0,  234,    0,    0,    0,
  234,    0,    0,  234,  234,    0,    0,  234,    0,    0,
  234,    0,    0,    0,    0,  234,  234,    0,    0,  234,
  234,  234,    0,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,    0,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
    0,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  232,  234,  234,    0,    0,    0,    0,  232,  232,
    0,    0,  232,    0,    0,    0,  232,    0,    0,  232,
  232,    0,    0,  232,    0,    0,  232,    0,    0,    0,
    0,  232,  232,    0,    0,  232,  232,  232,    0,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,    0,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,    0,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  130,  232,  232,
    0,    0,    0,  130,  130,  130,    0,    0,  130,    0,
    0,    0,  130,    0,    0,  130,  130,    0,    0,  130,
    0,    0,  130,    0,    0,    0,    0,  130,    0,    0,
    0,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,    0,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,    0,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  151,    0,  130,  130,    0,    0,  151,  151,
  151,    0,    0,  151,    0,    0,    0,  151,    0,    0,
  151,  151,    0,    0,  151,    0,    0,  151,    0,    0,
    0,    0,  151,  151,    0,    0,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
    0,  151,    0,  151,    0,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,    0,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  145,  151,
  151,    0,    0,    0,  145,  145,  145,    0,    0,  145,
    0,    0,    0,  145,    0,    0,  145,  145,    0,    0,
  145,    0,    0,  145,    0,    0,    0,    0,  145,  145,
    0,    0,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,    0,  145,    0,  145,
    0,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,    0,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  144,  145,  145,    0,    0,    0,
  144,  144,  144,    0,    0,  144,    0,    0,    0,  144,
    0,    0,  144,  144,    0,    0,  144,    0,    0,  144,
    0,    0,    0,    0,  144,  144,    0,    0,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,    0,  144,    0,  144,    0,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,    0,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  150,  144,  144,    0,    0,    0,  150,  150,  150,    0,
    0,  150,    0,    0,    0,  150,    0,    0,  150,  150,
    0,    0,  150,    0,    0,  150,    0,    0,    0,    0,
  150,  150,    0,    0,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,    0,  150,
    0,  150,    0,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,    0,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  147,  150,  150,    0,
    0,    0,  147,  147,  147,    0,    0,  147,    0,    0,
    0,  147,    0,    0,  147,  147,    0,    0,  147,    0,
    0,  147,    0,    0,    0,    0,  147,  147,    0,    0,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,    0,  147,    0,  147,    0,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,    0,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  141,  147,  147,    0,    0,    0,  141,  141,
  141,    0,    0,  141,    0,    0,    0,  141,    0,    0,
  141,  141,    0,    0,  141,    0,    0,  141,    0,    0,
    0,    0,  141,  141,    0,    0,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
    0,  141,    0,  141,    0,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,    0,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  153,  141,
  141,    0,    0,    0,  153,  153,  153,    0,    0,  153,
    0,    0,    0,  153,    0,    0,  153,  153,    0,    0,
  153,    0,    0,  153,    0,    0,    0,    0,  153,  153,
    0,    0,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,    0,  153,    0,  153,
    0,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,    0,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  149,  153,  153,    0,    0,    0,
  149,  149,  149,    0,    0,  149,    0,    0,    0,  149,
    0,    0,  149,  149,    0,    0,  149,    0,    0,  149,
    0,    0,    0,    0,  149,  149,    0,    0,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,    0,  149,    0,  149,    0,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,    0,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  148,  149,  149,    0,    0,    0,  148,  148,  148,    0,
    0,  148,    0,    0,    0,  148,    0,    0,  148,  148,
    0,    0,  148,    0,    0,  148,    0,    0,    0,    0,
  148,  148,    0,    0,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,    0,  148,
    0,  148,    0,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,    0,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  143,  148,  148,    0,
    0,    0,  143,  143,  143,    0,    0,  143,    0,    0,
    0,  143,    0,    0,  143,  143,    0,    0,  143,    0,
    0,  143,    0,    0,    0,    0,  143,  143,    0,    0,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,    0,  143,    0,  143,    0,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,    0,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  142,  143,  143,    0,    0,    0,  142,  142,
  142,    0,    0,  142,    0,    0,    0,  142,    0,    0,
  142,  142,    0,    0,  142,    0,    0,  142,    0,    0,
    0,    0,  142,  142,    0,    0,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
    0,  142,    0,  142,    0,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,    0,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  152,  142,
  142,    0,    0,    0,  152,  152,  152,    0,    0,  152,
    0,    0,    0,  152,    0,    0,  152,  152,    0,    0,
  152,    0,    0,  152,    0,    0,    0,    0,  152,  152,
    0,    0,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,    0,  152,    0,  152,
    0,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,    0,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  146,  152,  152,    0,    0,    0,
  146,  146,  146,    0,    0,  146,    0,    0,    0,  146,
    0,    0,  146,  146,    0,    0,  146,    0,    0,  146,
    0,    0,    0,    0,  146,  146,    0,    0,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,    0,  146,    0,  146,    0,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,    0,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  154,  146,  146,    0,    0,    0,  154,  154,  154,    0,
    0,  154,    0,    0,    0,  154,    0,    0,  154,  154,
    0,    0,  154,    0,    0,  154,    0,    0,    0,    0,
  154,  154,    0,    0,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,    0,  154,
    0,  154,    0,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,    0,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  140,  154,  154,    0,
    0,    0,  140,  140,  140,    0,    0,  140,    0,    0,
    0,  140,    0,    0,  140,  140,    0,    0,  140,    0,
    0,  140,    0,    0,    0,    0,  140,  140,    0,    0,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,    0,  140,    0,  140,    0,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,    0,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  139,  140,  140,    0,    0,    0,  139,  139,
  139,    0,    0,  139,    0,    0,    0,  139,    0,    0,
  139,  139,    0,    0,  139,    0,    0,  139,    0,    0,
    0,    0,  139,  139,    0,    0,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
    0,  139,    0,  139,    0,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,    0,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  243,  139,
  139,    0,    0,    0,  243,    0,  243,    0,    0,  243,
    0,    0,    0,  243,    0,    0,  243,  243,    0,    0,
  243,    0,    0,  243,    0,    0,    0,    0,  243,  243,
    0,    0,  243,  243,  243,    0,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
    0,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,    0,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  155,  243,  243,    0,    0,    0,
  155,  155,  155,    0,    0,  155,    0,    0,    0,  155,
    0,    0,  155,  155,    0,    0,  155,    0,    0,  155,
    0,    0,    0,    0,  155,  155,    0,    0,  155,  155,
  155,  155,  155,  155,  155,  155,  155,    0,  155,    0,
  155,    0,  155,    0,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,    0,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,    0,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  158,  155,  155,    0,    0,    0,  158,  158,  158,    0,
    0,  158,    0,    0,    0,  158,    0,    0,  158,  158,
    0,    0,  158,    0,    0,  158,    0,    0,    0,    0,
  158,  158,    0,    0,  158,    0,  158,  158,  158,    0,
  158,    0,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,    0,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,    0,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,    0,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  168,  158,  158,    0,
    0,    0,  168,  168,  168,    0,    0,  168,    0,    0,
    0,  168,    0,    0,  168,  168,    0,    0,  168,    0,
    0,  168,    0,    0,    0,    0,  168,  168,    0,    0,
    0,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,    0,  168,
    0,    0,  168,  168,  168,  168,  168,  168,    0,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,    0,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  156,  168,  168,    0,    0,    0,  156,  156,
  156,    0,    0,  156,    0,    0,    0,  156,    0,    0,
  156,  156,    0,    0,  156,    0,    0,  156,    0,    0,
    0,    0,  156,  156,    0,    0,  156,  156,  156,  156,
  156,  156,  156,  156,  156,    0,  156,    0,  156,    0,
  156,    0,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,    0,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,    0,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  157,  156,
  156,    0,    0,    0,  157,  157,  157,    0,    0,  157,
    0,    0,    0,  157,    0,    0,  157,  157,    0,    0,
  157,    0,    0,  157,    0,    0,    0,    0,  157,  157,
    0,    0,  157,  157,  157,  157,  157,  157,  157,  157,
  157,    0,  157,    0,  157,    0,  157,    0,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
    0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,    0,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  159,  157,  157,    0,    0,    0,
  159,  159,  159,    0,    0,  159,    0,    0,    0,  159,
    0,    0,  159,  159,    0,    0,  159,    0,    0,  159,
    0,    0,    0,    0,  159,  159,    0,    0,  159,    0,
  159,  159,  159,    0,  159,    0,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,    0,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,    0,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,    0,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  161,  159,  159,    0,    0,    0,  161,  161,  161,    0,
    0,  161,    0,    0,    0,  161,    0,    0,  161,  161,
    0,    0,  161,    0,    0,  161,    0,    0,    0,    0,
  161,  161,    0,    0,  161,    0,  161,  161,  161,    0,
  161,    0,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,    0,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,    0,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,    0,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  162,  161,  161,    0,
    0,    0,  162,  162,  162,    0,    0,  162,    0,    0,
    0,  162,    0,    0,  162,  162,    0,    0,  162,    0,
    0,  162,    0,    0,    0,    0,  162,  162,    0,    0,
  162,    0,  162,  162,  162,    0,  162,    0,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,    0,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,    0,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,    0,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  160,  162,  162,    0,    0,    0,  160,  160,
  160,    0,    0,  160,    0,    0,    0,  160,    0,    0,
  160,  160,    0,    0,  160,    0,    0,  160,    0,    0,
    0,    0,  160,  160,    0,    0,  160,    0,  160,  160,
  160,    0,  160,    0,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,    0,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,    0,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,    0,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  174,  160,
  160,    0,    0,    0,  174,  174,  174,    0,    0,  174,
    0,    0,    0,  174,    0,    0,  174,  174,    0,    0,
  174,    0,    0,  174,    0,    0,    0,    0,  174,  174,
    0,    0,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,    0,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
    0,  174,  174,  174,  174,  174,  174,    0,  174,  174,
  174,  174,  174,    0,  174,    0,  174,    0,  174,    0,
  174,  174,  174,  174,   90,  174,  174,    0,    0,    0,
   90,   90,   90,    0,    0,   90,    0,    0,    0,   90,
    0,    0,   90,   90,    0,    0,   90,    0,    0,   90,
    0,    0,    0,    0,   90,   90,    0,    0,    0,   90,
   90,    0,   90,    0,   90,    0,   90,    0,   90,    0,
   90,    0,   90,    0,   90,    0,    0,   90,   90,   90,
   90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
    0,   90,    0,   90,    0,   90,   90,   90,   90,   90,
   90,   90,   90,   90,    0,   90,    0,   90,    0,    0,
   90,    0,    0,   90,    0,   90,    0,    0,   90,    0,
   90,    0,   90,    0,   90,   90,   90,   90,   90,    0,
   90,    0,   90,    0,   90,   90,   90,   90,   90,   90,
   96,   90,   90,    0,    0,    0,   96,   96,   96,    0,
    0,   96,    0,    0,    0,   96,    0,    0,   96,   96,
    0,    0,   96,    0,    0,   96,    0,    0,    0,    0,
   96,   96,    0,    0,   96,   96,    0,   96,    0,   96,
    0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
    0,   96,   96,    0,    0,    0,   96,    0,    0,    0,
   96,    0,   96,    0,   96,    0,   96,    0,   96,    0,
   96,    0,   96,    0,   96,    0,   96,    0,   96,    0,
   96,    0,   96,    0,   96,   96,    0,   96,   96,    0,
   96,    0,    0,   96,    0,   96,    0,   96,    0,   96,
   96,   96,   96,   96,   96,    0,   96,   96,   96,   96,
   96,   96,   96,  135,   96,   96,    0,   96,   96,  135,
  135,  135,    0,    0,  135,    0,    0,    0,  135,    0,
    0,  135,  135,    0,    0,  135,    0,    0,  135,    0,
    0,    0,    0,  135,  135,    0,    0,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,    0,
  135,  135,  135,    0,  135,    0,  135,    0,  135,    0,
  135,    0,  135,    0,  135,    0,  135,    0,  135,    0,
  135,    0,  135,  135,  135,  135,  135,  135,  135,  135,
    0,  135,  135,  135,  135,    0,    0,  135,    0,  135,
    0,  135,  135,  135,  135,  135,  135,  135,    0,  135,
  135,  135,  135,  135,  135,  135,  135,    0,  135,  132,
  132,  132,    0,    0,  132,    0,    0,    0,  132,    0,
    0,  132,  132,    0,    0,  132,    0,    0,  132,    0,
    0,    0,    0,  132,  132,    0,    0,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,    0,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,    0,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,    0,
  132,  132,  210,    0,  211,    0,  212,    0,  213,    0,
  214,    0,  215,    0,  216,    0,  217,    0,    0,  218,
  219,  220,    0,  221,  222,  223,    0,  224,    0,  225,
    0,  226,    0,  227,    0,  228,    0,  229,    0,  230,
    0,  231,    0,  232,    0,  233,    0,  234,    0,  235,
    0,    0,  236,    0,    0,  237,    0,  238,    0,    0,
  239,    0,  240,    0,  241,    0,    0,    0,  364,  365,
  366,  367,  368,  369,  370,  371,  372,  373,  374,  242,
  376,  377,  378,    0,  380,  381,
  ]
  yycheck := [                         44,
   64,   65,  103,   67,  208,   69,  243,  244,   72,  308,
   74,   75,   76,  153,  294,  257,  271,  275,   63,  256,
  422,  272,  315,  260,  282,  283,  298,  368,   73,   74,
  286,  289,  256,  295,  270,  257,  377,  262,  270,  103,
  366,  266,  270,  366,  270,  301,  301,  272,  374,  301,
  275,  374,  277,  262,  279,  280,  281,  266,  283,  104,
  272,  463,  287,  288,  289,  301,  275,  279,  277,  301,
  363,  280,  281,  301,  346,  301,  348,  349,  287,  288,
  289,  285,  209,  210,  211,  212,  213,  214,  215,  216,
  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  241,   71,  425,  379,  376,  370,
  372,   77,  364,   79,   80,   81,   82,   83,   84,   85,
   86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
   96,   97,   98,   99,  100,  370,  370,  369,  301,  301,
  106,  376,  368,  369,  364,  301,  366,  366,  370,  272,
  300,  371,  275,  208,  272,  464,  279,  275,  256,  282,
  283,  279,  315,  482,  282,  283,  289,  278,  279,  459,
  272,  289,  257,  275,  257,  275,  257,  279,  257,  279,
  282,  283,  282,  283,  503,  275,  257,  289,  293,  289,
  499,  296,  439,  283,   10,   11,  279,  294,  279,  289,
  279,  134,  135,  274,  301,  279,  368,  370,  282,  365,
  363,  367,  368,  278,  257,  299,  363,  282,  371,  303,
  373,  305,  375,  370,  272,  280,  364,  292,  366,  257,
  285,  279,  316,   49,  372,  257,   52,  311,  312,  313,
  314,  315,  316,  366,  366,  319,  320,  370,  322,  352,
  372,  354,  466,  376,  269,  270,  271,  272,  376,  366,
  364,  276,  366,  318,  366,  372,  272,  371,  370,  324,
  370,  307,  366,  320,  376,  311,  376,  324,  372,  326,
  494,  328,  419,  330,  366,  332,  376,  334,  370,  336,
  504,  338,  370,  340,  307,  342,  309,  366,  311,  363,
  313,  368,  262,  372,  351,  366,  266,  273,  274,  275,
  357,  368,  359,  366,  361,  275,  453,  277,  371,  370,
  280,  281,  366,  374,  366,  366,  370,  287,  288,  289,
  371,  378,  366,  370,  381,  382,  370,  374,  449,  450,
    3,    4,  479,  257,  258,  259,  260,  261,  364,  370,
  366,  372,  426,  374,  491,  256,  257,  258,  259,  260,
  261,  370,  263,  372,  265,  374,  267,  268,    3,    4,
  444,  272,  273,  274,  366,  276,  487,  488,  370,  151,
  152,  366,  154,  284,  285,  370,  370,  366,  372,  290,
  291,  446,  293,  366,  468,  296,  297,  298,  257,  363,
  301,  260,  303,  364,  305,  366,  307,  363,  309,  262,
  311,  466,  313,  266,  315,  316,  258,  259,  260,  261,
  257,  257,  275,  260,  277,  263,  264,  280,  281,  330,
  364,  332,  366,  334,  287,  288,  289,  258,  364,  494,
  366,  369,  364,  344,  366,  346,  257,  348,  349,  504,
  351,  352,  364,  354,  366,  356,  357,  364,  359,  366,
  361,  257,  363,  265,  266,  267,  268,  272,  369,  370,
  371,  301,  373,  370,  344,  368,  364,  364,  257,  380,
  257,  370,  383,  256,  257,  258,  259,  260,  261,  283,
  263,  370,  265,  257,  267,  268,  269,  368,  370,  374,
  273,  274,  257,  276,  364,  372,  318,  363,  279,  373,
  264,  284,  285,  363,  318,  272,  368,  290,  291,  257,
  293,  372,  272,  296,  297,  298,  257,  318,  301,  364,
  303,  363,  305,  318,  307,  363,  309,  262,  311,  364,
  313,  266,  315,  316,  272,  363,  370,  364,  374,  364,
  275,  364,  277,  272,  364,  280,  281,  330,  366,  332,
  257,  334,  287,  288,  289,  364,    1,   46,   51,   54,
  150,  344,  283,  346,  207,  348,  349,   66,  351,  352,
  242,  354,  324,  356,  357,  412,  359,  426,  361,  322,
  363,   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,   -1,
  373,   -1,   -1,   -1,   -1,   -1,   -1,  380,   -1,   -1,
  383,  256,  257,  258,  259,  260,  261,   -1,  263,   -1,
  265,   -1,  267,  268,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,   -1,  290,  291,   -1,  293,   -1,
   -1,  296,  297,  298,   -1,   -1,  301,   -1,  303,   -1,
  305,   -1,  307,   -1,  309,  262,  311,   -1,  313,  266,
  315,  316,   -1,   -1,   -1,   -1,   -1,   -1,  275,   -1,
  277,   -1,   -1,  280,  281,  330,   -1,  332,   -1,  334,
  287,  288,  289,   -1,   -1,   -1,   -1,   -1,   -1,  344,
   -1,  346,   -1,  348,  349,   -1,  351,  352,   -1,  354,
   -1,  356,  357,   -1,  359,   -1,  361,   -1,  363,   -1,
   -1,   -1,   -1,   -1,  369,   -1,  371,   -1,  373,  374,
   -1,   -1,   -1,   -1,   -1,  380,   -1,   -1,  383,  256,
  257,  258,  259,  260,  261,   -1,  263,   -1,  265,   -1,
  267,  268,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,  285,   -1,
   -1,   -1,   -1,  290,  291,   -1,  293,   -1,   -1,  296,
  297,  298,   -1,   -1,  301,   -1,  303,   -1,  305,   -1,
  307,   -1,  309,  262,  311,   -1,  313,  266,  315,  316,
   -1,   -1,   -1,   -1,   -1,   -1,  275,   -1,  277,   -1,
   -1,  280,  281,  330,   -1,  332,   -1,  334,  287,  288,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  344,   -1,  346,
   -1,  348,  349,   -1,  351,  352,   -1,  354,   -1,  356,
  357,   -1,  359,   -1,  361,   -1,  363,   -1,   -1,   -1,
   -1,   -1,  369,   -1,  371,   -1,  373,   -1,   -1,   -1,
   -1,   -1,   -1,  380,   -1,   -1,  383,  257,  258,  259,
  260,  261,   -1,  263,   -1,  265,   -1,  267,  268,   -1,
   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,
  290,  291,   -1,  293,   -1,   -1,  296,  297,  298,   -1,
   -1,  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,
  262,  311,   -1,  313,  266,  315,  316,   -1,   -1,   -1,
   -1,   -1,   -1,  275,   -1,  277,   -1,   -1,  280,  281,
  330,   -1,  332,   -1,  334,  287,  288,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  344,   -1,  346,   -1,  348,  349,
   -1,  351,  352,   -1,  354,   -1,  356,  357,   -1,  359,
   -1,  361,   -1,  363,   -1,   -1,   -1,   -1,   -1,  369,
  264,  371,   -1,  373,   -1,   -1,  270,  271,  272,   -1,
  380,  275,   -1,  383,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,  295,   -1,   -1,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,   -1,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  264,  381,  382,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,
  298,  299,  300,   -1,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  264,  381,  382,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,   -1,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  264,  381,
  382,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,  295,
   -1,   -1,  298,  299,  300,   -1,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,   -1,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  264,  381,  382,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,  298,  299,
  300,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,   -1,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,   -1,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  264,  381,  382,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,  295,   -1,   -1,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
   -1,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,   -1,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  264,  381,  382,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,
  298,  299,  300,   -1,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  264,  381,  382,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,   -1,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  264,  381,
  382,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,  295,
   -1,   -1,  298,  299,  300,   -1,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,   -1,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  264,  381,  382,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,  298,  299,
  300,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,   -1,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,   -1,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  264,  381,  382,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,  295,   -1,   -1,  298,  299,  300,   -1,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,   -1,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  264,  381,  382,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,
  298,  299,  300,   -1,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  264,  381,  382,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,   -1,   -1,   -1,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  264,   -1,  381,
  382,   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,  295,   -1,
   -1,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,   -1,  353,   -1,  355,   -1,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,  368,   -1,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  264,  381,  382,   -1,   -1,   -1,   -1,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,
   -1,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,   -1,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,  368,   -1,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,  264,
  381,  382,   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,
  295,   -1,   -1,  298,  299,  300,   -1,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,   -1,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  368,   -1,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,  264,  381,  382,   -1,   -1,
   -1,   -1,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,  298,
  299,  300,   -1,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,   -1,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
   -1,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  264,  381,  382,   -1,   -1,   -1,   -1,  271,  272,
   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,
  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,  294,  295,   -1,   -1,  298,  299,  300,   -1,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,   -1,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,  368,   -1,  370,  371,  372,
  373,  374,  375,  376,  377,  378,  379,  264,  381,  382,
   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,   -1,
   -1,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,   -1,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,  368,   -1,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  264,   -1,  381,  382,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,   -1,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  264,  381,
  382,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,  295,
   -1,   -1,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,   -1,  353,   -1,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,   -1,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  264,  381,  382,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,   -1,  353,   -1,  355,   -1,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,   -1,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  264,  381,  382,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,  295,   -1,   -1,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,   -1,  353,
   -1,  355,   -1,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  264,  381,  382,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,   -1,  353,   -1,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  264,  381,  382,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,   -1,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  264,  381,
  382,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,  295,
   -1,   -1,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,   -1,  353,   -1,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,   -1,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  264,  381,  382,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,   -1,  353,   -1,  355,   -1,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,   -1,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  264,  381,  382,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,  295,   -1,   -1,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,   -1,  353,
   -1,  355,   -1,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  264,  381,  382,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,   -1,  353,   -1,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  264,  381,  382,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,   -1,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  264,  381,
  382,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,  295,
   -1,   -1,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,   -1,  353,   -1,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,   -1,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  264,  381,  382,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,   -1,  353,   -1,  355,   -1,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,   -1,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  264,  381,  382,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,  295,   -1,   -1,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,   -1,  353,
   -1,  355,   -1,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  264,  381,  382,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,   -1,  353,   -1,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  264,  381,  382,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,   -1,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  264,  381,
  382,   -1,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,  295,
   -1,   -1,  298,  299,  300,   -1,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,   -1,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  264,  381,  382,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,  298,  299,
  300,  301,  302,  303,  304,  305,  306,   -1,  308,   -1,
  310,   -1,  312,   -1,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,   -1,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,   -1,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  264,  381,  382,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,  295,   -1,   -1,  298,   -1,  300,  301,  302,   -1,
  304,   -1,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,   -1,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,   -1,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  264,  381,  382,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,
   -1,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,   -1,  347,
   -1,   -1,  350,  351,  352,  353,  354,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  264,  381,  382,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,  301,
  302,  303,  304,  305,  306,   -1,  308,   -1,  310,   -1,
  312,   -1,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  264,  381,
  382,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,  295,
   -1,   -1,  298,  299,  300,  301,  302,  303,  304,  305,
  306,   -1,  308,   -1,  310,   -1,  312,   -1,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
   -1,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,   -1,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  264,  381,  382,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,  298,   -1,
  300,  301,  302,   -1,  304,   -1,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,   -1,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,   -1,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,   -1,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  264,  381,  382,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,  295,   -1,   -1,  298,   -1,  300,  301,  302,   -1,
  304,   -1,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,   -1,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,   -1,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  264,  381,  382,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,
  298,   -1,  300,  301,  302,   -1,  304,   -1,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,   -1,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,   -1,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  368,   -1,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  264,  381,  382,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,  295,   -1,   -1,  298,   -1,  300,  301,
  302,   -1,  304,   -1,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,   -1,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  264,  381,
  382,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,  295,
   -1,   -1,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,   -1,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
   -1,  357,  358,  359,  360,  361,  362,   -1,  364,  365,
  366,  367,  368,   -1,  370,   -1,  372,   -1,  374,   -1,
  376,  377,  378,  379,  264,  381,  382,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,  295,   -1,   -1,   -1,  299,
  300,   -1,  302,   -1,  304,   -1,  306,   -1,  308,   -1,
  310,   -1,  312,   -1,  314,   -1,   -1,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
   -1,  331,   -1,  333,   -1,  335,  336,  337,  338,  339,
  340,  341,  342,  343,   -1,  345,   -1,  347,   -1,   -1,
  350,   -1,   -1,  353,   -1,  355,   -1,   -1,  358,   -1,
  360,   -1,  362,   -1,  364,  365,  366,  367,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,  377,  378,  379,
  264,  381,  382,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,  295,   -1,   -1,  298,  299,   -1,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,  316,   -1,   -1,   -1,  320,   -1,   -1,   -1,
  324,   -1,  326,   -1,  328,   -1,  330,   -1,  332,   -1,
  334,   -1,  336,   -1,  338,   -1,  340,   -1,  342,   -1,
  344,   -1,  346,   -1,  348,  349,   -1,  351,  352,   -1,
  354,   -1,   -1,  357,   -1,  359,   -1,  361,   -1,  363,
  364,  365,  366,  367,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,  264,  378,  379,   -1,  381,  382,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,   -1,
  321,  322,  323,   -1,  325,   -1,  327,   -1,  329,   -1,
  331,   -1,  333,   -1,  335,   -1,  337,   -1,  339,   -1,
  341,   -1,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,  353,  354,  355,   -1,   -1,  358,   -1,  360,
   -1,  362,  363,  364,  365,  366,  367,  368,   -1,  370,
  371,  372,  373,  374,  375,  376,  377,   -1,  379,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,  294,  295,   -1,   -1,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,   -1,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,  368,   -1,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
  381,  382,  300,   -1,  302,   -1,  304,   -1,  306,   -1,
  308,   -1,  310,   -1,  312,   -1,  314,   -1,   -1,  317,
  318,  319,   -1,  321,  322,  323,   -1,  325,   -1,  327,
   -1,  329,   -1,  331,   -1,  333,   -1,  335,   -1,  337,
   -1,  339,   -1,  341,   -1,  343,   -1,  345,   -1,  347,
   -1,   -1,  350,   -1,   -1,  353,   -1,  355,   -1,   -1,
  358,   -1,  360,   -1,  362,   -1,   -1,   -1,  245,  246,
  247,  248,  249,  250,  251,  252,  253,  254,  255,  377,
  257,  258,  259,   -1,  261,  262,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 383
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","CRITICAL",
"DEFAULT","DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","INVOCABLE","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"PROCEDURE","RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","TO","UNTIL",
"WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","SWAP","NMLT","AUGNMLT","REVASSIGN",
"REVSWAP","SLT","AUGSLT","SLE","AUGSLE","NMLE","AUGNMLE","NMEQ","AUGNMEQ","SEQ",
"AUGSEQ","EQUIV","AUGEQUIV","NMGT","AUGNMGT","NMGE","AUGNMGE","SGT","AUGSGT",
"SGE","AUGSGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET",
"BAR","CONCAT","AUGCONCAT","LCONCAT","AUGLCONCAT","TILDE","NMNE","AUGNMNE",
"SNE","AUGSNE","NEQUIV","AUGNEQUIV","LPAREN","RPAREN","PCOLON","COMMA","MCOLON",
"COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR",
"ABSTRACT","PMATCH","PAND","POR","PUNEVAL","PASSNONMATCH","PIMDASSN","PSETCUR",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : proc",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : invocable",
"decl : cl",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial procbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial procbody",
"optsemi :",
"optsemi : SEMICOL",
"cl : classhead SEMICOL END",
"cl : classhead optsemi clocals methods optsemi initiallysection END",
"classhead : CLASS IDENT supers LPAREN carglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON IDENT",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"invocable : INVOCABLE invoclist",
"invoclist : invocop",
"invoclist : invoclist COMMA invocop",
"invocop : IDENT",
"invocop : STRINGLIT",
"invocop : STRINGLIT COLON INTLIT",
"package : PACKAGE lnkfile",
"import : IMPORT implist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"implist : lnkfile",
"implist : implist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"fldlist :",
"fldlist : idlist",
"proc : prochead SEMICOL locals initial procbody END",
"meth : methhead SEMICOL locals initial procbody END",
"meth : ABSTRACT methhead",
"prochead : PROCEDURE IDENT LPAREN arglist RPAREN",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"carglist :",
"carglist : cparmlist",
"carglist : cparmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"varlist : IDENT",
"varlist : IDENT ASSIGN expr1",
"varlist : varlist COMMA IDENT",
"varlist : varlist COMMA IDENT ASSIGN expr1",
"stalist : IDENT",
"stalist : IDENT ASSIGN expr1",
"stalist : stalist COMMA IDENT",
"stalist : stalist COMMA IDENT ASSIGN expr1",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"cparmlist : carg",
"cparmlist : cparmlist COMMA carg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"carg : priv arg",
"priv :",
"priv : PLUS",
"priv : MINUS",
"clocals :",
"clocals : clocals LOCAL varlist optsemi",
"locals :",
"locals : locals LOCAL varlist SEMICOL",
"locals : locals STATIC stalist SEMICOL",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"procbody :",
"procbody : nexpr SEMICOL procbody",
"nexpr :",
"nexpr : expr",
"expr : expr1a",
"expr : expr AND expr1a",
"expr1a : expr1",
"expr1a : expr1a QMARK expr1",
"expr1 : expr2a",
"expr1 : expr2a SWAP expr1",
"expr1 : expr2a ASSIGN expr1",
"expr1 : expr2a REVSWAP expr1",
"expr1 : expr2a REVASSIGN expr1",
"expr1 : expr2a AUGCONCAT expr1",
"expr1 : expr2a AUGLCONCAT expr1",
"expr1 : expr2a AUGDIFF expr1",
"expr1 : expr2a AUGUNION expr1",
"expr1 : expr2a AUGPLUS expr1",
"expr1 : expr2a AUGMINUS expr1",
"expr1 : expr2a AUGSTAR expr1",
"expr1 : expr2a AUGINTER expr1",
"expr1 : expr2a AUGSLASH expr1",
"expr1 : expr2a AUGMOD expr1",
"expr1 : expr2a AUGCARET expr1",
"expr1 : expr2a AUGNMEQ expr1",
"expr1 : expr2a AUGEQUIV expr1",
"expr1 : expr2a AUGNMGE expr1",
"expr1 : expr2a AUGNMGT expr1",
"expr1 : expr2a AUGNMLE expr1",
"expr1 : expr2a AUGNMLT expr1",
"expr1 : expr2a AUGNMNE expr1",
"expr1 : expr2a AUGNEQUIV expr1",
"expr1 : expr2a AUGSEQ expr1",
"expr1 : expr2a AUGSGE expr1",
"expr1 : expr2a AUGSGT expr1",
"expr1 : expr2a AUGSLE expr1",
"expr1 : expr2a AUGSLT expr1",
"expr1 : expr2a AUGSNE expr1",
"expr1 : expr2a AUGQMARK expr1",
"expr1 : expr2a AUGAND expr1",
"expr1 : expr2a AUGAT expr1",
"expr2a : expr2",
"expr2a : expr2a PMATCH expr2",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr2 : expr2 POR expr3",
"expr3 : expr4",
"expr3 : expr4 PAND expr3",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 PIMDASSN expr5",
"expr4 : expr4 PASSNONMATCH expr5",
"expr4 : expr4 SEQ expr5",
"expr4 : expr4 SGE expr5",
"expr4 : expr4 SGT expr5",
"expr4 : expr4 SLE expr5",
"expr4 : expr4 SLT expr5",
"expr4 : expr4 SNE expr5",
"expr4 : expr4 NMEQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr4 : expr4 EQUIV expr5",
"expr4 : expr4 NEQUIV expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr5 : expr5 LCONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : expr9 CARET expr8",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : LCONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NMEQ expr10",
"expr10 : NMNE expr10",
"expr10 : SEQ expr10",
"expr10 : SNE expr10",
"expr10 : EQUIV expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : NEQUIV expr10",
"expr10 : BACKSLASH expr10",
"expr10 : PSETCUR expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : PUNEVAL",
"expr11 : CREATE expr",
"expr11 : CRITICAL expr2a COLON expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK caselist RBRACK",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : packageref",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"proc : prochead error procbody END",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 736 "unigram.y"

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
   local rhs

   if /iconc then
      return nd
   if not (*nd.children = 3) then
      return nd
   rhs := nd.children[3]
   if (not(type(rhs) == "treenode")) then
      return nd
   if (not(rhs.label == "invoke")) then
      return nd
   rhs := node("Paren", "(", rhs, ")")
   nd.children[3] := rhs
   return nd
end

procedure FieldRef(lhs, dot, rhs)
   if /iconc | (type(lhs) ~== "treenode") then
      return Field(lhs, dot, rhs)

   if (lhs.label == "invoke") then {
      tmpcount +:= 1;
      return node("Paren", "(",
         node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
         node("invoke", Field("__" || tmpcount, ".", rhs))
         );
      }
   return Field(lhs, dot, rhs)
end

procedure InvocationNode(args[])
   tmpcount +:= 1
   if type(args[1]) == "token" & (args[1].tok = IDENT) then {
       n1 := args[1]
       lparen := copy(args[1])
       lparen.tok := LPAREN
       lparen.s := "("
   }
   else {
       n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
       if lparen := Clone1stToken(args[1]) then {
	   lparen.tok := LPAREN
	   lparen.s := "("
       }
       else lparen := "("
   }
   if *args = 6 then {
       return node("Paren",lparen,node("invoke",
		    # iconc uses no __m business
		   (if /iconc then Field(Field(n1, ".", "__m"), "." , args[3])
			      else Field(n1, ".", args[3])),

	     args[4], node("exprlist",
	     if n1 === args[1] then args[1] else "__"||tmpcount,
	     if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
	     ,")")
      }
   else {
      if /iconc then
	 return  node("Paren",lparen,node("invoke",Field(Field(
			  Field(n1,".", "__m"),
			 "." , args[3]),".",args[5]),
		       args[6], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
		      ,")")
      else return SuperMethodInvok ! args
   }
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
   if /iconc then
      return node("invoke", expr11, lparen, args, rparen)

   if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
      return node("invoke", expr11, lparen, args, rparen)
      }

   if (type(expr11) == "treenode") then {
      case expr11.label of {
         "field": {
            #
            # need to examine lhs of field-ref to determine
            # whether we need to decompose the expr11 further...
            #
            if (type(expr11.children[1]) == "treenode") then {
               tmpcount +:= 1;
               n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
                  expr11.children[1]), ")")
               return node("exprlist", "(", n1, "&",
                  node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
                  lparen, args, rparen), ")")
               }
            else {
               return node("invoke", expr11, lparen, args, rparen)
               }
            }
         default: {
            return node("invoke", expr11, lparen, args, rparen)
            }
         }
      }
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
   tmpcount +:= 1
   if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
      n1 := args[1]
      lparen := copy(args[1])
      lparen.tok := LPAREN
      lparen.s := "("
      }
   else {
      n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
      if lparen := Clone1stToken(args[1]) then {
         lparen.tok := LPAREN
         lparen.s := "("
         }
      else
         lparen := "("
      }

   args[3].s := mangle_class_sym(args[3].s)
   args[3].s ||:= "__oprec"
   return node("exprlist", "(", n1, ")", " & ",
      node("Paren", lparen, node("invoke",
      Field(args[3], ".", args[5]),
      args[6], node("exprlist",
      if n1 === args[1] then args[1] else "__" || tmpcount,
      if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
      ")", ))
end

procedure isloco(node, s)
case type(node) of {
   "treenode": {
      if *node.children > 0 then return isloco(!node.children, s)
      }
   "token" : {
      if (node.tok = IDENT) & (node.s == s) then return
      }
   }
end

procedure buildtab_from_cclause(n, args)
   if type(n) ~== "treenode" then stop("bad table literal")
   comma := copy(n.children[2])
   comma.tok := COMMA
   comma.s := ","
   case n.label of {
     "cclause0": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	}
     "cclause1": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	push(args.children, comma)
	push(args.children, n.children[1])
	}
   }
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
   args := node("elst1")
   write("I am a tablelit, cl is ", image(cl.label))
   while type(cl)=="treenode" & cl.label == "Caselist" do {
      buildtab_from_cclause(cl.children[3], args)
      cl := cl.children[1]
      }
   buildtab_from_cclause(cl, args)
   tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
   lp := copy(lb); lp.tok := LPAREN; lp.s := "("
   rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
   return node("invoke", tabid, lp, args, rp)
end

#
# A record type for recording errors for later reporting e.g. within an IDE,
# or to stderr.
#
record ParseError ( lineNumber, errorMessage )
#line 2405 "unigram.icn"
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    action[yyn]()          # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 278 "unigram.y"
 Progend(valstk[2]);
end

procedure action_2()
#line 280 "unigram.y"
 yyval := EmptyNode 
end

procedure action_3()
#line 281 "unigram.y"

	   if yynerrs = 0 then iwrites(&errout,".");
	   yyval := node("decls", valstk[2], valstk[1])
	      
end

procedure action_12()
#line 296 "unigram.y"
 yyval := EmptyNode 
end

procedure action_13()
#line 297 "unigram.y"

	   yyval := Method( , , , , , valstk[5], "initially", EmptyNode, "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_14()
#line 303 "unigram.y"

	   yyval := Method( , , , , , valstk[8], "initially", valstk[6], "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_15()
#line 311 "unigram.y"
 yyval := EmptyNode 
end

procedure action_17()
#line 314 "unigram.y"

   yyval := valstk[3]
   yyval.methods := methodstaque(&null, yyval)
   
end

procedure action_18()
#line 318 "unigram.y"

   yyval := valstk[7]
   if valstk[5] ~=== EmptyNode then {
      if valstk[5].label == "locals3" then
         yyerror("static class variables not yet implemented")
      # splice in any class locals into the field list
      yyval.fields.traverse(valstk[5])
      }
   if valstk[2] ~=== EmptyNode then
      valstk[4] := node("methods", valstk[4], valstk[2])
   yyval.methods := methodstaque(valstk[4], yyval)
   
end

procedure action_19()
#line 331 "unigram.y"

   yyval := Class()
   yyval.tag := valstk[6]
   yyval.unmangled_name := valstk[5].s
   yyval.name := package_mangled_symbol(valstk[5].s)
   if proc(yyval.name, 0) then
      warning("Warning: class "|| yyval.name ||" overrides the built-in function")
   else if \ (foobar := classes.lookup(yyval.name)) then {
      yyerror("redeclaration of class " || yyval.name)
      yynerrs +:= 1
      }
   else
      classes.insert(yyval, yyval.name)

   yyval.supers_node := valstk[4]
   yyval.fields := valstk[2]
   yyval.lptoken := valstk[3]
   yyval.rptoken := valstk[1]
   
end

procedure action_20()
#line 351 "unigram.y"
 yyval := EmptyNode 
end

procedure action_21()
#line 352 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_22()
#line 353 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_23()
#line 356 "unigram.y"
 yyval := node("packageref", valstk[3],valstk[2],valstk[1]) 
end

procedure action_24()
#line 357 "unigram.y"
 yyval := node("packageref", valstk[2],valstk[1]) 
end

procedure action_25()
#line 360 "unigram.y"
 yyval := EmptyNode 
end

procedure action_26()
#line 361 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_27()
#line 362 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_28()
#line 363 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_29()
#line 366 "unigram.y"
 yyval := node("invocable", valstk[2], valstk[1]);
end

procedure action_31()
#line 369 "unigram.y"
 yyval := node("invoclist", valstk[3],valstk[2],valstk[1]);
end

procedure action_34()
#line 373 "unigram.y"
yyval := node("invocop3", valstk[3],valstk[2],valstk[1]);
end

procedure action_35()
#line 375 "unigram.y"

   if \thePackage then {
      if not (thePackage.name == valstk[1].s) then {
         yyerror(fName || " cannot be in both package "|| thePackage.name ||
            " and package " || valstk[1].s)
         yyval := EmptyNode
         }
      else { # this branch allowed for -C / iconc
         thePackage.insertfname(fName)
         thePackage.add_imported()
         }
      }
   else {
      yyval := node("package", valstk[2],valstk[1]);
      thePackage := Package(valstk[1].s)
      thePackage.insertfname(fName)
      thePackage.add_imported()
      }
   
end

procedure action_36()
#line 395 "unigram.y"

   yyval := node("import", valstk[2],valstk[1]," ")
   import_class(valstk[1])
   
end

procedure action_37()
#line 400 "unigram.y"
 yyval := node("link", valstk[2],valstk[1]," "); 
end

procedure action_39()
#line 403 "unigram.y"
 yyval := node("lnklist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_41()
#line 406 "unigram.y"
 yyval := node("implist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_44()
#line 411 "unigram.y"
 yyval := node("global", valstk[2],valstk[1]) 
end

procedure action_45()
#line 413 "unigram.y"

		yyval := declaration(valstk[4],valstk[2],valstk[5],valstk[3],valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_46()
#line 419 "unigram.y"
 yyval := EmptyNode 
end

procedure action_48()
#line 422 "unigram.y"

#		body_scopeck(valstk[2])
		yyval := node("proc", valstk[6],";",valstk[4],valstk[3],valstk[2],valstk[1])
		
end

procedure action_49()
#line 427 "unigram.y"

		yyval := valstk[6]
		yyval.locals := valstk[4]
		yyval.initl := valstk[3]
		yyval.procbody := valstk[2]
		
end

procedure action_50()
#line 433 "unigram.y"

		yyval := valstk[1]
                yyval.abstract_flag := 1
		
end

procedure action_51()
#line 438 "unigram.y"

		yyval := declaration(valstk[4], valstk[2], valstk[5], valstk[3], valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_52()
#line 444 "unigram.y"

		yyval := Method( , , , , , valstk[5], valstk[4].s, valstk[2], valstk[5].s, valstk[3], valstk[1])
		
end

procedure action_53()
#line 449 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_54()
#line 450 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_55()
#line 451 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_56()
#line 453 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_57()
#line 454 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_58()
#line 455 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_60()
#line 459 "unigram.y"
 yyval := node("idlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_62()
#line 462 "unigram.y"
 yyval := node("varlist2", valstk[3], valstk[2], valstk[1])
end

procedure action_63()
#line 463 "unigram.y"
 yyval := node("varlist3", valstk[3], valstk[2], valstk[1])
end

procedure action_64()
#line 464 "unigram.y"
 yyval := node("varlist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_66()
#line 467 "unigram.y"
 yyval := node("stalist2", valstk[3], valstk[2], valstk[1])
end

procedure action_67()
#line 468 "unigram.y"
 yyval := node("stalist3", valstk[3], valstk[2], valstk[1])
end

procedure action_68()
#line 469 "unigram.y"
 yyval := node("stalist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_70()
#line 472 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_72()
#line 475 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_74()
#line 478 "unigram.y"
 yyval := node("arg2", valstk[3], valstk[2], valstk[1]) 
end

procedure action_75()
#line 479 "unigram.y"
 yyval := node("arg3", valstk[3], valstk[2], valstk[1]) 
end

procedure action_76()
#line 480 "unigram.y"
 yyval := node("arg4", valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]) 
end

procedure action_77()
#line 482 "unigram.y"
 yyval := valstk[1] 
end

procedure action_78()
#line 484 "unigram.y"
 yyval := EmptyNode;
end

procedure action_81()
#line 488 "unigram.y"
 yyval := EmptyNode;
end

procedure action_82()
#line 489 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_83()
#line 491 "unigram.y"
 yyval := EmptyNode;
end

procedure action_84()
#line 492 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_85()
#line 493 "unigram.y"
 yyval := node("locals3", valstk[4],valstk[3],valstk[2],";");
end

procedure action_86()
#line 495 "unigram.y"
 yyval := EmptyNode 
end

procedure action_87()
#line 496 "unigram.y"

	   yyval := node("initial", valstk[3], valstk[2],";")
	      
end

procedure action_88()
#line 500 "unigram.y"
 yyval := EmptyNode 
end

procedure action_89()
#line 501 "unigram.y"
 yyval := node("procbody", valstk[3],";",valstk[1]);
end

procedure action_90()
#line 503 "unigram.y"
 yyval := EmptyNode 
end

procedure action_93()
#line 507 "unigram.y"
 yyval := node("and", valstk[3],valstk[2],valstk[1]) 
end

procedure action_95()
#line 510 "unigram.y"
 yyval := node("binques", valstk[3],valstk[2],valstk[1]);
end

procedure action_97()
#line 513 "unigram.y"
 yyval := node("swap", valstk[3],valstk[2],valstk[1]);
end

procedure action_98()
#line 514 "unigram.y"
 
          yyval := parenthesize_assign(node("assign",valstk[3],valstk[2],valstk[1]));
          
end

procedure action_99()
#line 517 "unigram.y"
 yyval := node("revswap", valstk[3],valstk[2],valstk[1]);
end

procedure action_100()
#line 518 "unigram.y"
 yyval := node("revasgn", valstk[3],valstk[2],valstk[1]);
end

procedure action_101()
#line 519 "unigram.y"
 yyval := node("augcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_102()
#line 520 "unigram.y"
 yyval := node("auglcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_103()
#line 521 "unigram.y"
 yyval := node("Bdiffa", valstk[3],valstk[2],valstk[1]);
end

procedure action_104()
#line 522 "unigram.y"
 yyval := node("Buniona", valstk[3],valstk[2],valstk[1]);
end

procedure action_105()
#line 523 "unigram.y"
 yyval := node("Bplusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_106()
#line 524 "unigram.y"
 yyval := node("Bminusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_107()
#line 525 "unigram.y"
 yyval := node("Bstara", valstk[3],valstk[2],valstk[1]);
end

procedure action_108()
#line 526 "unigram.y"
 yyval := node("Bintera", valstk[3],valstk[2],valstk[1]);
end

procedure action_109()
#line 527 "unigram.y"
 yyval := node("Bslasha", valstk[3],valstk[2],valstk[1]);
end

procedure action_110()
#line 528 "unigram.y"
 yyval := node("Bmoda", valstk[3],valstk[2],valstk[1]);
end

procedure action_111()
#line 529 "unigram.y"
 yyval := node("Bcareta", valstk[3],valstk[2],valstk[1]);
end

procedure action_112()
#line 530 "unigram.y"
 yyval := node("Baugeq", valstk[3],valstk[2],valstk[1]);
end

procedure action_113()
#line 531 "unigram.y"
 yyval := node("Baugeqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_114()
#line 532 "unigram.y"
 yyval := node("Baugge", valstk[3],valstk[2],valstk[1]);
end

procedure action_115()
#line 533 "unigram.y"
 yyval := node("Bauggt", valstk[3],valstk[2],valstk[1]);
end

procedure action_116()
#line 534 "unigram.y"
 yyval := node("Baugle", valstk[3],valstk[2],valstk[1]);
end

procedure action_117()
#line 535 "unigram.y"
 yyval := node("Bauglt", valstk[3],valstk[2],valstk[1]);
end

procedure action_118()
#line 536 "unigram.y"
 yyval := node("Baugne", valstk[3],valstk[2],valstk[1]);
end

procedure action_119()
#line 537 "unigram.y"
 yyval := node("Baugneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_120()
#line 538 "unigram.y"
 yyval := node("Baugseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_121()
#line 539 "unigram.y"
 yyval := node("Baugsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_122()
#line 540 "unigram.y"
 yyval := node("Baugsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_123()
#line 541 "unigram.y"
 yyval := node("Baugsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_124()
#line 542 "unigram.y"
 yyval := node("Baugslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_125()
#line 543 "unigram.y"
 yyval := node("Baugsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_126()
#line 544 "unigram.y"
 yyval := node("Baugques", valstk[3],valstk[2],valstk[1]);
end

procedure action_127()
#line 545 "unigram.y"
 yyval := node("Baugamper", valstk[3],valstk[2],valstk[1]);
end

procedure action_128()
#line 546 "unigram.y"
 yyval := node("Baugact", valstk[3],valstk[2],valstk[1]);
end

procedure action_130()
#line 549 "unigram.y"
 yyval := node("BPmatch", valstk[3],valstk[2],valstk[1]);
end

procedure action_132()
#line 552 "unigram.y"
 yyval := node("to", valstk[3],valstk[2],valstk[1]);
end

procedure action_133()
#line 553 "unigram.y"
 yyval := node("toby", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_134()
#line 554 "unigram.y"
 yyval := node("BPor", valstk[3],valstk[2],valstk[1]); 
end

procedure action_136()
#line 557 "unigram.y"
 yyval := node("BPand", valstk[3],valstk[2],valstk[1]); 
end

procedure action_137()
#line 558 "unigram.y"
yyval := node(BAR, valstk[3],valstk[2],valstk[1]);
end

procedure action_139()
#line 561 "unigram.y"
 yyval := node("BPiam", valstk[3],valstk[2],valstk[1]);
end

procedure action_140()
#line 562 "unigram.y"
 yyval := node("BPaom", valstk[3],valstk[2],valstk[1]);
end

procedure action_141()
#line 563 "unigram.y"
 yyval := node("Bseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_142()
#line 564 "unigram.y"
 yyval := node("Bsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_143()
#line 565 "unigram.y"
 yyval := node("Bsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_144()
#line 566 "unigram.y"
 yyval := node("Bsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_145()
#line 567 "unigram.y"
 yyval := node("Bslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_146()
#line 568 "unigram.y"
 yyval := node("Bsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_147()
#line 569 "unigram.y"
 yyval := node("Beq", valstk[3],valstk[2],valstk[1]);
end

procedure action_148()
#line 570 "unigram.y"
 yyval := node("Bge", valstk[3],valstk[2],valstk[1]);
end

procedure action_149()
#line 571 "unigram.y"
 yyval := node("Bgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_150()
#line 572 "unigram.y"
 yyval := node("Ble", valstk[3],valstk[2],valstk[1]);
end

procedure action_151()
#line 573 "unigram.y"
 yyval := node("Blt", valstk[3],valstk[2],valstk[1]);
end

procedure action_152()
#line 574 "unigram.y"
 yyval := node("Bne", valstk[3],valstk[2],valstk[1]);
end

procedure action_153()
#line 575 "unigram.y"
 yyval := node("Beqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_154()
#line 576 "unigram.y"
 yyval := node("Bneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_156()
#line 579 "unigram.y"
 yyval := node("Bcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_157()
#line 580 "unigram.y"
 yyval := node("Blcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_159()
#line 587 "unigram.y"
 yyval := node("Bplus", valstk[3],valstk[2],valstk[1]);
end

procedure action_160()
#line 588 "unigram.y"
 yyval := node("Bdiff", valstk[3],valstk[2],valstk[1]);
end

procedure action_161()
#line 589 "unigram.y"
 yyval := node("Bunion", valstk[3],valstk[2],valstk[1]);
end

procedure action_162()
#line 590 "unigram.y"
 yyval := node("Bminus", valstk[3],valstk[2],valstk[1]);
end

procedure action_164()
#line 593 "unigram.y"
 yyval := node("Bstar", valstk[3],valstk[2],valstk[1]);
end

procedure action_165()
#line 594 "unigram.y"
 yyval := node("Binter", valstk[3],valstk[2],valstk[1]);
end

procedure action_166()
#line 595 "unigram.y"
 yyval := node("Bslash", valstk[3],valstk[2],valstk[1]);
end

procedure action_167()
#line 596 "unigram.y"
 yyval := node("Bmod", valstk[3],valstk[2],valstk[1]);
end

procedure action_169()
#line 599 "unigram.y"
 yyval := node("Bcaret", valstk[3],valstk[2],valstk[1]);
end

procedure action_171()
#line 602 "unigram.y"
 yyval := node("limit", valstk[3],valstk[2],valstk[1]);
end

procedure action_172()
#line 603 "unigram.y"
 yyval := node("at", valstk[3],valstk[2],valstk[1]) 
end

procedure action_173()
#line 604 "unigram.y"
 yyval := node("apply", valstk[3],valstk[2],valstk[1]);
end

procedure action_175()
#line 607 "unigram.y"
 yyval := node("uat", valstk[2],valstk[1]);
end

procedure action_176()
#line 608 "unigram.y"
 yyval := node("unot", valstk[2],valstk[1]);
end

procedure action_177()
#line 609 "unigram.y"
 yyval := node("ubar", valstk[2],valstk[1]);
end

procedure action_178()
#line 610 "unigram.y"
 yyval := node("uconcat", valstk[2],valstk[1]);
end

procedure action_179()
#line 611 "unigram.y"
 yyval := node("ulconcat", valstk[2],valstk[1]);
end

procedure action_180()
#line 612 "unigram.y"
 yyval := node("udot", valstk[2],valstk[1]);
end

procedure action_181()
#line 613 "unigram.y"
 yyval := node("ubang", valstk[2],valstk[1]);
end

procedure action_182()
#line 614 "unigram.y"
 yyval := node("udiff", valstk[2],valstk[1]);
end

procedure action_183()
#line 615 "unigram.y"
 yyval := node("uplus", valstk[2],valstk[1]);
end

procedure action_184()
#line 616 "unigram.y"
 yyval := node("ustar", valstk[2],valstk[1]);
end

procedure action_185()
#line 617 "unigram.y"
 yyval := node("uslash", valstk[2],valstk[1]);
end

procedure action_186()
#line 618 "unigram.y"
 yyval := node("ucaret", valstk[2],valstk[1]);
end

procedure action_187()
#line 619 "unigram.y"
 yyval := node("uinter", valstk[2],valstk[1]);
end

procedure action_188()
#line 620 "unigram.y"
 yyval := node("utilde", valstk[2],valstk[1]);
end

procedure action_189()
#line 621 "unigram.y"
 yyval := node("uminus", valstk[2],valstk[1]);
end

procedure action_190()
#line 622 "unigram.y"
 yyval := node("unumeq", valstk[2],valstk[1]);
end

procedure action_191()
#line 623 "unigram.y"
 yyval := node("unumne", valstk[2],valstk[1]);
end

procedure action_192()
#line 624 "unigram.y"
 yyval := node("ulexeq", valstk[2],valstk[1]);
end

procedure action_193()
#line 625 "unigram.y"
 yyval := node("ulexne", valstk[2],valstk[1]);
end

procedure action_194()
#line 626 "unigram.y"
 yyval := node("uequiv", valstk[2],valstk[1]);
end

procedure action_195()
#line 627 "unigram.y"
 yyval := node("uunion", valstk[2],valstk[1]);
end

procedure action_196()
#line 628 "unigram.y"
 yyval := node("uqmark", valstk[2],valstk[1]);
end

procedure action_197()
#line 629 "unigram.y"
 yyval := node("unotequiv", valstk[2],valstk[1]);
end

procedure action_198()
#line 630 "unigram.y"
 yyval := node("ubackslash", valstk[2],valstk[1]);
end

procedure action_199()
#line 631 "unigram.y"
 yyval := node("upsetcur", valstk[2],valstk[1]);
end

procedure action_209()
#line 642 "unigram.y"
 yyval := node("BPuneval", valstk[1]);
end

procedure action_210()
#line 643 "unigram.y"
 yyval := node("create", valstk[2],valstk[1]);
end

procedure action_211()
#line 644 "unigram.y"
 yyval := node("critical", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_213()
#line 646 "unigram.y"
 yyval := node("Next", valstk[1]);
end

procedure action_214()
#line 647 "unigram.y"
 yyval := node("Break", valstk[2],valstk[1]);
end

procedure action_215()
#line 648 "unigram.y"
 yyval := node("Paren", valstk[3],valstk[2],valstk[1]);
end

procedure action_216()
#line 649 "unigram.y"
 yyval := node("Brace", valstk[3],valstk[2],valstk[1]);
end

procedure action_217()
#line 650 "unigram.y"
 yyval := tablelit(valstk[3],valstk[2],valstk[1]);
end

procedure action_218()
#line 651 "unigram.y"
 yyval := node("Brack", valstk[3],valstk[2],valstk[1]);
end

procedure action_219()
#line 652 "unigram.y"
 yyval := node("Subscript", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_220()
#line 653 "unigram.y"
 yyval := node("Pdco0", valstk[3],valstk[2],valstk[1]);
end

procedure action_221()
#line 654 "unigram.y"
 yyval := node("Pdco1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_222()
#line 655 "unigram.y"

           yyval := SimpleInvocation(valstk[4],valstk[3],valstk[2],valstk[1]);
      
end

procedure action_223()
#line 658 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_224()
#line 661 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_225()
#line 664 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_226()
#line 667 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_227()
#line 670 "unigram.y"

           yyval := FieldRef(valstk[3],valstk[2],valstk[1]);
      
end

procedure action_229()
#line 674 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]) 
end

procedure action_230()
#line 675 "unigram.y"
 yyval := node("keyword",valstk[2],valstk[1]) 
end

procedure action_231()
#line 676 "unigram.y"
 yyval := Keyword(valstk[2],valstk[1]) 
end

procedure action_232()
#line 678 "unigram.y"
 yyval := node("While0", valstk[2],valstk[1]);
end

procedure action_233()
#line 679 "unigram.y"
 yyval := node("While1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_234()
#line 681 "unigram.y"
 yyval := node("until", valstk[2],valstk[1]);
end

procedure action_235()
#line 682 "unigram.y"
 yyval := node("until1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_236()
#line 684 "unigram.y"
 yyval := node("every", valstk[2],valstk[1]);
end

procedure action_237()
#line 685 "unigram.y"
 yyval := node("every1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_238()
#line 687 "unigram.y"
 yyval := node("repeat", valstk[2],valstk[1]);
end

procedure action_240()
#line 690 "unigram.y"
 yyval := node("return", valstk[2], valstk[1]);
end

procedure action_241()
#line 691 "unigram.y"
 yyval := node("Suspend0", valstk[2],valstk[1]);
end

procedure action_242()
#line 692 "unigram.y"
 yyval := node("Suspend1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_243()
#line 694 "unigram.y"
 yyval := node("If0", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_244()
#line 695 "unigram.y"
 yyval := node("If1", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_245()
#line 697 "unigram.y"
 yyval := node("Case", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_247()
#line 700 "unigram.y"
 yyval := node("Caselist", valstk[3],";",valstk[1]);
end

procedure action_248()
#line 702 "unigram.y"
 yyval := node("cclause0", valstk[3],valstk[2],valstk[1]);
end

procedure action_249()
#line 703 "unigram.y"
 yyval := node("cclause1", valstk[3],valstk[2],valstk[1]);
end

procedure action_251()
#line 706 "unigram.y"

	   if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
	      yyval := valstk[3]; put(yyval.children, valstk[2], valstk[1])
	      }
	   else
	      yyval := node("elst1", valstk[3],valstk[2],valstk[1])
	   
end

procedure action_252()
#line 714 "unigram.y"
 yyval := node("pdcolist0", valstk[1]) 
end

procedure action_253()
#line 715 "unigram.y"
 yyval := node("pdcolist1", valstk[3],valstk[2],valstk[1]); 
end

procedure action_258()
#line 722 "unigram.y"
 yyval := node("section", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_263()
#line 729 "unigram.y"
 yyval := node("compound", valstk[3],";",valstk[1]);
end

procedure action_265()
#line 732 "unigram.y"
 yyval := node("error", valstk[4],valstk[2],valstk[1]); 
end

procedure action_266()
#line 733 "unigram.y"
 yyval := node("error"); 
end

#line 3694 "unigram.icn"
