### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 150 "unigram.y"

procedure Keyword(x1,x2)
   static keywords
   initial {
      keywords := set(["allocated","clock","collections","column","current",
		       "date","now","dateline","digits","e","error",
		       "errornumber","errortext","errorvalue","errout","fail",
		       "eventcode","eventsource","eventvalue","features",
		       "file","host","input","lcase","letters","level",
		       "line","main","null","output","phi","pi","pick","pos",
		       "progname","random","regions","source","storage",
		       "subject","time","trace","dump","ucase","version",
		       "errno","window","col","row","x","y","interval",
		       "control","shift","meta","lpress","mpress","rpress",
		       "lrelease","mrelease","rrelease","ldrag","mdrag",
		       "rdrag","resize","ascii","cset"])
      }

   # verify that x2 is a valid keyword
   if not member(keywords, x2.s) then
      yyerror("&" || x2.s ||" is not a valid keyword!")

   return node("keyword",x1,x2)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
initial { set_of_all_fields := set(); dummyrecno := 1 }

   if \iconc then {
      if type(x3) == "token" then {
	 insert(set_of_all_fields, x3.s)
#	 write(&errout, "field ", image(x3.s))
	 }
      }

   return node("field",x1,x2,x3)
end

procedure Clone1stToken(n)
   case type(n) of {
      "token": return copy(n)
      "treenode": {
	 return Clone1stToken(!n.children)
	 }
      }
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
   
   if *\parsingErrors > 0 then {
      every pe := !parsingErrors do {
	 write(&errout, pe.errorMessage)
	 }
      istop(*\parsingErrors || " error" ||
	    (if *\parsingErrors > 1 then "s" else ""))
      }

   if /x1 then istop("error: empty file")

   package_level_syms := set()
   package_level_class_syms := set()
   set_package_level_syms(x1)
   scopecheck_superclass_decs(x1)

   outline := 1
   outcol := 1
   #
   # export specifications for each class
   #
   native := set()
   every cl := classes.foreach_t() do {
      cl.WriteSpec()
      insert(native, cl)
      }
   #
   # import class specifications, transitively
   #
   repeat {
      added := 0
      every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
         if /classes.lookup(super) then {
	    added := 1
	    readspec(super)
	    cl := classes.lookup(super)
	    if /cl then halt("can't inherit class '",super,"'")
	    iwrite("  inherits ", super, " from ", cl.linkfile)
	    writelink(cl.dir, cl.linkfile)
            }
       }
    if added = 0 then break
  }
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
  every (classes.foreach_t()).transitive_closure()
  every (classes.foreach_t()).resolve()

  scopecheck_bodies(x1)

   if \thePackage then {
      every thePackage.insertsym(!package_level_syms)
      }

  if \iconc then  {
     iconc_prep_parse_tree(&null, x1)
     }

  #
  # generate output
  #
#  iwrite("Generating code:")
   yyprint(x1)
   write(yyout)

$ifndef NoPatternIntegration
   # generate invocable declarations for identifiers in unevaluated exprs
   if (*\list_of_invocables)>0 then {
      writes(yyout, "invocable ")
      every temp := list_of_invocables[i := 1 to *list_of_invocables] do {
	 writes(yyout, image(temp))
	 if i < *list_of_invocables then writes(yyout, ",")
         }
      write(yyout)
      }
$endif					# NoPatternIntegration

   if \iconc & (type(set_of_all_fields) == "set") &
	(*set_of_all_fields > 0) then {
	arandomfield := !set_of_all_fields
      writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
      delete(set_of_all_fields, arandomfield)
      every writes(yyout, ",", !set_of_all_fields)
      write(yyout, ")")
      dummyrecno +:= 1
      set_of_all_fields := set()
      }
end
#line 146 "unigram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define iconINITIAL 278
$define INITIALLY 279
$define INVOCABLE 280
$define LINK 281
$define LOCAL 282
$define METHOD 283
$define NEXT 284
$define NOT 285
$define OF 286
$define PACKAGE 287
$define PROCEDURE 288
$define RECORD 289
$define REPEAT 290
$define RETURN 291
$define STATIC 292
$define SUSPEND 293
$define THEN 294
$define THREAD 295
$define TO 296
$define UNTIL 297
$define WHILE 298
$define BANG 299
$define MOD 300
$define AUGMOD 301
$define AND 302
$define AUGAND 303
$define STAR 304
$define AUGSTAR 305
$define INTER 306
$define AUGINTER 307
$define PLUS 308
$define AUGPLUS 309
$define UNION 310
$define AUGUNION 311
$define MINUS 312
$define AUGMINUS 313
$define DIFF 314
$define AUGDIFF 315
$define DOT 316
$define SLASH 317
$define AUGSLASH 318
$define ASSIGN 319
$define SWAP 320
$define NMLT 321
$define AUGNMLT 322
$define REVASSIGN 323
$define REVSWAP 324
$define SLT 325
$define AUGSLT 326
$define SLE 327
$define AUGSLE 328
$define NMLE 329
$define AUGNMLE 330
$define NMEQ 331
$define AUGNMEQ 332
$define SEQ 333
$define AUGSEQ 334
$define EQUIV 335
$define AUGEQUIV 336
$define NMGT 337
$define AUGNMGT 338
$define NMGE 339
$define AUGNMGE 340
$define SGT 341
$define AUGSGT 342
$define SGE 343
$define AUGSGE 344
$define QMARK 345
$define AUGQMARK 346
$define AT 347
$define AUGAT 348
$define BACKSLASH 349
$define CARET 350
$define AUGCARET 351
$define BAR 352
$define CONCAT 353
$define AUGCONCAT 354
$define LCONCAT 355
$define AUGLCONCAT 356
$define TILDE 357
$define NMNE 358
$define AUGNMNE 359
$define SNE 360
$define AUGSNE 361
$define NEQUIV 362
$define AUGNEQUIV 363
$define LPAREN 364
$define RPAREN 365
$define PCOLON 366
$define COMMA 367
$define MCOLON 368
$define COLON 369
$define COLONCOLON 370
$define SEMICOL 371
$define LBRACK 372
$define RBRACK 373
$define LBRACE 374
$define RBRACE 375
$define DOLLAR 376
$define ABSTRACT 377
$define PMATCH 378
$define PAND 379
$define POR 380
$define PUNEVAL 381
$define PASSNONMATCH 382
$define PIMDASSN 383
$define PSETCUR 384
$define SND 385
$define SNDBK 386
$define RCV 387
$define RCVBK 388
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
    2,   11,   11,   11,   16,   16,   10,   10,   17,   20,
   20,   20,   22,   22,   19,   19,   19,   19,    9,   24,
   24,   25,   25,   25,    7,    8,    6,   28,   28,   27,
   27,   26,   26,    5,    3,   30,   30,    4,   23,   23,
   31,   32,   15,   15,   15,   21,   21,   21,   29,   29,
   35,   35,   35,   35,   37,   37,   37,   37,   33,   33,
   34,   34,   38,   38,   38,   38,   38,   38,   38,   38,
   39,   41,   41,   41,   18,   18,   12,   12,   12,   13,
   13,   14,   14,   43,   43,   42,   42,   44,   44,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   45,   45,   46,   46,   46,   46,   47,   47,
   47,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   49,   49,   49,   50,
   50,   50,   50,   50,   50,   50,   51,   51,   51,   51,
   51,   52,   52,   52,   54,   54,   54,   54,   53,   53,
   53,   53,   53,   53,   53,   53,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   56,   58,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   63,   63,   64,   64,
   65,   65,   66,   60,   60,   60,   60,   61,   61,   62,
   69,   69,   71,   71,   67,   67,   70,   70,   40,   40,
   40,   40,   57,   57,   72,   72,   73,   73,   74,   74,
   74,   74,   74,   75,   75,   75,   75,   75,   75,   75,
   75,   75,   75,   75,   75,   75,   76,   76,   76,   77,
   77,   77,   77,   77,   77,   59,   78,   78,   78,   68,
   68,    0,    4,   42,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    8,    0,    1,    3,    7,    6,    0,
    3,    3,    3,    2,    0,    2,    2,    2,    2,    1,
    3,    1,    1,    3,    2,    2,    2,    1,    3,    1,
    3,    1,    1,    2,    5,    0,    1,    6,    6,    2,
    5,    5,    0,    1,    3,    0,    1,    3,    1,    3,
    1,    3,    3,    5,    1,    3,    3,    5,    1,    3,
    1,    3,    1,    3,    3,    5,    4,    6,    4,    6,
    2,    0,    1,    1,    0,    4,    0,    4,    4,    0,
    3,    0,    3,    0,    1,    1,    3,    1,    3,    1,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    3,    1,    3,    5,    3,    1,    3,
    3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    3,
    3,    1,    1,    3,    2,    2,    2,    2,    1,    3,
    3,    3,    3,    3,    3,    3,    1,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    1,    0,    4,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    4,    1,    1,    2,    3,    3,
    3,    3,    5,    4,    3,    4,    4,    6,    6,    8,
    8,    3,    1,    3,    2,    2,    2,    4,    2,    4,
    2,    4,    2,    1,    2,    2,    4,    4,    6,    6,
    1,    3,    3,    3,    1,    3,    1,    3,    1,    1,
    1,    1,    1,    0,    1,    3,    1,    2,    1,    2,
    2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    4,    2,    1,    3,    2,    1,
    1,    1,    1,    2,    2,    6,    1,    1,    1,    1,
    3,    3,    4,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    4,    5,    6,    7,    8,    9,
   10,   11,    0,    0,  322,    0,   59,    0,   42,   43,
   40,    0,   32,    0,    0,   30,   38,    0,   35,    0,
    0,    0,   85,    0,   87,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   17,    0,  324,    0,  279,  280,
  281,  282,    0,    0,    0,    0,    0,  264,    0,  237,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  218,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  232,    0,    0,    0,
    0,    0,    0,  253,   98,  217,    0,    0,    0,    0,
    0,  135,    0,    0,    0,    0,  167,    0,  173,  179,
    0,  220,  221,  222,  223,  224,  225,  226,  227,    0,
    0,    0,    0,   60,   41,   34,   31,   39,    0,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  238,    0,    0,    0,    0,    0,  193,
    0,  265,    0,  266,    0,    0,    0,  198,  256,  255,
  201,  204,  200,  212,  206,  199,  197,  202,    0,  207,
  209,  211,  213,  188,  215,  203,  194,  195,  196,  205,
  208,  210,  214,  275,    0,   24,    0,    0,    0,    0,
    0,  271,    0,    0,  216,  189,  190,  191,  192,  323,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   21,   22,   83,   84,    0,    0,   71,
    0,    0,   51,    0,    0,   45,    0,    0,    0,   50,
   28,   27,   16,    0,   26,   87,   23,    0,    0,    0,
    0,    0,    0,    0,  294,  298,  299,  300,  301,  295,
  296,  297,  302,    0,    0,    0,    0,  283,    0,    0,
  289,  239,    0,    0,    0,    0,  242,    0,  241,    0,
  240,    0,   93,   99,  114,  131,  111,  112,  109,  108,
  110,  107,  113,  102,  101,  121,  104,  103,  128,  127,
  120,  116,  124,  117,  119,  118,  126,  125,  130,  132,
  115,  105,  106,  122,  129,  123,    0,    0,  138,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  141,    0,    0,    0,  140,    0,    0,    0,    0,    0,
    0,    0,    0,  171,  168,  169,  170,  186,  181,  180,
  174,  182,  183,  184,  185,  252,  254,    0,    0,    0,
  245,  277,    0,    0,    0,    0,    0,    0,    0,    0,
   19,    0,    0,   81,    0,    0,    0,   75,   70,   55,
    0,    0,   86,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  306,    0,  310,  311,  312,  313,
    0,    0,    0,  307,  219,    0,  290,  291,  292,    0,
  288,  276,    0,    0,    0,    0,  272,  321,    0,  247,
  318,  319,  317,    0,  244,    0,  246,    0,    0,    0,
   91,   88,    0,    0,   89,   48,   72,   58,    0,   77,
   79,   62,    0,    0,    0,   87,   18,    0,    0,    0,
  303,  314,  315,    0,    0,  304,  309,  286,    0,  243,
  137,    0,  278,    0,    0,    0,    0,   66,    0,    0,
    0,   76,    0,   52,    0,    0,    0,  270,    0,  305,
  308,  293,  316,    0,    0,  249,  248,    0,   78,   80,
   64,    0,    0,   49,    0,    0,   68,   87,   13,  251,
  250,    0,    0,   14,
  ]
  yydgoto := [                          2,
    3,   14,  158,   16,  159,   18,   19,   20,   21,   22,
  466,  140,  303,  113,  150,   43,   23,   56,  160,   47,
  308,  114,  161,   35,   36,   31,   32,   38,   28,  154,
   24,  162,  151,  309,  318,  115,  449,  152,  310,  116,
  311,  117,  204,  119,  120,  121,  122,  123,  124,  125,
  126,  127,  128,  129,  130,  131,  347,  189,  132,  133,
  134,  135,  136,  137,  138,  139,  205,  214,  211,  443,
  212,  348,  349,  350,  351,  483,  484,  504,
  ]
  yysindex := [                       -40,
    0,    0,  396,  529,    0,  -24,    4,   82,  157,   82,
   82,   23,   32,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -50, -210,    0, -205,    0,  -26,    0,    0,
    0,  -20,    0,  -15,   -3,    0,    0,    2,    0,   21,
   52,  128,    0,  746,    0, -247,   58,  181,   82,  187,
  157,   82,  201,    4,    0,  -95,    0,   93,    0,    0,
    0,    0,  746,  746,  746,  878,  746,    0,  746,    0,
  878,  746,  746,  746,  746,  746,  746,  878, -207,  878,
  878,  878,  878,  878,  878,  878,  878,    0,  878,  878,
  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
  878,  878,  746,  209,  214,  746,    0,  878,  878,  878,
  878,  878,  197,    0,    0,    0,  183,  131,  176, 8009,
 -256,    0, 6633, -295,  132, -252,    0,   44,    0,    0,
   51,    0,    0,    0,    0,    0,    0,    0,    0,  -39,
    8, -205,  -22,    0,    0,    0,    0,    0,  154,  160,
 -188,    0,  -26,  162,  277,  281,  257,  -77,  -77,  175,
  -77,  189,  301,    0, -233,  183, -322, -234,  -92,    0,
  183,    0, -229,    0,  183, -227, -226,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   71,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   61,    0,  193,  746, -109, -129,
   66,    0,  194,  195,    0,    0,    0,    0,    0,    0,
  878,  746,  878,  878,  878,  878,  878,  878,  878,  878,
  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
  878,  878,  878,  878, -196,  746,  746,  480,  -72,  746,
  277,  311,  746,    0,    0,    0,    0,  208, -168,    0,
  201, -236,    0,  201,  202,    0,  266,  -69,  213,    0,
    0,    0,    0,  308,    0,    0,    0,  215,  746,  746,
  746,  746,  746,  746,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   71,   71,    6,  253,    0,  239,  -12,
    0,    0,  746,  746,  -94,  746,    0,  613,    0,  746,
    0,  176,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -256,  328,    0, -295,
 -295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
    0, -295, -295, -295,    0,  132,  132, -252, -252, -252,
 -252, -252, -252,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  111, -282,  -68,
    0,    0, -156, -279,  229, -171,  -64,  278,  -14,  322,
    0,  -22,  223,    0,  240,  354,  243,    0,    0,    0,
  878,  356,    0,  201, -136,  345,  -39,  613,  183,  183,
 -220,  183,  183,  183,    0,  259,    0,    0,    0,    0,
  275,  -32, -187,    0,    0,   71,    0,    0,    0,  360,
    0,    0,  183,  249,  183, -109,    0,    0,  878,    0,
    0,    0,    0,  746,    0,  746,    0,  -66,  746,  746,
    0,    0,  878,  368,    0,    0,    0,    0, -180,    0,
    0,    0,  307,  262,  201,    0,    0,  746,  -10,  746,
    0,    0,    0,  -76,  -32,    0,    0,    0,  254,    0,
    0, -243,    0,  264,  269,  127,  130,    0,  315,  373,
  263,    0,  878,    0,  270,  -39,  367,    0,  183,    0,
    0,    0,    0,  746,  746,    0,    0,  878,    0,    0,
    0,  272,  746,    0,  136,  143,    0,    0,    0,    0,
    0,  -39,  746,    0,
  ]
  yyrindex := [                       662,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   91,    0,    0,  283,    0,  109,    0,    0,
    0,  795,    0,  -57,  927,    0,    0, 8096,    0,    0,
    0, -244,    0, -239,    0,    0,    0,    0,    0,    0,
    0,    0,  276,  285,    0, -245,    0,  997,    0,    0,
    0,    0, 6871,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 6871, 6871,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  152,    0,  -61,    1,    0,    0, 6988, 7105,
 7222, 7339,    0,    0,    0,    0, 1117,    0, 1237, 6634,
 2557,    0, 6514, 2677, 6157, 5197,    0, 6754,    0,    0,
 6037,    0,    0,    0,    0,    0,    0,    0,    0,  347,
  283,  283, -231,    0,    0,    0,    0,    0,  -93,    0,
  287,    0,  289,    0,    0,    0,    0, -245, -245,   22,
 -245,    0,    0,    0,    0, 1357,    0, 2797,    0,    0,
 1477,    0, 2917,    0, 1597, 3037, 3157,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  319,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -53,    0,
    0,    0,  290,    0,    0,    0,    0,    0,    0,    0,
    0, -239,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 7456, 7573, 7690, 7807,    0,  152,  -61,  293,    0,    0,
    0,    0, -239,    0,    0,    0,    0,    0,  302,    0,
    0,    0,    0,    0,    0,    0,   36,   91,    0,    0,
    0,    0,    0,  376,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  304,    0,    0,    0,  -87, -288,
    0,    0, -310,    0,    0,    0,    0,    0,    0,    1,
    0, 1717,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3277, 7921,    0, 3397,
 3517, 3637, 3757, 3877, 3997, 4117, 4237, 4357, 4477, 4597,
    0, 4717, 4837, 4957,    0, 6276, 6395, 5317, 5437, 5557,
 5677, 5797, 5917,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -53,    0,
    0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
    0,  409,    0,    0,  -84,    0,    0,    0,    0,    0,
    0,    0,    0,  276,    0,    0,  347,    0, 1837, 1957,
 5077, 2077, 2197, 2317,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -35,    0,  118,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -153,    0,    0,  152,  152,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  129,    0,  276,    0,    0, -239,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   35,    0,
    0,    0,    0,    0,    0,  347,    0,    0, 2437,    0,
    0,    0,    0,  152,  152,    0,    0,    0,    0,    0,
    0,    0, -239,    0,    0,    0,    0,    0,    0,    0,
    0,  347, -239,    0,
  ]
  yygindex := [                         0,
  669,    0,  533,    0,  553,    0,    0,    0,    0,    0,
    0, -323, -393, -215, -269, -143,    0,    0,  165,  438,
    0,  626,    0,    0,  623,  372,    0,    0,  621,    0,
    0,  522,    0,    0,  380, -134,    0,  122,  234, -304,
    0,  -63,  -44,  466,  622,  433, -242,    0,  188,  306,
  273,  258,    0,    0,   57,    0,  346,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -100,  330,  225,    0,
  337, -326,  348,    0,    0,  219, -293,    0,
  ]
$define YYTABLESIZE 8387
  yytable := [                        118,
  165,  166,  467,  168,  210,  169,  363,  458,  171,  141,
  173,  175,  176,  177,  398,  399,  324,  475,  164,  221,
  455,   59,   60,   61,   62,   82,   25,  411,  172,  174,
   16,  415,   92,   25,   16,  330,  508,   16,   16,  257,
  332,  209,  333,  334,   16,   44,  329,  283,  287,  179,
  530,  284,  328,  285,   94,  256,   94,  275,  221,  276,
  436,  213,   94,  287,  286,  456,  180,  221,  221,  477,
  478,  479,  221,  528,  221,  221,  287,   59,   60,   61,
   62,  221,  437,  501,  509,  502,  503,  450,  364,  365,
  366,  367,  368,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,
  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,
  396,  550,  104,  258,  535,   25,   16,  170,  480,  563,
  221,   94,   16,   56,  178,  457,  181,  182,  183,  184,
  185,  186,  187,  188,  355,  190,  191,  192,  193,  194,
  195,  196,  197,  198,  199,  200,  201,  202,  203,  538,
   45,  481,  573,   46,  215,  216,  217,  218,  219,  285,
  285,  285,  285,  285,  463,  285,  285,  118,  314,    7,
  477,  478,  479,  315,  444,  536,  155,  156,  583,  537,
  544,  551,  221,   13,  524,  438,  440,    7,  452,  511,
  285,  331,  556,  453,   33,  156,  445,  221,   33,  221,
  506,   13,  545,   94,  552,    1,  285,   33,  507,   33,
  285,   94,   33,   33,  477,  478,  479,  525,  285,   33,
   33,   33,   26,  439,  526,  535,  446,  353,  300,  480,
  537,  561,  301,  357,  335,  336,  337,  338,  339,  285,
  340,  341,  302,  442,  582,  555,  541,  285,  118,  356,
   27,  285,  477,  478,  479,  469,  470,  471,  472,  473,
  474,   73,  481,   73,  494,  342,  285,  285,   73,   40,
   74,  157,   74,  480,  285,  306,  285,   74,   41,  307,
  493,  487,  495,   15,  496,  488,  560,  462,  353,  157,
   15,  323,  462,  343,  505,   94,  512,   61,  492,   33,
   61,   94,  557,   95,   61,  213,  481,   61,   61,   95,
   42,  480,  321,  322,   61,  325,  522,  335,  336,  337,
  338,  339,  489,  340,  341,  273,  344,  273,   29,  273,
   48,   30,  287,  428,  429,  430,   49,  432,  433,  434,
  435,  345,  514,   50,  481,  482,  515,  579,  342,  346,
  358,  490,   15,   51,  558,   15,  295,  584,   52,   15,
   44,   94,   15,   15,   44,   94,   46,  163,  548,   15,
   44,   37,   39,   44,   53,   44,  343,   44,   44,   44,
  288,   44,  289,  290,   65,   44,   44,   44,   65,   55,
   63,   67,   61,   63,  496,   67,   61,   63,  546,  547,
   63,   63,   61,   33,  296,   54,   34,   63,  571,  344,
  145,  143,  297,  148,  298,  352,  299,  353,  291,  292,
  293,  294,  454,  577,  345,  459,  358,  144,  359,  277,
  542,  278,  346,  279,  146,  280,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  149,  412,  413,
  414,  543,  163,  575,  576,  206,  559,   15,  220,   57,
   58,   59,   60,   61,   62,  500,   63,  353,   64,   44,
   65,   66,  207,  118,  221,   44,   67,   68,  274,   69,
  274,  566,  274,  353,  567,   63,  353,   70,   71,   63,
  580,  222,  353,   72,   73,   63,   74,  581,   75,  353,
   76,   77,   78,  281,  282,   79,   94,   80,   94,   81,
  223,   82,  312,   83,  313,   84,  316,   85,  118,   86,
   87,  532,  533,  317,   88,   15,   15,  319,  118,  156,
  424,  425,  426,  427,   89,  323,   90,  431,   91,  418,
  419,  420,  421,  422,  423,   17,   17,  327,   92,  326,
   93,  354,   94,   95,  360,   96,   97,  448,   98,  361,
   99,  100,  451,  101,  460,  102,  464,  103,  304,  305,
  416,  417,  208,  104,  461,  105,  465,  106,  468,  485,
  486,  499,  510,  516,  107,  518,  513,  108,  109,  110,
  111,  112,   90,   90,   90,   90,   90,   90,  519,   90,
  520,   90,  523,   90,   90,  521,  527,  539,   90,   90,
   90,  540,   90,  531,  549,  553,  554,  564,  562,  569,
   90,   90,  565,  568,  572,  570,   90,   90,  574,   90,
   53,   90,  578,   90,   90,   90,   20,   12,   90,   46,
   90,   54,   90,   47,   90,  284,   90,    5,   90,   94,
   90,    6,   90,   90,  320,   82,   57,   90,  284,    4,
    7,  142,    8,  147,  153,    9,   10,   90,  320,   90,
  447,   90,   11,   12,   13,  517,  362,  167,  397,  498,
  476,   90,  529,   90,  497,   90,   90,  491,   90,   90,
  534,   90,    0,   90,   90,    0,   90,    0,   90,    0,
   90,    0,    0,    0,    0,    0,   90,   90,   90,    0,
   90,    0,    0,    0,    0,    0,    0,   90,    0,    0,
   90,   90,   90,   90,   90,   57,   58,   59,   60,   61,
   62,    0,   63,    0,   64,    0,   65,   66,    0,    0,
    0,    0,   67,   68,    0,   69,    0,    0,    0,    0,
    0,    0,    0,   70,   71,    0,    0,    0,    0,   72,
   73,    0,   74,    0,   75,    0,   76,   77,   78,    0,
    0,   79,    0,   80,    0,   81,    0,   82,    0,   83,
   25,   84,    0,   85,    6,   86,   87,    0,    0,    0,
   88,    0,    0,    7,    0,    8,    0,    0,    9,   10,
   89,    0,   90,    0,   91,   11,   12,   13,    0,    0,
    0,    0,    0,    0,   92,    0,   93,    0,   94,   95,
    0,   96,   97,    0,   98,    0,   99,  100,    0,  101,
    0,  102,    0,  103,    0,    0,    0,    0,    0,  104,
    0,  105,    0,  106,  441,    0,    0,    0,    0,    0,
  107,    0,    0,  108,  109,  110,  111,  112,   57,   58,
   59,   60,   61,   62,    0,   63,    0,   64,    0,   65,
   66,  207,    0,    0,    0,   67,   68,    0,   69,    0,
    0,    0,    0,    0,    0,    0,   70,   71,    0,    0,
    0,    0,   72,   73,    0,   74,    0,   75,    0,   76,
   77,   78,    0,    0,   79,    0,   80,    0,   81,    0,
   82,    0,   83,    2,   84,    0,   85,    2,   86,   87,
    0,    0,    0,   88,    0,    0,    2,    0,    2,    0,
    0,    2,    2,   89,    0,   90,    0,   91,    2,    2,
    2,    0,    0,    0,    0,    0,    0,   92,    0,   93,
    0,   94,   95,    0,   96,   97,    0,   98,    0,   99,
  100,    0,  101,    0,  102,    0,  103,    0,    0,    0,
    0,    0,  104,    0,  105,    0,  106,    0,    0,    0,
    0,    0,    0,  107,    0,    0,  108,  109,  110,  111,
  112,   57,   58,   59,   60,   61,   62,    0,   63,    0,
   64,    0,   65,   66,    0,    0,    0,    0,   67,   68,
    0,   69,    0,    0,    0,    0,    0,    0,    0,   70,
   71,    0,    0,    0,    0,   72,   73,    0,   74,    0,
   75,    0,   76,   77,   78,    0,    0,   79,    0,   80,
    0,   81,    0,   82,    0,   83,   36,   84,    0,   85,
   36,   86,   87,    0,    0,    0,   88,    0,    0,   36,
    0,   36,    0,    0,   36,   36,   89,    0,   90,    0,
   91,   36,   36,   36,    0,    0,    0,    0,    0,    0,
   92,    0,   93,    0,   94,   95,    0,   96,   97,    0,
   98,    0,   99,  100,    0,  101,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,    0,  105,    0,  106,
    0,    0,    0,    0,    0,    0,  107,    0,    0,  108,
  109,  110,  111,  112,   58,   59,   60,   61,   62,    0,
   63,    0,   64,    0,   65,   66,    0,    0,    0,    0,
   67,   68,    0,   69,    0,    0,    0,    0,    0,    0,
    0,   70,   71,    0,    0,    0,    0,   72,   73,    0,
   74,    0,   75,    0,   76,   77,   78,    0,    0,   79,
    0,   80,    0,   81,    0,   82,    0,   83,   29,   84,
    0,   85,   29,   86,   87,    0,    0,    0,   88,    0,
    0,   29,    0,   29,    0,    0,   29,   29,   89,    0,
   90,    0,   91,   29,   29,   29,    0,    0,    0,    0,
    0,    0,   92,    0,   93,    0,   94,   95,    0,   96,
   97,    0,   98,    0,   99,  100,    0,  101,    0,  102,
    0,  103,    0,    0,    0,    0,    0,  104,    0,  105,
    0,  106,    0,    0,    0,    0,    0,    0,  107,    0,
  236,  108,  109,  110,  111,  112,  236,  236,  236,    0,
    0,  236,    0,    0,    0,  236,    0,    0,  236,  236,
    0,    0,  236,    0,    0,  236,    0,    0,    0,    0,
  236,    0,  236,    0,    0,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,    0,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,    0,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,    0,  236,  236,
   95,  236,  236,  236,  236,    0,   95,   95,   95,    0,
    0,   95,    0,    0,    0,   95,    0,    0,   95,   95,
    0,    0,   95,    0,    0,   95,    0,    0,    0,    0,
   95,    0,   95,    0,    0,   95,   95,   95,    0,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,    0,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,    0,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,    0,   95,   95,
   96,   95,   95,   95,   95,    0,   96,   96,   96,    0,
    0,   96,    0,    0,    0,   96,    0,    0,   96,   96,
    0,    0,   96,    0,    0,   96,    0,    0,    0,    0,
   96,    0,   96,    0,    0,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,    0,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,    0,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,    0,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,    0,   96,   96,
  233,   96,   96,   96,   96,    0,  233,  233,  233,    0,
    0,  233,    0,    0,    0,  233,    0,    0,  233,  233,
    0,    0,  233,    0,    0,  233,    0,    0,    0,    0,
  233,    0,  233,    0,    0,  233,  233,  233,    0,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,    0,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,    0,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,    0,  233,  233,
  263,  233,  233,  233,  233,    0,  263,  263,  263,    0,
    0,  263,    0,    0,    0,  263,    0,    0,  263,  263,
    0,    0,  263,    0,    0,  263,    0,    0,    0,    0,
  263,    0,  263,    0,    0,  263,  263,  263,    0,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,  263,    0,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,    0,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,    0,  263,  263,
  234,  263,  263,  263,  263,    0,  234,  234,  234,    0,
    0,  234,    0,    0,    0,  234,    0,    0,  234,  234,
    0,    0,  234,    0,    0,  234,    0,    0,    0,    0,
  234,    0,  234,    0,    0,  234,  234,  234,    0,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,    0,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,    0,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,    0,  234,  234,
   97,  234,  234,  234,  234,    0,   97,   97,   97,    0,
    0,   97,    0,    0,    0,   97,    0,    0,   97,   97,
    0,    0,   97,    0,    0,   97,    0,    0,    0,    0,
   97,    0,   97,    0,    0,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,    0,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,    0,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,    0,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,    0,   97,   97,
  235,   97,   97,   97,   97,    0,  235,  235,  235,    0,
    0,  235,    0,    0,    0,  235,    0,    0,  235,  235,
    0,    0,  235,    0,    0,  235,    0,    0,    0,    0,
  235,    0,  235,    0,    0,  235,  235,  235,    0,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,    0,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,    0,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,    0,  235,  235,
  262,  235,  235,  235,  235,    0,  262,  262,  262,    0,
    0,  262,    0,    0,    0,  262,    0,    0,  262,  262,
    0,    0,  262,    0,    0,  262,    0,    0,    0,    0,
  262,    0,  262,    0,    0,  262,  262,  262,    0,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,    0,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,    0,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,    0,  262,  262,
  267,  262,  262,  262,  262,    0,  267,  267,  267,    0,
    0,  267,    0,    0,    0,  267,    0,    0,  267,  267,
    0,    0,  267,    0,    0,  267,    0,    0,    0,    0,
  267,    0,  267,    0,    0,  267,  267,  267,    0,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,    0,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,    0,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,    0,  267,  267,
  260,  267,  267,  267,  267,    0,  260,  260,  260,    0,
    0,  260,    0,    0,    0,  260,    0,    0,  260,  260,
    0,    0,  260,    0,    0,  260,    0,    0,    0,    0,
  260,    0,  260,    0,    0,  260,  260,  260,    0,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,    0,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,    0,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,    0,  260,  260,
  258,  260,  260,  260,  260,    0,  258,  258,  258,    0,
    0,  258,    0,    0,    0,  258,    0,    0,  258,  258,
    0,    0,  258,    0,    0,  258,    0,    0,    0,    0,
  258,    0,  258,    0,    0,  258,  258,  258,    0,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,    0,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,    0,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,    0,  258,  258,
  269,  258,  258,  258,  258,    0,  269,  269,  269,    0,
    0,  269,    0,    0,    0,  269,    0,    0,  269,  269,
    0,    0,  269,    0,    0,  269,    0,    0,    0,    0,
  269,    0,  269,    0,    0,  269,  269,  269,    0,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,    0,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,    0,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,    0,  269,  269,
  133,  269,  269,  269,  269,    0,  133,  133,  133,    0,
    0,  133,    0,    0,    0,  133,    0,    0,  133,  133,
    0,    0,  133,    0,    0,  133,    0,    0,    0,    0,
  133,    0,    0,    0,    0,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,    0,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,    0,  133,  133,  133,
  133,  133,  133,  133,  133,  133,    0,    0,  133,  133,
  142,  133,  133,  133,  133,    0,  142,  142,  142,    0,
    0,  142,    0,    0,    0,  142,    0,    0,  142,  142,
    0,    0,  142,    0,    0,  142,    0,    0,    0,    0,
  142,    0,  142,    0,    0,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,    0,
  142,    0,  142,    0,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,    0,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,    0,  142,  142,
  261,  142,  142,  142,  142,    0,    0,  261,  261,    0,
    0,  261,    0,    0,    0,  261,    0,    0,  261,  261,
    0,    0,  261,    0,    0,  261,    0,    0,    0,    0,
  261,    0,  261,    0,    0,  261,  261,  261,    0,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,    0,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,    0,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,    0,  261,  261,
   95,  261,  261,  261,  261,    0,    0,   95,   95,    0,
    0,   95,    0,    0,    0,   95,    0,    0,   95,   95,
    0,    0,   95,    0,    0,   95,    0,    0,    0,    0,
   95,    0,   95,    0,    0,   95,   95,   95,    0,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,    0,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,    0,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,    0,   95,   95,
  259,   95,   95,   95,   95,    0,    0,  259,  259,    0,
    0,  259,    0,    0,    0,  259,    0,    0,  259,  259,
    0,    0,  259,    0,    0,  259,    0,    0,    0,    0,
  259,    0,  259,    0,    0,  259,  259,  259,    0,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,    0,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,    0,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,    0,  259,  259,
  257,  259,  259,  259,  259,    0,    0,  257,  257,    0,
    0,  257,    0,    0,    0,  257,    0,    0,  257,  257,
    0,    0,  257,    0,    0,  257,    0,    0,    0,    0,
  257,    0,  257,    0,    0,  257,  257,  257,    0,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,    0,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,    0,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,    0,  257,  257,
  134,  257,  257,  257,  257,    0,  134,  134,  134,    0,
    0,  134,    0,    0,    0,  134,    0,    0,  134,  134,
    0,    0,  134,    0,    0,  134,    0,    0,    0,    0,
  134,    0,    0,    0,    0,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,    0,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,    0,  134,  134,  134,
  134,  134,  134,  134,  134,  134,    0,    0,  134,  134,
  153,  134,  134,  134,  134,    0,  153,  153,  153,    0,
    0,  153,    0,    0,    0,  153,    0,    0,  153,  153,
    0,    0,  153,    0,    0,  153,    0,    0,    0,    0,
  153,    0,  153,    0,    0,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,    0,
  153,    0,  153,    0,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,    0,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,    0,  153,  153,
  147,  153,  153,  153,  153,    0,  147,  147,  147,    0,
    0,  147,    0,    0,    0,  147,    0,    0,  147,  147,
    0,    0,  147,    0,    0,  147,    0,    0,    0,    0,
  147,    0,  147,    0,    0,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,    0,
  147,    0,  147,    0,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,    0,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,    0,  147,  147,
  146,  147,  147,  147,  147,    0,  146,  146,  146,    0,
    0,  146,    0,    0,    0,  146,    0,    0,  146,  146,
    0,    0,  146,    0,    0,  146,    0,    0,    0,    0,
  146,    0,  146,    0,    0,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,    0,
  146,    0,  146,    0,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,    0,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,    0,  146,  146,
  152,  146,  146,  146,  146,    0,  152,  152,  152,    0,
    0,  152,    0,    0,    0,  152,    0,    0,  152,  152,
    0,    0,  152,    0,    0,  152,    0,    0,    0,    0,
  152,    0,  152,    0,    0,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,    0,
  152,    0,  152,    0,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,    0,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,    0,  152,  152,
  149,  152,  152,  152,  152,    0,  149,  149,  149,    0,
    0,  149,    0,    0,    0,  149,    0,    0,  149,  149,
    0,    0,  149,    0,    0,  149,    0,    0,    0,    0,
  149,    0,  149,    0,    0,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,    0,
  149,    0,  149,    0,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,    0,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,    0,  149,  149,
  143,  149,  149,  149,  149,    0,  143,  143,  143,    0,
    0,  143,    0,    0,    0,  143,    0,    0,  143,  143,
    0,    0,  143,    0,    0,  143,    0,    0,    0,    0,
  143,    0,  143,    0,    0,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,    0,
  143,    0,  143,    0,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,    0,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,    0,  143,  143,
  155,  143,  143,  143,  143,    0,  155,  155,  155,    0,
    0,  155,    0,    0,    0,  155,    0,    0,  155,  155,
    0,    0,  155,    0,    0,  155,    0,    0,    0,    0,
  155,    0,  155,    0,    0,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,    0,
  155,    0,  155,    0,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,    0,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,    0,  155,  155,
  151,  155,  155,  155,  155,    0,  151,  151,  151,    0,
    0,  151,    0,    0,    0,  151,    0,    0,  151,  151,
    0,    0,  151,    0,    0,  151,    0,    0,    0,    0,
  151,    0,  151,    0,    0,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,    0,
  151,    0,  151,    0,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,    0,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,    0,  151,  151,
  150,  151,  151,  151,  151,    0,  150,  150,  150,    0,
    0,  150,    0,    0,    0,  150,    0,    0,  150,  150,
    0,    0,  150,    0,    0,  150,    0,    0,    0,    0,
  150,    0,  150,    0,    0,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,    0,
  150,    0,  150,    0,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,    0,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,    0,  150,  150,
  145,  150,  150,  150,  150,    0,  145,  145,  145,    0,
    0,  145,    0,    0,    0,  145,    0,    0,  145,  145,
    0,    0,  145,    0,    0,  145,    0,    0,    0,    0,
  145,    0,  145,    0,    0,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,    0,
  145,    0,  145,    0,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,    0,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,    0,  145,  145,
  144,  145,  145,  145,  145,    0,  144,  144,  144,    0,
    0,  144,    0,    0,    0,  144,    0,    0,  144,  144,
    0,    0,  144,    0,    0,  144,    0,    0,    0,    0,
  144,    0,  144,    0,    0,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,    0,
  144,    0,  144,    0,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,    0,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,    0,  144,  144,
  154,  144,  144,  144,  144,    0,  154,  154,  154,    0,
    0,  154,    0,    0,    0,  154,    0,    0,  154,  154,
    0,    0,  154,    0,    0,  154,    0,    0,    0,    0,
  154,    0,  154,    0,    0,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,    0,
  154,    0,  154,    0,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,    0,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,    0,  154,  154,
  148,  154,  154,  154,  154,    0,  148,  148,  148,    0,
    0,  148,    0,    0,    0,  148,    0,    0,  148,  148,
    0,    0,  148,    0,    0,  148,    0,    0,    0,    0,
  148,    0,  148,    0,    0,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,    0,
  148,    0,  148,    0,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,    0,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,    0,  148,  148,
  156,  148,  148,  148,  148,    0,  156,  156,  156,    0,
    0,  156,    0,    0,    0,  156,    0,    0,  156,  156,
    0,    0,  156,    0,    0,  156,    0,    0,    0,    0,
  156,    0,  156,    0,    0,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,    0,
  156,    0,  156,    0,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,    0,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,    0,  156,  156,
  268,  156,  156,  156,  156,    0,  268,    0,  268,    0,
    0,  268,    0,    0,    0,  268,    0,    0,  268,  268,
    0,    0,  268,    0,    0,  268,    0,    0,    0,    0,
  268,    0,  268,    0,    0,  268,  268,  268,    0,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,    0,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,    0,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,    0,  268,  268,
  160,  268,  268,  268,  268,    0,  160,  160,  160,    0,
    0,  160,    0,    0,    0,  160,    0,    0,  160,  160,
    0,    0,  160,    0,    0,  160,    0,    0,    0,    0,
  160,    0,  160,    0,    0,  160,    0,  160,  160,  160,
    0,  160,    0,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,    0,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,    0,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,    0,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,    0,  160,  160,
  163,  160,  160,  160,  160,    0,  163,  163,  163,    0,
    0,  163,    0,    0,    0,  163,    0,    0,  163,  163,
    0,    0,  163,    0,    0,  163,    0,    0,    0,    0,
  163,    0,  163,    0,    0,  163,    0,  163,  163,  163,
    0,  163,    0,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,    0,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,    0,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,    0,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,    0,  163,  163,
  165,  163,  163,  163,  163,    0,  165,  165,  165,    0,
    0,  165,    0,    0,    0,  165,    0,    0,  165,  165,
    0,    0,  165,    0,    0,  165,    0,    0,    0,    0,
  165,    0,  165,    0,    0,  165,    0,  165,  165,  165,
    0,  165,    0,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,    0,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,    0,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,    0,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,    0,  165,  165,
  166,  165,  165,  165,  165,    0,  166,  166,  166,    0,
    0,  166,    0,    0,    0,  166,    0,    0,  166,  166,
    0,    0,  166,    0,    0,  166,    0,    0,    0,    0,
  166,    0,  166,    0,    0,  166,    0,  166,  166,  166,
    0,  166,    0,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,    0,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,    0,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,    0,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,    0,  166,  166,
  164,  166,  166,  166,  166,    0,  164,  164,  164,    0,
    0,  164,    0,    0,    0,  164,    0,    0,  164,  164,
    0,    0,  164,    0,    0,  164,    0,    0,    0,    0,
  164,    0,  164,    0,    0,  164,    0,  164,  164,  164,
    0,  164,    0,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,    0,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,    0,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,    0,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,    0,  164,  164,
  162,  164,  164,  164,  164,    0,  162,  162,  162,    0,
    0,  162,    0,    0,    0,  162,    0,    0,  162,  162,
    0,    0,  162,    0,    0,  162,    0,    0,    0,    0,
  162,    0,  162,    0,    0,  162,    0,  162,  162,  162,
    0,  162,    0,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,    0,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,    0,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,    0,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,    0,  162,  162,
  161,  162,  162,  162,  162,    0,  161,  161,  161,    0,
    0,  161,    0,    0,    0,  161,    0,    0,  161,  161,
    0,    0,  161,    0,    0,  161,    0,    0,    0,    0,
  161,    0,  161,    0,    0,  161,    0,  161,  161,  161,
    0,  161,    0,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,    0,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,    0,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,    0,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,    0,  161,  161,
  187,  161,  161,  161,  161,    0,  187,  187,  187,    0,
    0,  187,    0,    0,    0,  187,    0,    0,  187,  187,
    0,    0,  187,    0,    0,  187,    0,    0,    0,    0,
  187,    0,  187,    0,    0,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,    0,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,    0,  187,  187,  187,  187,  187,  187,
    0,  187,  187,  187,  187,  187,    0,  187,    0,  187,
    0,  187,    0,  187,  187,  187,  187,    0,  187,  187,
  157,  187,  187,  187,  187,    0,  157,  157,  157,    0,
    0,  157,    0,    0,    0,  157,    0,    0,  157,  157,
    0,    0,  157,    0,    0,  157,    0,    0,    0,    0,
  157,    0,  157,    0,    0,  157,  157,  157,  157,  157,
  157,  157,  157,  157,    0,  157,    0,  157,    0,  157,
    0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,    0,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,    0,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,    0,    0,  158,
    0,  157,  157,  157,  157,  158,  158,  158,    0,    0,
  158,    0,    0,    0,  158,    0,    0,  158,  158,    0,
    0,  158,    0,    0,  158,    0,    0,    0,    0,  158,
    0,  158,    0,    0,  158,  158,  158,  158,  158,  158,
  158,  158,  158,    0,  158,    0,  158,    0,  158,    0,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,    0,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,    0,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,    0,    0,  159,    0,
  158,  158,  158,  158,  159,  159,  159,    0,    0,  159,
    0,    0,    0,  159,    0,    0,  159,  159,    0,    0,
  159,    0,    0,  159,    0,    0,    0,    0,  159,    0,
  159,    0,    0,  159,  159,  159,  159,  159,  159,  159,
  159,  159,    0,  159,    0,  159,    0,  159,    0,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,    0,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,    0,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,    0,    0,  139,    0,  159,
  159,  159,  159,  139,  139,  139,    0,    0,  139,    0,
    0,    0,  139,    0,    0,  139,  139,    0,    0,  139,
    0,    0,  139,    0,    0,    0,    0,  139,    0,  139,
    0,    0,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,    0,  139,  139,  139,    0,  139,
    0,  139,    0,  139,    0,  139,    0,  139,    0,  139,
    0,  139,    0,  139,    0,  139,    0,  139,  139,  139,
  139,  139,  139,  139,  139,    0,  139,  139,  139,  139,
    0,    0,  139,    0,  139,    0,  139,  139,  139,  139,
  139,  139,  139,    0,  139,  139,  139,  139,  139,  139,
  139,  139,    0,  139,    0,  139,  139,  100,  139,  139,
  139,  139,    0,  100,  100,  100,    0,    0,  100,    0,
    0,    0,  100,    0,    0,  100,  100,    0,    0,  100,
    0,    0,  100,    0,    0,    0,    0,  100,    0,  100,
    0,    0,  100,  100,    0,  100,    0,  100,    0,  100,
    0,  100,    0,  100,    0,  100,    0,  100,    0,  100,
  100,    0,    0,  259,  100,    0,    0,  260,  100,  261,
  100,  262,  100,  263,  100,  264,  100,  265,  100,  266,
  100,  267,  100,  268,  100,  269,  100,    0,  100,    0,
  100,    0,  100,  100,  270,  100,  100,    0,  100,    0,
  271,  100,  272,  100,  273,  100,    0,  100,  100,  100,
  100,  100,  100,    0,  100,  100,  100,  100,  100,  100,
  100,  274,  100,  100,    0,  100,  100,  172,  100,  100,
  100,  100,    0,  172,  172,  172,    0,    0,  172,    0,
    0,    0,  172,    0,    0,  172,  172,    0,    0,  172,
    0,    0,  172,    0,    0,    0,    0,  172,    0,  172,
    0,    0,    0,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
    0,  172,    0,    0,  172,  172,  172,  172,  172,  172,
    0,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,    0,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,   94,  172,  172,    0,    0,    0,
   94,   94,   94,    0,    0,   94,    0,    0,    0,   94,
    0,    0,   94,   94,    0,    0,   94,    0,    0,   94,
    0,    0,    0,    0,   94,    0,   94,    0,    0,    0,
   94,   94,    0,   94,    0,   94,    0,   94,    0,   94,
    0,   94,    0,   94,    0,   94,    0,    0,   94,   94,
   94,    0,   94,   94,   94,   94,   94,   94,   94,   94,
   94,    0,   94,    0,   94,    0,   94,   94,   94,   94,
   94,   94,   94,   94,   94,    0,   94,    0,   94,    0,
    0,   94,    0,    0,   94,    0,   94,    0,    0,   94,
    0,   94,    0,   94,    0,   94,   94,   94,   94,   94,
    0,   94,    0,   94,    0,   94,   94,   94,   94,   94,
   94,  228,   94,   94,    0,    0,    0,  228,  228,  228,
    0,    0,  228,    0,    0,    0,  228,    0,    0,  228,
  228,    0,    0,  228,    0,    0,  228,    0,    0,    0,
    0,  228,    0,  228,    0,    0,    0,  228,  228,    0,
  228,    0,  228,    0,  228,    0,  228,    0,  228,    0,
  228,    0,  228,    0,    0,  228,  228,  228,    0,  228,
  228,  228,  228,  228,  228,  228,  228,  228,    0,  228,
    0,  228,    0,  228,  228,  228,  228,  228,  228,  228,
  228,  228,    0,  228,    0,  228,    0,    0,  228,    0,
    0,  228,    0,  228,    0,    0,  228,    0,  228,    0,
  228,    0,  228,  228,  228,  228,  228,    0,  228,    0,
  228,    0,  228,  228,  228,  228,  228,  228,  229,  228,
  228,    0,    0,    0,  229,  229,  229,    0,    0,  229,
    0,    0,    0,  229,    0,    0,  229,  229,    0,    0,
  229,    0,    0,  229,    0,    0,    0,    0,  229,    0,
  229,    0,    0,    0,  229,  229,    0,  229,    0,  229,
    0,  229,    0,  229,    0,  229,    0,  229,    0,  229,
    0,    0,  229,  229,  229,    0,  229,  229,  229,  229,
  229,  229,  229,  229,  229,    0,  229,    0,  229,    0,
  229,  229,  229,  229,  229,  229,  229,  229,  229,    0,
  229,    0,  229,    0,    0,  229,    0,    0,  229,    0,
  229,    0,    0,  229,    0,  229,    0,  229,    0,  229,
  229,  229,  229,  229,    0,  229,    0,  229,    0,  229,
  229,  229,  229,  229,  229,  230,  229,  229,    0,    0,
    0,  230,  230,  230,    0,    0,  230,    0,    0,    0,
  230,    0,    0,  230,  230,    0,    0,  230,    0,    0,
  230,    0,    0,    0,    0,  230,    0,  230,    0,    0,
    0,  230,  230,    0,  230,    0,  230,    0,  230,    0,
  230,    0,  230,    0,  230,    0,  230,    0,    0,  230,
  230,  230,    0,  230,  230,  230,  230,  230,  230,  230,
  230,  230,    0,  230,    0,  230,    0,  230,  230,  230,
  230,  230,  230,  230,  230,  230,    0,  230,    0,  230,
    0,    0,  230,    0,    0,  230,    0,  230,    0,    0,
  230,    0,  230,    0,  230,    0,  230,  230,  230,  230,
  230,    0,  230,    0,  230,    0,  230,  230,  230,  230,
  230,  230,  231,  230,  230,    0,    0,    0,  231,  231,
  231,    0,    0,  231,    0,    0,    0,  231,    0,    0,
  231,  231,    0,    0,  231,    0,    0,  231,    0,    0,
    0,    0,  231,    0,  231,    0,    0,    0,  231,  231,
    0,  231,    0,  231,    0,  231,    0,  231,    0,  231,
    0,  231,    0,  231,    0,    0,  231,  231,  231,    0,
  231,  231,  231,  231,  231,  231,  231,  231,  231,    0,
  231,    0,  231,    0,  231,  231,  231,  231,  231,  231,
  231,  231,  231,    0,  231,    0,  231,    0,    0,  231,
    0,    0,  231,    0,  231,    0,    0,  231,    0,  231,
    0,  231,    0,  231,  231,  231,  231,  231,    0,  231,
    0,  231,    0,  231,  231,  231,  231,  231,  231,  175,
  231,  231,    0,    0,    0,  175,  175,  175,    0,    0,
  175,    0,    0,    0,  175,    0,    0,  175,  175,    0,
    0,  175,    0,    0,  175,    0,    0,    0,    0,  175,
    0,  175,    0,    0,    0,  175,  175,    0,  175,    0,
  175,    0,  175,    0,  175,    0,  175,    0,  175,    0,
  175,    0,    0,  175,  175,  175,    0,  175,  175,  175,
  175,  175,  175,  175,  175,  175,    0,  175,    0,  175,
    0,  175,  175,  175,  175,  175,  175,  175,  175,  175,
    0,  175,    0,  175,    0,    0,  175,    0,    0,  175,
    0,  175,    0,    0,  175,    0,  175,    0,  175,    0,
  175,  175,  175,  175,  175,    0,  175,    0,  175,    0,
  175,  175,  175,  175,  175,  175,  176,  175,  175,    0,
    0,    0,  176,  176,  176,    0,    0,  176,    0,    0,
    0,  176,    0,    0,  176,  176,    0,    0,  176,    0,
    0,  176,    0,    0,    0,    0,  176,    0,  176,    0,
    0,    0,  176,  176,    0,  176,    0,  176,    0,  176,
    0,  176,    0,  176,    0,  176,    0,  176,    0,    0,
  176,  176,  176,    0,  176,  176,  176,  176,  176,  176,
  176,  176,  176,    0,  176,    0,  176,    0,  176,  176,
  176,  176,  176,  176,  176,  176,  176,    0,  176,    0,
  176,    0,    0,  176,    0,    0,  176,    0,  176,    0,
    0,  176,    0,  176,    0,  176,    0,  176,  176,  176,
  176,  176,    0,  176,    0,  176,    0,  176,  176,  176,
  176,  176,  176,  177,  176,  176,    0,    0,    0,  177,
  177,  177,    0,    0,  177,    0,    0,    0,  177,    0,
    0,  177,  177,    0,    0,  177,    0,    0,  177,    0,
    0,    0,    0,  177,    0,  177,    0,    0,    0,  177,
  177,    0,  177,    0,  177,    0,  177,    0,  177,    0,
  177,    0,  177,    0,  177,    0,    0,  177,  177,  177,
    0,  177,  177,  177,  177,  177,  177,  177,  177,  177,
    0,  177,    0,  177,    0,  177,  177,  177,  177,  177,
  177,  177,  177,  177,    0,  177,    0,  177,    0,    0,
  177,    0,    0,  177,    0,  177,    0,    0,  177,    0,
  177,    0,  177,    0,  177,  177,  177,  177,  177,    0,
  177,    0,  177,    0,  177,  177,  177,  177,  177,  177,
  178,  177,  177,    0,    0,    0,  178,  178,  178,    0,
    0,  178,    0,    0,    0,  178,    0,    0,  178,  178,
    0,    0,  178,    0,    0,  178,    0,    0,    0,    0,
  178,    0,  178,    0,    0,    0,  178,  178,    0,  178,
    0,  178,    0,  178,    0,  178,    0,  178,    0,  178,
    0,  178,    0,    0,  178,  178,  178,    0,  178,  178,
  178,  178,  178,  178,  178,  178,  178,    0,  178,    0,
  178,    0,  178,  178,  178,  178,  178,  178,  178,  178,
  178,    0,  178,    0,  178,    0,    0,  178,    0,    0,
  178,    0,  178,    0,    0,  178,    0,  178,    0,  178,
    0,  178,  178,  178,  178,  178,    0,  178,    0,  178,
    0,  178,  178,  178,  178,  178,  178,    0,  178,  178,
  136,  136,  136,    0,    0,  136,    0,    0,    0,  136,
    0,    0,  136,  136,    0,    0,  136,    0,    0,  136,
    0,    0,    0,    0,  136,    0,  136,    0,    0,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,    0,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
    0,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,    0,  136,  136,    0,  136,  136,  136,  136,  224,
    0,  225,    0,  226,    0,  227,    0,  228,    0,  229,
    0,  230,    0,  231,    0,    0,  232,  233,  234,    0,
  235,  236,  237,    0,  238,    0,  239,    0,  240,    0,
  241,    0,  242,    0,  243,    0,  244,    0,  245,    0,
  246,    0,  247,    0,  248,    0,  249,   37,    0,  250,
    0,   37,  251,    0,  252,    0,    0,  253,    0,  254,
   37,  255,   37,    0,    0,   37,   37,    0,    0,    0,
    0,    0,   37,   37,   37,    0,  256,
  ]
  yycheck := [                         44,
   64,   65,  326,   67,  105,   69,  222,  312,   72,  257,
   74,   75,   76,   77,  257,  258,  160,  344,   63,  302,
  257,  258,  259,  260,  261,  257,  272,  270,   73,   74,
  275,  274,  272,  279,  279,  270,  316,  282,  283,  296,
  270,  105,  270,  270,  289,  256,  369,  300,  337,  257,
  271,  304,  286,  306,  365,  378,  367,  353,  302,  355,
  257,  106,  373,  352,  317,  302,  274,  302,  302,  257,
  258,  259,  302,  467,  302,  302,  365,  258,  259,  260,
  261,  302,  279,  366,  364,  368,  369,  303,  223,  224,
  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
  255,  302,  370,  380,  312,  371,  371,   71,  316,  373,
  302,  371,  377,  365,   78,  372,   80,   81,   82,   83,
   84,   85,   86,   87,  208,   89,   90,   91,   92,   93,
   94,   95,   96,   97,   98,   99,  100,  101,  102,  486,
  371,  349,  556,  369,  108,  109,  110,  111,  112,  257,
  258,  259,  260,  261,  318,  263,  264,  222,  367,  275,
  257,  258,  259,  372,  257,  373,  282,  283,  582,  483,
  257,  372,  302,  289,  464,  296,  297,  275,  367,  371,
  288,  294,  526,  372,  262,  283,  279,  302,  266,  302,
  367,  289,  279,  367,  519,  256,  304,  275,  375,  277,
  308,  375,  280,  281,  257,  258,  259,  364,  316,  287,
  288,  289,  257,  297,  371,  312,  300,  367,  278,  316,
  534,  535,  282,  373,  257,  258,  259,  260,  261,  337,
  263,  264,  292,  298,  578,  525,  499,  345,  303,  369,
  257,  349,  257,  258,  259,  329,  330,  331,  332,  333,
  334,  365,  349,  367,  369,  288,  364,  365,  372,  257,
  365,  377,  367,  316,  372,  308,  374,  372,  257,  312,
  354,  304,  356,  272,  358,  308,  373,  367,  367,  377,
  279,  371,  367,  316,  373,  367,  371,  272,  353,  367,
  275,  373,  528,  367,  279,  360,  349,  282,  283,  373,
  371,  316,  158,  159,  289,  161,  461,  257,  258,  259,
  260,  261,  345,  263,  264,  371,  349,  373,  257,  375,
  367,  260,  299,  287,  288,  289,  367,  291,  292,  293,
  294,  364,  367,  369,  349,  350,  371,  573,  288,  372,
  371,  374,  272,  367,  375,  275,  316,  583,  367,  279,
  262,  371,  282,  283,  266,  375,  369,  370,  513,  289,
  272,   10,   11,  275,  364,  277,  316,  279,  280,  281,
  347,  283,  349,  350,  367,  287,  288,  289,  371,  272,
  272,  367,  367,  275,  468,  371,  371,  279,  509,  510,
  282,  283,  377,  257,  364,  364,  260,  289,  553,  349,
   49,  364,  372,   52,  374,  365,  376,  367,  385,  386,
  387,  388,  311,  568,  364,  314,  371,  257,  373,  308,
  504,  310,  372,  312,  258,  314,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  257,  271,  272,
  273,  506,  370,  564,  565,  257,  530,  377,  272,  256,
  257,  258,  259,  260,  261,  365,  263,  367,  265,  371,
  267,  268,  269,  528,  302,  377,  273,  274,  371,  276,
  373,  365,  375,  367,  365,  367,  367,  284,  285,  371,
  365,  371,  367,  290,  291,  377,  293,  365,  295,  367,
  297,  298,  299,  382,  383,  302,  365,  304,  367,  306,
  345,  308,  369,  310,  365,  312,  365,  314,  573,  316,
  317,  257,  258,  257,  321,    3,    4,  257,  583,  283,
  283,  284,  285,  286,  331,  371,  333,  290,  335,  277,
  278,  279,  280,  281,  282,    3,    4,  257,  345,  371,
  347,  369,  349,  350,  371,  352,  353,  257,  355,  375,
  357,  358,  365,  360,  373,  362,  364,  364,  141,  142,
  275,  276,  369,  370,  319,  372,  279,  374,  374,  337,
  352,  264,  364,  272,  381,  373,  319,  384,  385,  386,
  387,  388,  256,  257,  258,  259,  260,  261,  369,  263,
  257,  265,  257,  267,  268,  373,  272,  258,  272,  273,
  274,  373,  276,  365,  257,  319,  365,  364,  375,  257,
  284,  285,  364,  319,  365,  373,  290,  291,  272,  293,
  365,  295,  371,  297,  298,  299,  364,  272,  302,  365,
  304,  365,  306,  365,  308,  337,  310,  262,  312,  367,
  314,  266,  316,  317,  375,  257,  365,  321,  365,    1,
  275,   46,  277,   51,   54,  280,  281,  331,  157,  333,
  301,  335,  287,  288,  289,  452,  221,   66,  256,  360,
  345,  345,  468,  347,  358,  349,  350,  350,  352,  353,
  482,  355,   -1,  357,  358,   -1,  360,   -1,  362,   -1,
  364,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,   -1,
  374,   -1,   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,
  384,  385,  386,  387,  388,  256,  257,  258,  259,  260,
  261,   -1,  263,   -1,  265,   -1,  267,  268,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,  290,
  291,   -1,  293,   -1,  295,   -1,  297,  298,  299,   -1,
   -1,  302,   -1,  304,   -1,  306,   -1,  308,   -1,  310,
  262,  312,   -1,  314,  266,  316,  317,   -1,   -1,   -1,
  321,   -1,   -1,  275,   -1,  277,   -1,   -1,  280,  281,
  331,   -1,  333,   -1,  335,  287,  288,  289,   -1,   -1,
   -1,   -1,   -1,   -1,  345,   -1,  347,   -1,  349,  350,
   -1,  352,  353,   -1,  355,   -1,  357,  358,   -1,  360,
   -1,  362,   -1,  364,   -1,   -1,   -1,   -1,   -1,  370,
   -1,  372,   -1,  374,  375,   -1,   -1,   -1,   -1,   -1,
  381,   -1,   -1,  384,  385,  386,  387,  388,  256,  257,
  258,  259,  260,  261,   -1,  263,   -1,  265,   -1,  267,
  268,  269,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,
   -1,   -1,  290,  291,   -1,  293,   -1,  295,   -1,  297,
  298,  299,   -1,   -1,  302,   -1,  304,   -1,  306,   -1,
  308,   -1,  310,  262,  312,   -1,  314,  266,  316,  317,
   -1,   -1,   -1,  321,   -1,   -1,  275,   -1,  277,   -1,
   -1,  280,  281,  331,   -1,  333,   -1,  335,  287,  288,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  345,   -1,  347,
   -1,  349,  350,   -1,  352,  353,   -1,  355,   -1,  357,
  358,   -1,  360,   -1,  362,   -1,  364,   -1,   -1,   -1,
   -1,   -1,  370,   -1,  372,   -1,  374,   -1,   -1,   -1,
   -1,   -1,   -1,  381,   -1,   -1,  384,  385,  386,  387,
  388,  256,  257,  258,  259,  260,  261,   -1,  263,   -1,
  265,   -1,  267,  268,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,   -1,  290,  291,   -1,  293,   -1,
  295,   -1,  297,  298,  299,   -1,   -1,  302,   -1,  304,
   -1,  306,   -1,  308,   -1,  310,  262,  312,   -1,  314,
  266,  316,  317,   -1,   -1,   -1,  321,   -1,   -1,  275,
   -1,  277,   -1,   -1,  280,  281,  331,   -1,  333,   -1,
  335,  287,  288,  289,   -1,   -1,   -1,   -1,   -1,   -1,
  345,   -1,  347,   -1,  349,  350,   -1,  352,  353,   -1,
  355,   -1,  357,  358,   -1,  360,   -1,  362,   -1,  364,
   -1,   -1,   -1,   -1,   -1,  370,   -1,  372,   -1,  374,
   -1,   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,  384,
  385,  386,  387,  388,  257,  258,  259,  260,  261,   -1,
  263,   -1,  265,   -1,  267,  268,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,   -1,  290,  291,   -1,
  293,   -1,  295,   -1,  297,  298,  299,   -1,   -1,  302,
   -1,  304,   -1,  306,   -1,  308,   -1,  310,  262,  312,
   -1,  314,  266,  316,  317,   -1,   -1,   -1,  321,   -1,
   -1,  275,   -1,  277,   -1,   -1,  280,  281,  331,   -1,
  333,   -1,  335,  287,  288,  289,   -1,   -1,   -1,   -1,
   -1,   -1,  345,   -1,  347,   -1,  349,  350,   -1,  352,
  353,   -1,  355,   -1,  357,  358,   -1,  360,   -1,  362,
   -1,  364,   -1,   -1,   -1,   -1,   -1,  370,   -1,  372,
   -1,  374,   -1,   -1,   -1,   -1,   -1,   -1,  381,   -1,
  264,  384,  385,  386,  387,  388,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,   -1,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
  354,   -1,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,   -1,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,   -1,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,   -1,  301,  302,  303,
   -1,  305,   -1,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,   -1,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,  373,
   -1,  375,   -1,  377,  378,  379,  380,   -1,  382,  383,
  264,  385,  386,  387,  388,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,  368,  369,   -1,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,   -1,   -1,  264,
   -1,  385,  386,  387,  388,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,
   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  368,  369,   -1,  371,  372,  373,  374,
  375,  376,  377,  378,  379,  380,   -1,   -1,  264,   -1,
  385,  386,  387,  388,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,  368,  369,   -1,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,   -1,   -1,  264,   -1,  385,
  386,  387,  388,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,
   -1,   -1,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,   -1,  322,  323,  324,   -1,  326,
   -1,  328,   -1,  330,   -1,  332,   -1,  334,   -1,  336,
   -1,  338,   -1,  340,   -1,  342,   -1,  344,  345,  346,
  347,  348,  349,  350,  351,   -1,  353,  354,  355,  356,
   -1,   -1,  359,   -1,  361,   -1,  363,  364,  365,  366,
  367,  368,  369,   -1,  371,  372,  373,  374,  375,  376,
  377,  378,   -1,  380,   -1,  382,  383,  264,  385,  386,
  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,
   -1,   -1,  299,  300,   -1,  302,   -1,  304,   -1,  306,
   -1,  308,   -1,  310,   -1,  312,   -1,  314,   -1,  316,
  317,   -1,   -1,  321,  321,   -1,   -1,  325,  325,  327,
  327,  329,  329,  331,  331,  333,  333,  335,  335,  337,
  337,  339,  339,  341,  341,  343,  343,   -1,  345,   -1,
  347,   -1,  349,  350,  352,  352,  353,   -1,  355,   -1,
  358,  358,  360,  360,  362,  362,   -1,  364,  365,  366,
  367,  368,  369,   -1,  371,  372,  373,  374,  375,  376,
  377,  379,  379,  380,   -1,  382,  383,  264,  385,  386,
  387,  388,   -1,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,
   -1,   -1,   -1,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
   -1,  348,   -1,   -1,  351,  352,  353,  354,  355,  356,
   -1,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,  368,  369,   -1,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  380,  264,  382,  383,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,
  300,  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,   -1,   -1,  318,  319,
  320,   -1,  322,  323,  324,  325,  326,  327,  328,  329,
  330,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
  340,  341,  342,  343,  344,   -1,  346,   -1,  348,   -1,
   -1,  351,   -1,   -1,  354,   -1,  356,   -1,   -1,  359,
   -1,  361,   -1,  363,   -1,  365,  366,  367,  368,  369,
   -1,  371,   -1,  373,   -1,  375,  376,  377,  378,  379,
  380,  264,  382,  383,   -1,   -1,   -1,  270,  271,  272,
   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,
  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,  294,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,
  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,   -1,   -1,  318,  319,  320,   -1,  322,
  323,  324,  325,  326,  327,  328,  329,  330,   -1,  332,
   -1,  334,   -1,  336,  337,  338,  339,  340,  341,  342,
  343,  344,   -1,  346,   -1,  348,   -1,   -1,  351,   -1,
   -1,  354,   -1,  356,   -1,   -1,  359,   -1,  361,   -1,
  363,   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,
  373,   -1,  375,  376,  377,  378,  379,  380,  264,  382,
  383,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,   -1,  300,  301,   -1,  303,   -1,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,
   -1,   -1,  318,  319,  320,   -1,  322,  323,  324,  325,
  326,  327,  328,  329,  330,   -1,  332,   -1,  334,   -1,
  336,  337,  338,  339,  340,  341,  342,  343,  344,   -1,
  346,   -1,  348,   -1,   -1,  351,   -1,   -1,  354,   -1,
  356,   -1,   -1,  359,   -1,  361,   -1,  363,   -1,  365,
  366,  367,  368,  369,   -1,  371,   -1,  373,   -1,  375,
  376,  377,  378,  379,  380,  264,  382,  383,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
   -1,  300,  301,   -1,  303,   -1,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,   -1,  315,   -1,   -1,  318,
  319,  320,   -1,  322,  323,  324,  325,  326,  327,  328,
  329,  330,   -1,  332,   -1,  334,   -1,  336,  337,  338,
  339,  340,  341,  342,  343,  344,   -1,  346,   -1,  348,
   -1,   -1,  351,   -1,   -1,  354,   -1,  356,   -1,   -1,
  359,   -1,  361,   -1,  363,   -1,  365,  366,  367,  368,
  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,  378,
  379,  380,  264,  382,  383,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,  300,  301,
   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,
   -1,  313,   -1,  315,   -1,   -1,  318,  319,  320,   -1,
  322,  323,  324,  325,  326,  327,  328,  329,  330,   -1,
  332,   -1,  334,   -1,  336,  337,  338,  339,  340,  341,
  342,  343,  344,   -1,  346,   -1,  348,   -1,   -1,  351,
   -1,   -1,  354,   -1,  356,   -1,   -1,  359,   -1,  361,
   -1,  363,   -1,  365,  366,  367,  368,  369,   -1,  371,
   -1,  373,   -1,  375,  376,  377,  378,  379,  380,  264,
  382,  383,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,
   -1,  296,   -1,   -1,   -1,  300,  301,   -1,  303,   -1,
  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,   -1,   -1,  318,  319,  320,   -1,  322,  323,  324,
  325,  326,  327,  328,  329,  330,   -1,  332,   -1,  334,
   -1,  336,  337,  338,  339,  340,  341,  342,  343,  344,
   -1,  346,   -1,  348,   -1,   -1,  351,   -1,   -1,  354,
   -1,  356,   -1,   -1,  359,   -1,  361,   -1,  363,   -1,
  365,  366,  367,  368,  369,   -1,  371,   -1,  373,   -1,
  375,  376,  377,  378,  379,  380,  264,  382,  383,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,
   -1,   -1,  300,  301,   -1,  303,   -1,  305,   -1,  307,
   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,   -1,
  318,  319,  320,   -1,  322,  323,  324,  325,  326,  327,
  328,  329,  330,   -1,  332,   -1,  334,   -1,  336,  337,
  338,  339,  340,  341,  342,  343,  344,   -1,  346,   -1,
  348,   -1,   -1,  351,   -1,   -1,  354,   -1,  356,   -1,
   -1,  359,   -1,  361,   -1,  363,   -1,  365,  366,  367,
  368,  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,
  378,  379,  380,  264,  382,  383,   -1,   -1,   -1,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,  300,
  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,
  311,   -1,  313,   -1,  315,   -1,   -1,  318,  319,  320,
   -1,  322,  323,  324,  325,  326,  327,  328,  329,  330,
   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,  340,
  341,  342,  343,  344,   -1,  346,   -1,  348,   -1,   -1,
  351,   -1,   -1,  354,   -1,  356,   -1,   -1,  359,   -1,
  361,   -1,  363,   -1,  365,  366,  367,  368,  369,   -1,
  371,   -1,  373,   -1,  375,  376,  377,  378,  379,  380,
  264,  382,  383,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,   -1,   -1,  318,  319,  320,   -1,  322,  323,
  324,  325,  326,  327,  328,  329,  330,   -1,  332,   -1,
  334,   -1,  336,  337,  338,  339,  340,  341,  342,  343,
  344,   -1,  346,   -1,  348,   -1,   -1,  351,   -1,   -1,
  354,   -1,  356,   -1,   -1,  359,   -1,  361,   -1,  363,
   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,  373,
   -1,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,
   -1,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  380,   -1,  382,  383,   -1,  385,  386,  387,  388,  301,
   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,
   -1,  313,   -1,  315,   -1,   -1,  318,  319,  320,   -1,
  322,  323,  324,   -1,  326,   -1,  328,   -1,  330,   -1,
  332,   -1,  334,   -1,  336,   -1,  338,   -1,  340,   -1,
  342,   -1,  344,   -1,  346,   -1,  348,  262,   -1,  351,
   -1,  266,  354,   -1,  356,   -1,   -1,  359,   -1,  361,
  275,  363,  277,   -1,   -1,  280,  281,   -1,   -1,   -1,
   -1,   -1,  287,  288,  289,   -1,  378,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 388
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","CRITICAL",
"DEFAULT","DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","INVOCABLE","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"PROCEDURE","RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","THREAD","TO",
"UNTIL","WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","SWAP","NMLT","AUGNMLT","REVASSIGN",
"REVSWAP","SLT","AUGSLT","SLE","AUGSLE","NMLE","AUGNMLE","NMEQ","AUGNMEQ","SEQ",
"AUGSEQ","EQUIV","AUGEQUIV","NMGT","AUGNMGT","NMGE","AUGNMGE","SGT","AUGSGT",
"SGE","AUGSGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET",
"BAR","CONCAT","AUGCONCAT","LCONCAT","AUGLCONCAT","TILDE","NMNE","AUGNMNE",
"SNE","AUGSNE","NEQUIV","AUGNEQUIV","LPAREN","RPAREN","PCOLON","COMMA","MCOLON",
"COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR",
"ABSTRACT","PMATCH","PAND","POR","PUNEVAL","PASSNONMATCH","PIMDASSN","PSETCUR",
"SND","SNDBK","RCV","RCVBK",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : proc",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : invocable",
"decl : cl",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial procbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial procbody",
"optsemi :",
"optsemi : SEMICOL",
"cl : classhead SEMICOL END",
"cl : classhead optsemi clocals methods optsemi initiallysection END",
"classhead : CLASS IDENT supers LPAREN carglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON IDENT",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"invocable : INVOCABLE invoclist",
"invoclist : invocop",
"invoclist : invoclist COMMA invocop",
"invocop : IDENT",
"invocop : STRINGLIT",
"invocop : STRINGLIT COLON INTLIT",
"package : PACKAGE lnkfile",
"import : IMPORT implist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"implist : lnkfile",
"implist : implist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"fldlist :",
"fldlist : idlist",
"proc : prochead SEMICOL locals initial procbody END",
"meth : methhead SEMICOL locals initial procbody END",
"meth : ABSTRACT methhead",
"prochead : PROCEDURE IDENT LPAREN arglist RPAREN",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"carglist :",
"carglist : cparmlist",
"carglist : cparmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"varlist : IDENT",
"varlist : IDENT ASSIGN expr1",
"varlist : varlist COMMA IDENT",
"varlist : varlist COMMA IDENT ASSIGN expr1",
"stalist : IDENT",
"stalist : IDENT ASSIGN expr1",
"stalist : stalist COMMA IDENT",
"stalist : stalist COMMA IDENT ASSIGN expr1",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"cparmlist : carg",
"cparmlist : cparmlist COMMA carg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"arg : IDENT COLON AND IDENT",
"arg : IDENT COLON IDENT COLON AND IDENT",
"arg : IDENT COLON LBRACK RBRACK",
"arg : IDENT COLON IDENT COLON LBRACK RBRACK",
"carg : priv arg",
"priv :",
"priv : PLUS",
"priv : MINUS",
"clocals :",
"clocals : clocals LOCAL varlist optsemi",
"locals :",
"locals : locals LOCAL varlist SEMICOL",
"locals : locals STATIC stalist SEMICOL",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"procbody :",
"procbody : nexpr SEMICOL procbody",
"nexpr :",
"nexpr : expr",
"expr : expr1a",
"expr : expr AND expr1a",
"expr1a : expr1",
"expr1a : expr1a QMARK expr1",
"expr1 : expr2a",
"expr1 : expr2a SWAP expr1",
"expr1 : expr2a ASSIGN expr1",
"expr1 : expr2a REVSWAP expr1",
"expr1 : expr2a REVASSIGN expr1",
"expr1 : expr2a AUGCONCAT expr1",
"expr1 : expr2a AUGLCONCAT expr1",
"expr1 : expr2a AUGDIFF expr1",
"expr1 : expr2a AUGUNION expr1",
"expr1 : expr2a AUGPLUS expr1",
"expr1 : expr2a AUGMINUS expr1",
"expr1 : expr2a AUGSTAR expr1",
"expr1 : expr2a AUGINTER expr1",
"expr1 : expr2a AUGSLASH expr1",
"expr1 : expr2a AUGMOD expr1",
"expr1 : expr2a AUGCARET expr1",
"expr1 : expr2a AUGNMEQ expr1",
"expr1 : expr2a AUGEQUIV expr1",
"expr1 : expr2a AUGNMGE expr1",
"expr1 : expr2a AUGNMGT expr1",
"expr1 : expr2a AUGNMLE expr1",
"expr1 : expr2a AUGNMLT expr1",
"expr1 : expr2a AUGNMNE expr1",
"expr1 : expr2a AUGNEQUIV expr1",
"expr1 : expr2a AUGSEQ expr1",
"expr1 : expr2a AUGSGE expr1",
"expr1 : expr2a AUGSGT expr1",
"expr1 : expr2a AUGSLE expr1",
"expr1 : expr2a AUGSLT expr1",
"expr1 : expr2a AUGSNE expr1",
"expr1 : expr2a AUGQMARK expr1",
"expr1 : expr2a AUGAND expr1",
"expr1 : expr2a AUGAT expr1",
"expr2a : expr2",
"expr2a : expr2a PMATCH expr2",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr2 : expr2 POR expr3",
"expr3 : expr4",
"expr3 : expr4 PAND expr3",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 SEQ expr5",
"expr4 : expr4 SGE expr5",
"expr4 : expr4 SGT expr5",
"expr4 : expr4 SLE expr5",
"expr4 : expr4 SLT expr5",
"expr4 : expr4 SNE expr5",
"expr4 : expr4 NMEQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr4 : expr4 EQUIV expr5",
"expr4 : expr4 NEQUIV expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr5 : expr5 LCONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PIMDASSN expr7",
"expr6 : expr6 PASSNONMATCH expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : postfixthreadop",
"expr8 : expr9 CARET expr8",
"postfixthreadop : expr9 SND",
"postfixthreadop : expr9 SNDBK",
"postfixthreadop : expr9 RCV",
"postfixthreadop : expr9 RCVBK",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 SND expr10",
"expr9 : expr9 SNDBK expr10",
"expr9 : expr9 RCV expr10",
"expr9 : expr9 RCVBK expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : SND expr10",
"expr10 : SNDBK expr10",
"expr10 : RCV expr10",
"expr10 : RCVBK expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : LCONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NMEQ expr10",
"expr10 : NMNE expr10",
"expr10 : SEQ expr10",
"expr10 : SNE expr10",
"expr10 : EQUIV expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : NEQUIV expr10",
"expr10 : BACKSLASH expr10",
"expr10 : PSETCUR expr10",
"expr11 : literal",
"$$1 :",
"expr11 : NMLT $$1 regex NMGT",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : SND",
"expr11 : SNDBK",
"expr11 : RCV",
"expr11 : RCVBK",
"expr11 : PUNEVAL",
"expr11 : CREATE expr",
"expr11 : THREAD expr",
"expr11 : CRITICAL expr2a COLON expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK caselist RBRACK",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : LBRACK COLON expr COLON RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : packageref",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"regex : neregex",
"regex :",
"neregex : neregex2a",
"neregex : neregex2a BAR neregex",
"neregex2a : neregex2",
"neregex2a : neregex2 neregex2a",
"neregex2 : neregex3",
"neregex2 : neregex2 STAR",
"neregex2 : neregex2 PLUS",
"neregex2 : neregex2 QMARK",
"neregex2 : neregex2 LBRACE INTLIT RBRACE",
"neregex3 : IDENT",
"neregex3 : BREAK",
"neregex3 : BY",
"neregex3 : PROCEDURE",
"neregex3 : INTLIT",
"neregex3 : REALLIT",
"neregex3 : STRINGLIT",
"neregex3 : CSETLIT",
"neregex3 : DOT",
"neregex3 : LPAREN regex RPAREN",
"neregex3 : LBRACK brackchars RBRACK",
"neregex3 : LBRACK CARET brackchars RBRACK",
"neregex3 : BACKSLASH neregex",
"brackchars : brackchars2",
"brackchars : brackchars MINUS brackchars2",
"brackchars : brackchars brackchars2",
"brackchars2 : IDENT",
"brackchars2 : INTLIT",
"brackchars2 : REALLIT",
"brackchars2 : DOT",
"brackchars2 : BACKSLASH IDENT",
"brackchars2 : BACKSLASH INTLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"proc : prochead error procbody END",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  local i
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 911 "unigram.y"

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
   local rhs

   if /iconc then
      return nd
   if not (*nd.children = 3) then
      return nd
   rhs := nd.children[3]
   if (not(type(rhs) == "treenode")) then
      return nd
   if (not(rhs.label == "invoke")) then
      return nd
   rhs := node("Paren", "(", rhs, ")")
   nd.children[3] := rhs
   return nd
end

procedure FieldRef(lhs, dot, rhs)
   if /iconc | (type(lhs) ~== "treenode") then
      return Field(lhs, dot, rhs)

   if (lhs.label == "invoke") then {
      tmpcount +:= 1;
      return node("Paren", "(",
         node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
         node("invoke", Field("__" || tmpcount, ".", rhs))
         );
      }
   return Field(lhs, dot, rhs)
end

procedure InvocationNode(args[])
   tmpcount +:= 1
   if type(args[1]) == "token" & (args[1].tok = IDENT) then {
       n1 := args[1]
       lparen := copy(args[1])
       lparen.tok := LPAREN
       lparen.s := "("
   }
   else {
       n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
       if lparen := Clone1stToken(args[1]) then {
	   lparen.tok := LPAREN
	   lparen.s := "("
       }
       else lparen := "("
   }
   if *args = 6 then {
       return node("Paren",lparen,node("invoke",
		    # iconc uses no __m business
		   (if /iconc then Field(Field(n1, ".", "__m"), "." , args[3])
			      else Field(n1, ".", args[3])),

	     args[4], node("exprlist",
	     if n1 === args[1] then args[1] else "__"||tmpcount,
	     if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
	     ,")")
      }
   else {
      if /iconc then
	 return  node("Paren",lparen,node("invoke",Field(Field(
			  Field(n1,".", "__m"),
			 "." , args[3]),".",args[5]),
		       args[6], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
		      ,")")
      else return SuperMethodInvok ! args
   }
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
   if /iconc then
      return node("invoke", expr11, lparen, args, rparen)

   if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
      return node("invoke", expr11, lparen, args, rparen)
      }

   if (type(expr11) == "treenode") then {
      case expr11.label of {
         "field": {
            #
            # need to examine lhs of field-ref to determine
            # whether we need to decompose the expr11 further...
            #
            if (type(expr11.children[1]) == "treenode") then {
               tmpcount +:= 1;
               n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
                  expr11.children[1]), ")")
               return node("exprlist", "(", n1, "&",
                  node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
                  lparen, args, rparen), ")")
               }
            else {
               return node("invoke", expr11, lparen, args, rparen)
               }
            }
         default: {
            return node("invoke", expr11, lparen, args, rparen)
            }
         }
      }
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
   tmpcount +:= 1
   if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
      n1 := args[1]
      lparen := copy(args[1])
      lparen.tok := LPAREN
      lparen.s := "("
      }
   else {
      n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
      if lparen := Clone1stToken(args[1]) then {
         lparen.tok := LPAREN
         lparen.s := "("
         }
      else
         lparen := "("
      }

   args[3].s := mangle_class_sym(args[3].s)
   args[3].s ||:= "__oprec"
   return node("exprlist", "(", n1, ")", " & ",
      node("Paren", lparen, node("invoke",
      Field(args[3], ".", args[5]),
      args[6], node("exprlist",
      if n1 === args[1] then args[1] else "__" || tmpcount,
      if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
      ")", ))
end

procedure isloco(node, s)
case type(node) of {
   "treenode": {
      if *node.children > 0 then return isloco(!node.children, s)
      }
   "token" : {
      if (node.tok = IDENT) & (node.s == s) then return
      }
   }
end

procedure buildtab_from_cclause(n, args)
   if type(n) ~== "treenode" then stop("bad table literal")
   comma := copy(n.children[2])
   comma.tok := COMMA
   comma.s := ","
   case n.label of {
     "cclause0": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	}
     "cclause1": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	push(args.children, comma)
	push(args.children, n.children[1])
	}
   }
end

# build a tree equivalent to
# {__tmp :=[]; every put(__tmp, expr); if __tmp>0 then __tmp}
# The enclosing procedure/method also needs to declare this temp var;
# see AppendListCompTemps
#
procedure ListComp(expr)
   local tmp
   tmpcount +:= 1
   tmp := "__" || tmpcount
   return node("ListComp",
		"{", string(tmp), " :=[]; every put(" || tmp || ", ",
		expr,
		"); if *" || tmp || ">0 then " || tmp || "}")
end

#
# AppendListCompTemps(localdecls, procbody) - at the procedure/method
# outermost level, we may need to add some declarations based on what's
# in the procbody. If there are changes to the declared lcls section,
# returns changed locals.
#
procedure AppendListCompTemps(lcls, body)
   # if there is, in the procbody, a list of varnames to declare
   if *\(ltmps := ListCompTemps(body)) > 0 then {
      # make a varlist containing ltmps
      if *ltmps > 1 then {
	 vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
	 every i := 2 to *ltmps do
	    vl := node("varlist3", vl, ",",
			token(IDENT, ltmps[i], 0, 0, "lambda.icn"))
	 }
      else {
	 # the varlist will just be an IDENT
	 vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
	 }
      if (lcls === EmptyNode) |
	  (type(lcls)==="treenode" & lcls.label==("locals2"|"locals3")) then {
	 return node("locals2", lcls, "local", vl, ";")
	 }
      else
	 write(&errout, "don't know what to do with ", image(lcls))
      }
end

#
# ListCompTemps(n) - lower level temp. var extraction from proc body.
# returns list of strings containing temp. variables from list comprehension
# L
procedure ListCompTemps(n)
   local LCT
   if type(n) == "treenode" then {
      if n.label=="ListComp" then {
	 LCT := [n.children[2]]
	 LCT |||:= ListCompTemps(n.children[4])
	 return LCT
	 }
      else if LCT := ListCompTemps(n.children[k := 1 to *(n.children)]) then {
	 every kk := k+1 to *(n.children) do {
	    LCT |||:= ListCompTemps(n.children[kk])
	    }
	 return LCT
	 }
      }
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
   args := node("elst1")
   write("I am a tablelit, cl is ", image(cl.label))
   while type(cl)=="treenode" & cl.label == "Caselist" do {
      buildtab_from_cclause(cl.children[3], args)
      cl := cl.children[1]
      }
   buildtab_from_cclause(cl, args)
   tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
   lp := copy(lb); lp.tok := LPAREN; lp.s := "("
   rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
   return node("invoke", tabid, lp, args, rp)
end

#
# A record type for recording errors for later reporting e.g. within an IDE,
# or to stderr.
#
record ParseError ( lineNumber, errorMessage )
#line 2894 "unigram.icn"
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    action[yyn]()          # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 301 "unigram.y"
 Progend(valstk[2]);
end

procedure action_2()
#line 303 "unigram.y"
 yyval := EmptyNode 
end

procedure action_3()
#line 304 "unigram.y"

	     if /parsingErrors | *parsingErrors = 0 then iwrites(&errout,".")
	     yyval := node("decls", valstk[2], valstk[1])
	     
end

procedure action_12()
#line 319 "unigram.y"
 yyval := EmptyNode 
end

procedure action_13()
#line 320 "unigram.y"

	   yyval := Method( , , , , , valstk[5], "initially", EmptyNode, "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_14()
#line 326 "unigram.y"

	   yyval := Method( , , , , , valstk[8], "initially", valstk[6], "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_15()
#line 334 "unigram.y"
 yyval := EmptyNode 
end

procedure action_17()
#line 337 "unigram.y"

   yyval := valstk[3]
   yyval.methods := methodstaque(&null, yyval)
   
end

procedure action_18()
#line 341 "unigram.y"

    yyval := class_from_parts(valstk[7], valstk[5], valstk[4], valstk[2])
   
end

procedure action_19()
#line 345 "unigram.y"

   yyval := Class()
   yyval.tag := valstk[6]
   yyval.unmangled_name := valstk[5].s
   yyval.name := package_mangled_symbol(valstk[5].s)
   if proc(yyval.name, 0) then
      warning("Warning: class "|| yyval.name ||" overrides the built-in function")
   else if \ (foobar := classes.lookup(yyval.name)) then {
      yyerror("redeclaration of class " || yyval.name)
      }
   else
      classes.insert(yyval, yyval.name)

   yyval.supers_node := valstk[4]
   yyval.fields := valstk[2]
   yyval.lptoken := valstk[3]
   yyval.rptoken := valstk[1]
   
end

procedure action_20()
#line 364 "unigram.y"
 yyval := EmptyNode 
end

procedure action_21()
#line 365 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_22()
#line 366 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_23()
#line 369 "unigram.y"
 yyval := node("packageref", valstk[3],valstk[2],valstk[1]) 
end

procedure action_24()
#line 370 "unigram.y"
 yyval := node("packageref", valstk[2],valstk[1]) 
end

procedure action_25()
#line 373 "unigram.y"
 yyval := EmptyNode 
end

procedure action_26()
#line 374 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_27()
#line 375 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_28()
#line 376 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_29()
#line 379 "unigram.y"
 yyval := node("invocable", valstk[2], valstk[1]);
end

procedure action_31()
#line 382 "unigram.y"
 yyval := node("invoclist", valstk[3],valstk[2],valstk[1]);
end

procedure action_34()
#line 386 "unigram.y"
yyval := node("invocop3", valstk[3],valstk[2],valstk[1]);
end

procedure action_35()
#line 388 "unigram.y"

   if \thePackage then {
      if not (thePackage.name == valstk[1].s) then {
         yyerror(yyfilename || " cannot be in both package "|| thePackage.name ||
            " and package " || valstk[1].s)
         yyval := EmptyNode
         }
      else { # this branch allowed for -C / iconc
         thePackage.insertfname(yyfilename)
         thePackage.add_imported()
         }
      }
   else {
      yyval := node("package", valstk[2],valstk[1]);
      thePackage := Package(valstk[1].s)
      thePackage.insertfname(yyfilename)
      thePackage.add_imported()
      }
   
end

procedure action_36()
#line 408 "unigram.y"

   yyval := node("import", valstk[2],valstk[1]," ")
   import_class(valstk[1])
   
end

procedure action_37()
#line 413 "unigram.y"
 yyval := node("link", valstk[2],valstk[1]," "); 
end

procedure action_39()
#line 416 "unigram.y"
 yyval := node("lnklist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_41()
#line 419 "unigram.y"
 yyval := node("implist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_44()
#line 424 "unigram.y"
 yyval := node("global", valstk[2],valstk[1]) 
end

procedure action_45()
#line 426 "unigram.y"

		yyval := declaration(valstk[4],valstk[2],valstk[5],valstk[3],valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_46()
#line 432 "unigram.y"
 yyval := EmptyNode 
end

procedure action_48()
#line 435 "unigram.y"

#		body_scopeck(valstk[2])
		valstk[4] := AppendListCompTemps(valstk[4], valstk[2])
		yyval := node("proc", valstk[6],";",valstk[4],valstk[3],valstk[2],valstk[1])
		
end

procedure action_49()
#line 441 "unigram.y"

		yyval := valstk[6]
		yyval.locals := valstk[4]
		yyval.initl := valstk[3]
		yyval.procbody := valstk[2]
		
end

procedure action_50()
#line 447 "unigram.y"

		yyval := valstk[1]
                yyval.abstract_flag := 1
		
end

procedure action_51()
#line 452 "unigram.y"

		yyval := declaration(valstk[4], valstk[2], valstk[5], valstk[3], valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_52()
#line 458 "unigram.y"

		yyval := Method( , , , , , valstk[5], valstk[4].s, valstk[2], valstk[5].s, valstk[3], valstk[1])
		
end

procedure action_53()
#line 463 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_54()
#line 464 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_55()
#line 465 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_56()
#line 467 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_57()
#line 468 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_58()
#line 469 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_60()
#line 473 "unigram.y"
 yyval := node("idlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_62()
#line 476 "unigram.y"
 yyval := node("varlist2", valstk[3], valstk[2], valstk[1])
end

procedure action_63()
#line 477 "unigram.y"
 yyval := node("varlist3", valstk[3], valstk[2], valstk[1])
end

procedure action_64()
#line 478 "unigram.y"
 yyval := node("varlist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_66()
#line 481 "unigram.y"
 yyval := node("stalist2", valstk[3], valstk[2], valstk[1])
end

procedure action_67()
#line 482 "unigram.y"
 yyval := node("stalist3", valstk[3], valstk[2], valstk[1])
end

procedure action_68()
#line 483 "unigram.y"
 yyval := node("stalist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_70()
#line 486 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_72()
#line 489 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_74()
#line 492 "unigram.y"
 yyval := node("arg2", valstk[3], valstk[2], valstk[1]) 
end

procedure action_75()
#line 493 "unigram.y"
 yyval := node("arg3", valstk[3], valstk[2], valstk[1]) 
end

procedure action_76()
#line 494 "unigram.y"
 yyval := node("arg4", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_77()
#line 495 "unigram.y"
 yyval := node("arg5", valstk[4], valstk[3], Keyword(valstk[2], valstk[1])) 
end

procedure action_78()
#line 496 "unigram.y"
 yyval := node("arg6", valstk[6], valstk[5], valstk[4], valstk[3], Keyword(valstk[2], valstk[1])) 
end

procedure action_79()
#line 497 "unigram.y"
 yyval := node("arg7", valstk[4], valstk[3], "[]") 
end

procedure action_80()
#line 498 "unigram.y"
 yyval := node("arg8", valstk[6], valstk[5], valstk[4], valstk[3], "[]") 
end

procedure action_81()
#line 501 "unigram.y"
 yyval := valstk[1] 
end

procedure action_82()
#line 503 "unigram.y"
 yyval := EmptyNode;
end

procedure action_85()
#line 507 "unigram.y"
 yyval := EmptyNode;
end

procedure action_86()
#line 508 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_87()
#line 510 "unigram.y"
 yyval := EmptyNode;
end

procedure action_88()
#line 511 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_89()
#line 512 "unigram.y"
 yyval := node("locals3", valstk[4],valstk[3],valstk[2],";");
end

procedure action_90()
#line 514 "unigram.y"
 yyval := EmptyNode 
end

procedure action_91()
#line 515 "unigram.y"

	   yyval := node("initial", valstk[3], valstk[2],";")
	      
end

procedure action_92()
#line 519 "unigram.y"
 yyval := EmptyNode 
end

procedure action_93()
#line 520 "unigram.y"
 yyval := node("procbody", valstk[3],";",valstk[1]);
end

procedure action_94()
#line 522 "unigram.y"
 yyval := EmptyNode 
end

procedure action_97()
#line 526 "unigram.y"
 yyval := node("and", valstk[3],valstk[2],valstk[1]) 
end

procedure action_99()
#line 529 "unigram.y"
 yyval := node("binques", valstk[3],valstk[2],valstk[1]);
end

procedure action_101()
#line 532 "unigram.y"
 yyval := node("swap", valstk[3],valstk[2],valstk[1]);
end

procedure action_102()
#line 533 "unigram.y"
 
          yyval := parenthesize_assign(node("assign",valstk[3],valstk[2],valstk[1]));
          
end

procedure action_103()
#line 536 "unigram.y"
 yyval := node("revswap", valstk[3],valstk[2],valstk[1]);
end

procedure action_104()
#line 537 "unigram.y"
 yyval := node("revasgn", valstk[3],valstk[2],valstk[1]);
end

procedure action_105()
#line 538 "unigram.y"
 yyval := node("augcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_106()
#line 539 "unigram.y"
 yyval := node("auglcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_107()
#line 540 "unigram.y"
 yyval := node("Bdiffa", valstk[3],valstk[2],valstk[1]);
end

procedure action_108()
#line 541 "unigram.y"
 yyval := node("Buniona", valstk[3],valstk[2],valstk[1]);
end

procedure action_109()
#line 542 "unigram.y"
 yyval := node("Bplusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_110()
#line 543 "unigram.y"
 yyval := node("Bminusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_111()
#line 544 "unigram.y"
 yyval := node("Bstara", valstk[3],valstk[2],valstk[1]);
end

procedure action_112()
#line 545 "unigram.y"
 yyval := node("Bintera", valstk[3],valstk[2],valstk[1]);
end

procedure action_113()
#line 546 "unigram.y"
 yyval := node("Bslasha", valstk[3],valstk[2],valstk[1]);
end

procedure action_114()
#line 547 "unigram.y"
 yyval := node("Bmoda", valstk[3],valstk[2],valstk[1]);
end

procedure action_115()
#line 548 "unigram.y"
 yyval := node("Bcareta", valstk[3],valstk[2],valstk[1]);
end

procedure action_116()
#line 549 "unigram.y"
 yyval := node("Baugeq", valstk[3],valstk[2],valstk[1]);
end

procedure action_117()
#line 550 "unigram.y"
 yyval := node("Baugeqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_118()
#line 551 "unigram.y"
 yyval := node("Baugge", valstk[3],valstk[2],valstk[1]);
end

procedure action_119()
#line 552 "unigram.y"
 yyval := node("Bauggt", valstk[3],valstk[2],valstk[1]);
end

procedure action_120()
#line 553 "unigram.y"
 yyval := node("Baugle", valstk[3],valstk[2],valstk[1]);
end

procedure action_121()
#line 554 "unigram.y"
 yyval := node("Bauglt", valstk[3],valstk[2],valstk[1]);
end

procedure action_122()
#line 555 "unigram.y"
 yyval := node("Baugne", valstk[3],valstk[2],valstk[1]);
end

procedure action_123()
#line 556 "unigram.y"
 yyval := node("Baugneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_124()
#line 557 "unigram.y"
 yyval := node("Baugseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_125()
#line 558 "unigram.y"
 yyval := node("Baugsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_126()
#line 559 "unigram.y"
 yyval := node("Baugsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_127()
#line 560 "unigram.y"
 yyval := node("Baugsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_128()
#line 561 "unigram.y"
 yyval := node("Baugslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_129()
#line 562 "unigram.y"
 yyval := node("Baugsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_130()
#line 563 "unigram.y"
 yyval := node("Baugques", valstk[3],valstk[2],valstk[1]);
end

procedure action_131()
#line 564 "unigram.y"
 yyval := node("Baugamper", valstk[3],valstk[2],valstk[1]);
end

procedure action_132()
#line 565 "unigram.y"
 yyval := node("Baugact", valstk[3],valstk[2],valstk[1]);
end

procedure action_134()
#line 568 "unigram.y"
 yyval := node("BPmatch", valstk[3],valstk[2],valstk[1]);
end

procedure action_136()
#line 571 "unigram.y"
 yyval := node("to", valstk[3],valstk[2],valstk[1]);
end

procedure action_137()
#line 572 "unigram.y"
 yyval := node("toby", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_138()
#line 573 "unigram.y"
 yyval := node("BPor", valstk[3],valstk[2],valstk[1]); 
end

procedure action_140()
#line 576 "unigram.y"
 yyval := node("BPand", valstk[3],valstk[2],valstk[1]); 
end

procedure action_141()
#line 577 "unigram.y"
yyval := node(BAR, valstk[3],valstk[2],valstk[1]);
end

procedure action_143()
#line 580 "unigram.y"
 yyval := node("Bseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_144()
#line 581 "unigram.y"
 yyval := node("Bsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_145()
#line 582 "unigram.y"
 yyval := node("Bsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_146()
#line 583 "unigram.y"
 yyval := node("Bsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_147()
#line 584 "unigram.y"
 yyval := node("Bslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_148()
#line 585 "unigram.y"
 yyval := node("Bsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_149()
#line 586 "unigram.y"
 yyval := node("Beq", valstk[3],valstk[2],valstk[1]);
end

procedure action_150()
#line 587 "unigram.y"
 yyval := node("Bge", valstk[3],valstk[2],valstk[1]);
end

procedure action_151()
#line 588 "unigram.y"
 yyval := node("Bgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_152()
#line 589 "unigram.y"
 yyval := node("Ble", valstk[3],valstk[2],valstk[1]);
end

procedure action_153()
#line 590 "unigram.y"
 yyval := node("Blt", valstk[3],valstk[2],valstk[1]);
end

procedure action_154()
#line 591 "unigram.y"
 yyval := node("Bne", valstk[3],valstk[2],valstk[1]);
end

procedure action_155()
#line 592 "unigram.y"
 yyval := node("Beqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_156()
#line 593 "unigram.y"
 yyval := node("Bneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_158()
#line 596 "unigram.y"
 yyval := node("Bcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_159()
#line 597 "unigram.y"
 yyval := node("Blcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_161()
#line 600 "unigram.y"
 yyval := node("BPiam", valstk[3],valstk[2],valstk[1]);
end

procedure action_162()
#line 601 "unigram.y"
 yyval := node("BPaom", valstk[3],valstk[2],valstk[1]);
end

procedure action_163()
#line 602 "unigram.y"
 yyval := node("Bplus", valstk[3],valstk[2],valstk[1]);
end

procedure action_164()
#line 603 "unigram.y"
 yyval := node("Bdiff", valstk[3],valstk[2],valstk[1]);
end

procedure action_165()
#line 604 "unigram.y"
 yyval := node("Bunion", valstk[3],valstk[2],valstk[1]);
end

procedure action_166()
#line 605 "unigram.y"
 yyval := node("Bminus", valstk[3],valstk[2],valstk[1]);
end

procedure action_168()
#line 608 "unigram.y"
 yyval := node("Bstar", valstk[3],valstk[2],valstk[1]);
end

procedure action_169()
#line 609 "unigram.y"
 yyval := node("Binter", valstk[3],valstk[2],valstk[1]);
end

procedure action_170()
#line 610 "unigram.y"
 yyval := node("Bslash", valstk[3],valstk[2],valstk[1]);
end

procedure action_171()
#line 611 "unigram.y"
 yyval := node("Bmod", valstk[3],valstk[2],valstk[1]);
end

procedure action_174()
#line 615 "unigram.y"
 yyval := node("Bcaret", valstk[3],valstk[2],valstk[1]);
end

procedure action_175()
#line 618 "unigram.y"
 yyval := node("Bsnd", valstk[2],valstk[1],EmptyNode);
end

procedure action_176()
#line 619 "unigram.y"
 yyval := node("Bsndbk", valstk[2],valstk[1],EmptyNode);
end

procedure action_177()
#line 620 "unigram.y"
 yyval := node("Brcv", valstk[2],valstk[1],EmptyNode);
end

procedure action_178()
#line 621 "unigram.y"
 yyval := node("Brcvbk", valstk[2],valstk[1],EmptyNode);
end

procedure action_180()
#line 624 "unigram.y"
 yyval := node("limit", valstk[3],valstk[2],valstk[1]);
end

procedure action_181()
#line 625 "unigram.y"
 yyval := node("at", valstk[3],valstk[2],valstk[1]);
end

procedure action_182()
#line 626 "unigram.y"
 yyval := node("Bsnd", valstk[3],valstk[2],valstk[1]);
end

procedure action_183()
#line 627 "unigram.y"
 yyval := node("Bsndbk", valstk[3],valstk[2],valstk[1]);
end

procedure action_184()
#line 628 "unigram.y"
 yyval := node("Brcv", valstk[3],valstk[2],valstk[1]);
end

procedure action_185()
#line 629 "unigram.y"
 yyval := node("Brcvbk", valstk[3],valstk[2],valstk[1]);
end

procedure action_186()
#line 630 "unigram.y"
 yyval := node("apply", valstk[3],valstk[2],valstk[1]);
end

procedure action_188()
#line 633 "unigram.y"
 yyval := node("uat", valstk[2],valstk[1]);
end

procedure action_189()
#line 634 "unigram.y"
 yyval := node("Bsnd", EmptyNode,valstk[2],valstk[1]);
end

procedure action_190()
#line 635 "unigram.y"
 yyval := node("Bsndbk", EmptyNode,valstk[2],valstk[1]);
end

procedure action_191()
#line 636 "unigram.y"
 yyval := node("Brcv", EmptyNode,valstk[2],valstk[1]);
end

procedure action_192()
#line 637 "unigram.y"
 yyval := node("Brcvbk", EmptyNode,valstk[2],valstk[1]);
end

procedure action_193()
#line 638 "unigram.y"
 yyval := node("unot", valstk[2],valstk[1]);
end

procedure action_194()
#line 639 "unigram.y"
 yyval := node("ubar", valstk[2],valstk[1]);
end

procedure action_195()
#line 640 "unigram.y"
 yyval := node("uconcat", valstk[2],valstk[1]);
end

procedure action_196()
#line 641 "unigram.y"
 yyval := node("ulconcat", valstk[2],valstk[1]);
end

procedure action_197()
#line 642 "unigram.y"
 yyval := node("udot", valstk[2],valstk[1]);
end

procedure action_198()
#line 643 "unigram.y"
 yyval := node("ubang", valstk[2],valstk[1]);
end

procedure action_199()
#line 644 "unigram.y"
 yyval := node("udiff", valstk[2],valstk[1]);
end

procedure action_200()
#line 645 "unigram.y"
 yyval := node("uplus", valstk[2],valstk[1]);
end

procedure action_201()
#line 646 "unigram.y"
 yyval := node("ustar", valstk[2],valstk[1]);
end

procedure action_202()
#line 647 "unigram.y"
 yyval := node("uslash", valstk[2],valstk[1]);
end

procedure action_203()
#line 648 "unigram.y"
 yyval := node("ucaret", valstk[2],valstk[1]);
end

procedure action_204()
#line 649 "unigram.y"
 yyval := node("uinter", valstk[2],valstk[1]);
end

procedure action_205()
#line 650 "unigram.y"
 yyval := node("utilde", valstk[2],valstk[1]);
end

procedure action_206()
#line 651 "unigram.y"
 yyval := node("uminus", valstk[2],valstk[1]);
end

procedure action_207()
#line 652 "unigram.y"
 yyval := node("unumeq", valstk[2],valstk[1]);
end

procedure action_208()
#line 653 "unigram.y"
 yyval := node("unumne", valstk[2],valstk[1]);
end

procedure action_209()
#line 654 "unigram.y"
 yyval := node("ulexeq", valstk[2],valstk[1]);
end

procedure action_210()
#line 655 "unigram.y"
 yyval := node("ulexne", valstk[2],valstk[1]);
end

procedure action_211()
#line 656 "unigram.y"
 yyval := node("uequiv", valstk[2],valstk[1]);
end

procedure action_212()
#line 657 "unigram.y"
 yyval := node("uunion", valstk[2],valstk[1]);
end

procedure action_213()
#line 658 "unigram.y"
 yyval := node("uqmark", valstk[2],valstk[1]);
end

procedure action_214()
#line 659 "unigram.y"
 yyval := node("unotequiv", valstk[2],valstk[1]);
end

procedure action_215()
#line 660 "unigram.y"
 yyval := node("ubackslash", valstk[2],valstk[1]);
end

procedure action_216()
#line 661 "unigram.y"
 yyval := node("upsetcur", valstk[2],valstk[1]);
end

procedure action_218()
#line 664 "unigram.y"
 next_gt_is_ender := 1 
end

procedure action_219()
#line 664 "unigram.y"
 yyval := node("regex", valstk[2]); 
end

procedure action_228()
#line 673 "unigram.y"
 yyval := node("Bsnd", EmptyNode,valstk[1],EmptyNode);
end

procedure action_229()
#line 674 "unigram.y"
 yyval := node("Bsndbk", EmptyNode,valstk[1],EmptyNode);
end

procedure action_230()
#line 675 "unigram.y"
 yyval := node("Brcv", EmptyNode,valstk[1],EmptyNode);
end

procedure action_231()
#line 676 "unigram.y"
 yyval := node("Brcvbk", EmptyNode,valstk[1],EmptyNode);
end

procedure action_232()
#line 677 "unigram.y"
 yyval := node("BPuneval", valstk[1]);
end

procedure action_233()
#line 678 "unigram.y"
 yyval := node("create", valstk[2],valstk[1]);
end

procedure action_234()
#line 679 "unigram.y"

	      fakeThreadIdent := Clone1stToken(valstk[2])
	      fakeThreadIdent.tok := IDENT
	      fakeCreate := Clone1stToken(valstk[2])
	      fakeCreate.tok := CREATE
	      fakeCreate.s := "create"
	      fakeThreadIdent.s := "spawn"
	      fakeLParen := Clone1stToken(valstk[2])
	      fakeLParen.tok := LPAREN
	      fakeLParen.s := "("
	      fakeRParen := Clone1stToken(valstk[2])
	      fakeRParen.tok := RPAREN
	      fakeRParen.s := ")"

	      yyval := SimpleInvocation(fakeThreadIdent,fakeLParen,
				     node("create", fakeCreate, valstk[1]),
				     fakeRParen);
	      
end

procedure action_235()
#line 697 "unigram.y"
 yyval := node("critical", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_237()
#line 699 "unigram.y"
 yyval := node("Next", valstk[1]);
end

procedure action_238()
#line 700 "unigram.y"
 yyval := node("Break", valstk[2],valstk[1]);
end

procedure action_239()
#line 701 "unigram.y"
 yyval := node("Paren", valstk[3],valstk[2],valstk[1]);
end

procedure action_240()
#line 702 "unigram.y"
 yyval := node("Brace", valstk[3],valstk[2],valstk[1]);
end

procedure action_241()
#line 703 "unigram.y"
 yyval := tablelit(valstk[3],valstk[2],valstk[1]);
end

procedure action_242()
#line 704 "unigram.y"
 yyval := node("Brack", valstk[3],valstk[2],valstk[1]);
end

procedure action_243()
#line 705 "unigram.y"
 yyval := ListComp(valstk[3]);
end

procedure action_244()
#line 706 "unigram.y"
 yyval := node("Subscript", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_245()
#line 707 "unigram.y"
 yyval := node("Pdco0", valstk[3],valstk[2],valstk[1]);
end

procedure action_246()
#line 708 "unigram.y"
 yyval := node("Pdco1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_247()
#line 709 "unigram.y"

           yyval := SimpleInvocation(valstk[4],valstk[3],valstk[2],valstk[1]);
      
end

procedure action_248()
#line 712 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_249()
#line 715 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_250()
#line 718 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_251()
#line 721 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_252()
#line 724 "unigram.y"

           yyval := FieldRef(valstk[3],valstk[2],valstk[1]);
      
end

procedure action_254()
#line 728 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]) 
end

procedure action_255()
#line 729 "unigram.y"
 yyval := node("keyword",valstk[2],valstk[1]) 
end

procedure action_256()
#line 730 "unigram.y"
 yyval := Keyword(valstk[2],valstk[1]) 
end

procedure action_257()
#line 732 "unigram.y"

	    yyval := node("While0", valstk[2],valstk[1]);
	    
end

procedure action_258()
#line 735 "unigram.y"

	    # warn if a while loop should be an every.
	    # should generalize; compute a semantic attribute and
	    # warn if a while loop control expression is a generator.
	    # but for now, only complain about the most obvious case
	    if type(valstk[3]) == "treenode" & valstk[3].label === "assign" &
	       *valstk[3].children = 3 & type(valstk[3].children[3]) == "treenode" &
	       valstk[3].children[3].label == "to" & *(valstk[3].children[3].children)=3 &
		     (type(valstk[3].children[3].children[1]) ===
		      type(valstk[3].children[3].children[3]) === "token") &
		     (valstk[3].children[3].children[1].tok = 
		      valstk[3].children[3].children[3].tok = INTLIT) &
		     valstk[3].children[3].children[1].s<=valstk[3].children[3].children[3].s
	    then {
		warning("infinite loop; use \"every\" to loop on generator results",
			valstk[4].line, valstk[4].filename, valstk[4].s
			)
	       }
	    yyval := node("While1", valstk[4],valstk[3],valstk[2],valstk[1]);
	    
end

procedure action_259()
#line 756 "unigram.y"
 yyval := node("until", valstk[2],valstk[1]);
end

procedure action_260()
#line 757 "unigram.y"
 yyval := node("until1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_261()
#line 759 "unigram.y"
 yyval := node("every", valstk[2],valstk[1]);
end

procedure action_262()
#line 760 "unigram.y"
 yyval := node("every1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_263()
#line 762 "unigram.y"
 yyval := node("repeat", valstk[2],valstk[1]);
end

procedure action_265()
#line 765 "unigram.y"
 yyval := node("return", valstk[2], valstk[1]);
end

procedure action_266()
#line 766 "unigram.y"
 yyval := node("Suspend0", valstk[2],valstk[1]);
end

procedure action_267()
#line 767 "unigram.y"
 yyval := node("Suspend1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_268()
#line 769 "unigram.y"
 yyval := node("If0", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_269()
#line 770 "unigram.y"
 yyval := node("If1", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_270()
#line 772 "unigram.y"
 yyval := node("Case", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_272()
#line 775 "unigram.y"
 yyval := node("Caselist", valstk[3],";",valstk[1]);
end

procedure action_273()
#line 777 "unigram.y"
 yyval := node("cclause0", valstk[3],valstk[2],valstk[1]);
end

procedure action_274()
#line 778 "unigram.y"
 yyval := node("cclause1", valstk[3],valstk[2],valstk[1]);
end

procedure action_276()
#line 781 "unigram.y"

	   if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
	      yyval := valstk[3]; put(yyval.children, valstk[2], valstk[1])
	      }
	   else
	      yyval := node("elst1", valstk[3],valstk[2],valstk[1])
	   
end

procedure action_277()
#line 789 "unigram.y"
 yyval := node("pdcolist0", valstk[1]) 
end

procedure action_278()
#line 790 "unigram.y"
 yyval := node("pdcolist1", valstk[3],valstk[2],valstk[1]); 
end

procedure action_283()
#line 797 "unigram.y"
 yyval := regexp(valstk[1]) 
end

procedure action_284()
#line 798 "unigram.y"
 yyval := "emptyregex" 
end

procedure action_286()
#line 803 "unigram.y"
 yyval := node("regexbar", valstk[3], valstk[2], valstk[1]) 
end

procedure action_288()
#line 807 "unigram.y"
 yyval := node("regexconcat", valstk[2], valstk[1]) 
end

procedure action_290()
#line 811 "unigram.y"
 yyval := node("kleene", valstk[2], valstk[1]) 
end

procedure action_291()
#line 812 "unigram.y"
 yyval := node("oneormore", valstk[2], valstk[1]) 
end

procedure action_292()
#line 813 "unigram.y"
 yyval := node("optional", valstk[2], valstk[1]) 
end

procedure action_293()
#line 814 "unigram.y"

	   if valstk[2].s < 0 then {
	      yyerror("regex occurrences may not be negative")
	      yyval := node("error")
	      }
	   else if valstk[2].s = 0 then {
	      yyerror("regex occurrences may not be zero yet")
	      yyval := node("error")
	      }
	   else if valstk[2].s = 1 then yyval := valstk[4]
	   else { # normal case, positive number of repeats of valstk[4]
	      yyval := valstk[4]
	      every i := 2 to valstk[2].s do {
	         yyval := node("regexconcat", yyval, valstk[4])
	         }
	      }
	   
end

procedure action_295()
#line 834 "unigram.y"
 yyval := valstk[1]; yyval.tok := IDENT 
end

procedure action_296()
#line 835 "unigram.y"
 yyval := valstk[1]; yyval.tok := IDENT 
end

procedure action_297()
#line 836 "unigram.y"
 yyval := valstk[1]; yyval.tok := IDENT 
end

procedure action_303()
#line 842 "unigram.y"
 yyval := node("Paren",valstk[3],valstk[2],valstk[1]); 
end

procedure action_304()
#line 843 "unigram.y"

	      yyval := node("acset", valstk[3], valstk[2], valstk[1])
	      if type(valstk[2]) == "token" then {
	         if not ((valstk[3].line == valstk[2].line) &
		         (valstk[3].column + 1 == valstk[2].column)) then {
		    # [ is nonadjacent, add space
		    valstk[2].s := " " || valstk[2].s
		    }
	         }
		 else write("[ followed by ", type(valstk[2]), " so not checking for space")
	      
end

procedure action_305()
#line 854 "unigram.y"
 yyval := node("notany", valstk[4], valstk[3], valstk[2], valstk[1]) 
end

procedure action_306()
#line 855 "unigram.y"
 yyval := node("escape", valstk[2], valstk[1]) 
end

procedure action_308()
#line 859 "unigram.y"
 yyval := node("brackchars", valstk[3], valstk[2], valstk[1]) 
end

procedure action_309()
#line 860 "unigram.y"

	   if type(valstk[2]) == "treenode" then {
	     c1 := csetify(valstk[2])
	     }
	   if type(valstk[1]) == "treenode" then c2 := csetify(valstk[1])

	   yyval := copy(valstk[2])
	   while type(yyval) == "treenode" do {
	      yyval := copy(yyval.children[1])
	      yyval.s := c1
	      }
	   if type(yyval) ~== "token" then stop("regex type ", image(yyval))

	   if type(valstk[1]) == "treenode" then yyval.s ||:= c2
	   else yyval.s ||:= valstk[1].s
	   
end

procedure action_314()
#line 879 "unigram.y"
 # ordinary escape char
	   yyval := valstk[1]
	   yyval.column := valstk[2].column
	   case yyval.s[1] of {
	      "b"|"d"|"e"|"f"|"l"|"n"|"r"|"t"|"v": yyval.s[1] := "\\" || yyval.s[1]
	      default: stop("unrecognized escape char \\", yyval.s[1])
	      }
	
end

procedure action_315()
#line 887 "unigram.y"
 #escaped octal?
	   yyval := valstk[1]
	   yyval.column := valstk[2].column
	   case yyval.s[1] of {
	      "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7": yyval.s[1] := "\\" || yyval.s[1]
	      default: stop("non-octal numeric escape char \\", yyval.s[1])
	      }
	   
end

procedure action_316()
#line 897 "unigram.y"
 yyval := node("section", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_321()
#line 904 "unigram.y"
 yyval := node("compound", valstk[3],";",valstk[1]);
end

procedure action_323()
#line 907 "unigram.y"
 yyval := node("error", valstk[4],valstk[2],valstk[1]); 
end

procedure action_324()
#line 908 "unigram.y"
 yyval := node("error"); 
end

#line 4482 "unigram.icn"
