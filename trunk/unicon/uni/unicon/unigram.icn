### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 136 "unigram.y"

procedure Keyword(x1,x2)
   static keywords
   initial {
      keywords := set(["allocated","clock","collections","column","current",
		       "date","now","dateline","digits","e","error",
		       "errornumber","errortext","errorvalue","errout","fail",
		       "eventcode","eventsource","eventvalue","features",
		       "file","host","input","lcase","letters","level",
		       "line","main","null","output","phi","pi","pos",
		       "progname","random","regions","source","storage",
		       "subject","time","trace","dump","ucase","version",
		       "errno","window","col","row","x","y","interval",
		       "control","shift","meta","lpress","mpress","rpress",
		       "lrelease","mrelease","rrelease","ldrag","mdrag",
		       "rdrag","resize","ascii","cset"])
      }

   # verify that x2 is a valid keyword
   if not member(keywords, x2.s) then
      write(&errout, "&",x2.s," is not a valid keyword!")

   return node("keyword",x1,x2)
end

procedure Field(x1,x2,x3)
   return node("field",x1,x2,x3)
end

procedure Clone1stToken(n)
   case type(n) of {
      "token": return copy(n)
      "treenode": {
	 return Clone1stToken(!n.children)
	 }
      }
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
   
   package_level_syms := set()
   package_level_class_syms := set()
   set_package_level_syms(x1)
   scopecheck_superclass_decs(x1)

   outline := 1
   outcol := 1
   #
   # export specifications for each class
   #
   native := set()
   every cl := classes.foreach_t() do {
      cl.WriteSpec()
      insert(native, cl)
      }
   #
   # import class specifications, transitively
   #
   repeat {
      added := 0
      every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
         if /classes.lookup(super) then {
	    added := 1
	    readspec(super)
	    cl := classes.lookup(super)
	    if /cl then halt("can't inherit class '",super,"'")
	    iwrite("  inherits ", super, " from ", cl.linkfile)
	    writelink(cl.dir, cl.linkfile)
            }
       }
    if added = 0 then break
  }
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
  every (classes.foreach_t()).transitive_closure()
  every (classes.foreach_t()).resolve()

  scopecheck_bodies(x1)

   if \thePackage then {
      every thePackage.insertsym(!package_level_syms)
      }

  #
  # generate output
  #
#  iwrite("Generating code:")
   yyprint(x1)
   write(yyout)
end
#line 99 "unigram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define DEFAULT 268
$define DO 269
$define ELSE 270
$define END 271
$define EVERY 272
$define FAIL 273
$define GLOBAL 274
$define IF 275
$define IMPORT 276
$define iconINITIAL 277
$define INITIALLY 278
$define INVOCABLE 279
$define LINK 280
$define LOCAL 281
$define METHOD 282
$define NEXT 283
$define NOT 284
$define OF 285
$define PACKAGE 286
$define PROCEDURE 287
$define RECORD 288
$define REPEAT 289
$define RETURN 290
$define STATIC 291
$define SUSPEND 292
$define THEN 293
$define TO 294
$define UNTIL 295
$define WHILE 296
$define BANG 297
$define MOD 298
$define AUGMOD 299
$define AND 300
$define AUGAND 301
$define STAR 302
$define AUGSTAR 303
$define INTER 304
$define AUGINTER 305
$define PLUS 306
$define AUGPLUS 307
$define UNION 308
$define AUGUNION 309
$define MINUS 310
$define AUGMINUS 311
$define DIFF 312
$define AUGDIFF 313
$define DOT 314
$define SLASH 315
$define AUGSLASH 316
$define ASSIGN 317
$define SWAP 318
$define NMLT 319
$define AUGNMLT 320
$define REVASSIGN 321
$define REVSWAP 322
$define SLT 323
$define AUGSLT 324
$define SLE 325
$define AUGSLE 326
$define NMLE 327
$define AUGNMLE 328
$define NMEQ 329
$define AUGNMEQ 330
$define SEQ 331
$define AUGSEQ 332
$define EQUIV 333
$define AUGEQUIV 334
$define NMGT 335
$define AUGNMGT 336
$define NMGE 337
$define AUGNMGE 338
$define SGT 339
$define AUGSGT 340
$define SGE 341
$define AUGSGE 342
$define QMARK 343
$define AUGQMARK 344
$define AT 345
$define AUGAT 346
$define BACKSLASH 347
$define CARET 348
$define AUGCARET 349
$define BAR 350
$define CONCAT 351
$define AUGCONCAT 352
$define LCONCAT 353
$define AUGLCONCAT 354
$define TILDE 355
$define NMNE 356
$define AUGNMNE 357
$define SNE 358
$define AUGSNE 359
$define NEQUIV 360
$define AUGNEQUIV 361
$define LPAREN 362
$define RPAREN 363
$define PCOLON 364
$define COMMA 365
$define MCOLON 366
$define COLON 367
$define COLONCOLON 368
$define SEMICOL 369
$define LBRACK 370
$define RBRACK 371
$define LBRACE 372
$define RBRACE 373
$define DOLLAR 374
$define ABSTRACT 375
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
    2,   11,   11,   11,   16,   16,   10,   10,   17,   19,
   19,   19,   20,   20,   18,   18,   18,   18,    9,   22,
   22,   23,   23,   23,    7,    8,    6,   25,   25,   24,
   24,    5,    3,   27,   27,    4,   21,   21,   28,   29,
   15,   15,   15,   26,   26,   30,   30,   31,   31,   31,
   31,   12,   12,   33,   33,   13,   13,   14,   14,   35,
   35,   34,   34,   36,   36,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   38,   38,
   38,   39,   39,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   41,   41,
   41,   42,   42,   42,   42,   42,   43,   43,   43,   43,
   43,   44,   44,   45,   45,   45,   45,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   52,   52,   53,   53,   54,   54,   55,   49,   49,
   49,   49,   50,   50,   51,   59,   59,   60,   60,   56,
   56,   58,   58,   32,   32,   32,   32,   48,   61,   61,
   61,   57,   57,    0,    4,   34,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    8,    0,    1,    3,    5,    6,    0,
    3,    3,    3,    2,    0,    2,    2,    2,    2,    1,
    3,    1,    1,    3,    2,    2,    2,    1,    3,    1,
    1,    2,    5,    0,    1,    6,    6,    2,    5,    5,
    0,    1,    3,    1,    3,    1,    3,    1,    3,    3,
    5,    0,    4,    1,    1,    0,    3,    0,    3,    0,
    1,    1,    3,    1,    3,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
    5,    1,    3,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    3,
    3,    1,    3,    1,    3,    3,    3,    1,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    1,    2,    3,    3,    3,    4,    3,
    4,    4,    6,    6,    8,    8,    3,    1,    3,    2,
    2,    2,    4,    2,    4,    2,    4,    2,    1,    2,
    2,    4,    4,    6,    6,    1,    3,    3,    3,    1,
    3,    1,    3,    1,    1,    1,    1,    6,    1,    1,
    1,    1,    3,    3,    4,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    4,    5,    6,    7,    8,    9,
   10,   11,    0,    0,  234,    0,   54,    0,   40,   41,
   38,    0,   32,    0,    0,   30,    0,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   17,
   48,   28,   27,   16,    0,   26,   62,  236,    0,  224,
  225,  226,  227,    0,    0,    0,    0,  209,    0,  184,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  198,  173,    0,    0,    0,
   74,    0,  109,    0,    0,    0,    0,  137,    0,  144,
    0,  174,  175,  176,  177,  178,  179,  180,  181,    0,
    0,    0,    0,   55,   39,   34,   31,    0,    0,    0,
   56,    0,    0,    0,    0,    0,    0,    0,  185,    0,
    0,    0,    0,  150,    0,  210,    0,  211,    0,    0,
  155,  201,  200,  158,  161,  157,  169,  163,  156,  154,
  159,  164,  166,  168,  170,  149,  172,  160,  151,  152,
  153,  162,  165,  167,  171,  220,    0,   24,    0,    0,
    0,  235,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   64,   65,    0,    0,   21,   22,    0,
    0,   49,    0,    0,   43,    0,    0,   62,   18,    0,
   23,    0,    0,    0,    0,    0,    0,  186,    0,  188,
    0,  187,    0,   69,   75,    0,   90,  107,   87,   88,
   85,   84,   86,   83,   89,   78,   77,   97,   80,   79,
  104,  103,   96,   92,  100,   93,   95,   94,  102,  101,
  106,  108,   91,   81,   82,   98,  105,   99,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  113,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  141,
  138,  139,  140,  147,  146,  145,  143,  197,  199,    0,
    0,    0,  190,  222,    0,    0,    0,    0,    0,    0,
   19,    0,   60,   57,   53,   50,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  221,  233,    0,  192,  230,
  231,  229,    0,  189,    0,  191,    0,    0,    0,   67,
   46,   63,    0,    0,    0,   47,    0,    0,    0,  216,
    0,  111,    0,  223,    0,    0,    0,    0,   61,   62,
   13,    0,    0,    0,  215,    0,  228,    0,    0,  194,
  193,    0,    0,    0,  217,    0,    0,    0,  196,  195,
   14,
  ]
  yydgoto := [                          2,
    3,   14,   44,   16,   45,   18,   19,   20,   21,   22,
  156,  140,  276,  115,  149,   65,   23,   46,   52,  116,
   47,   35,   36,   31,   32,   28,  153,   24,   48,  150,
  151,  117,  277,  118,  196,  120,  121,  122,  123,  124,
  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
  135,  136,  137,  138,  139,  197,  201,  375,  419,  420,
  403,
  ]
  yysindex := [                      -172,
    0,    0,  -69,  -20,    0, -109, -104,  -61,  -21,  -61,
  -61,  -92,  -81,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -258, -247,    0, -189,    0, -181,    0,    0,
    0,  -95,    0, -141,  -86,    0,  -95,    0, -124, -107,
  -29,   33,   15, -225, -225,  -62, -225,  -47,  440,    0,
 -243,  -24,   85,  -61,   96,  -21,  105, -104,    2,    0,
    0,    0,    0,    0,   89,    0,    0,    0,   21,    0,
    0,    0,    0,  440,  440,  440,  440,    0,  440,    0,
  546,  440,  440,  440,  440,  440,  546, -196,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  440,  125,  440,  440,  120,    0,    0,   93,   28,   52,
    0, 5595,    0, -156, -216,  -59, -166,    0, -269,    0,
 -204,    0,    0,    0,    0,    0,    0,    0,    0, -134,
 -293, -189,  105,    0,    0,    0,    0,   34,   43, -333,
    0, -181,   45,  105, -314,  136, -134,  152,    0, -139,
   93, -231, -170,    0,   93,    0, -187,    0, -186, -184,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -149,    0, -179,   41,
   38,    0,  546,  440,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546, -145,  440,  440,
   88, -137,  440,    0,    0,  440, -104,    0,    0,   49,
   76,    0,  105,   42,    0,   51,  105,    0,    0,  440,
    0,   46,  440,  440,  440,  440,  440,    0,  440,    0,
  440,    0,   52,    0,    0,  151,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -216, -216,
 -216, -216, -216, -216, -216, -216, -216, -216, -216,    0,
 -216, -216, -216,  -59,  -59, -166, -166, -166, -166,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -44,
 -238, -131,    0,    0, -201, -291,   54, -242,  149, -144,
    0,   56,    0,    0,    0,    0,   59, -134,  153,  323,
   93, -230,   93,   93,   93,    0,    0,  546,    0,    0,
    0,    0,  440,    0,  440,    0, -136,  440,  440,    0,
    0,    0,   26,   57,  440,    0,   58, -236, -125,    0,
  440,    0, -290,    0,   65,   66,  -38,  -13,    0,    0,
    0,  440,  440,  323,    0,   93,    0,  440,  440,    0,
    0, -134,   93,   93,    0,   10,   11,  440,    0,    0,
    0,
  ]
  yyrindex := [                        -5,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -127,    0,    0,   67,    0, -235,    0,    0,
    0,   14,    0, -220,   29,    0,   44,    0,    0,    0,
    0,    0,    0, -245, -245,  -91, -245,    0, -254,    0,
    0,    0,    0,    0,    0,    0,   69,   71,    0,    0,
    0,    0,    0,    0,  159,    0,    0,    0,  641,    0,
    0,    0,    0, 5192,    0,    0,    0,    0,    0,    0,
    0,    0, 5192, 5192,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   16,    0, -128, -111,    0,    0,    0,  752,    0,  863,
    0, 5298,    0, 5081, 1862, 4082, 4193,    0, 4304,    0,
 5409,    0,    0,    0,    0,    0,    0,    0,    0,  206,
   67,   67,   69,    0,    0,    0,    0, -162,    0,   74,
    0,   77,    0,   69,    0,    0,  206,    0,    0,    0,
  974, 1973,    0,    0, 1085,    0, 2084,    0, 2195, 2306,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
    0,    0,    0, -254,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   16, -128,
   82,    0,    0,    0,    0, -254,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   69,    0,    0, -254,
    0,    0,    0,    0,    0,    0,    0,    0, -209,    0,
 -111,    0, 1196,    0,    0, 5514,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2417, 2528,
 2639, 2750, 2861, 2972, 3083, 3194, 3305, 3416, 3527,    0,
 3638, 3749, 3860, 4415, 4526, 4637, 4748, 4859, 4970,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -150,    0,    0,    0,    0,    0,  206,    0,    0,
 1307, 3971, 1418, 1529, 1640,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -191,    0,    0,   16,   16,    0,
    0,    0,    0,    0, -254,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1751,    0,   16,   16,    0,
    0,  206,  -96,  -77,    0,    0,    0, -254,    0,    0,
    0,
  ]
  yygindex := [                         0,
  441,    0,  115,    0,  355,    0,    0,    0,    0,    0,
    0,  -65, -153, -203, -135,    0,    0,  296,  245,  398,
    0,    0,  395,   18,  442,  -53,    0,    0,  410,    0,
  171, -274,    0,  -64,  -49,  252, 5750,    0, -200,    0,
  787,  150,   55,  -72,    0,   -1,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -110,  156,    0,    0,   25,
    0,
  ]
$define YYTABLESIZE 5988
  yytable := [                        119,
  304,  157,  199,  290,  152,  306,  383,  280,   49,  203,
  160,  161,  162,  141,  163,    7,   68,  165,  286,  167,
  169,  170,  407,   41,  159,   25,   42,  264,   38,   13,
   42,  283,   25,  166,  168,   42,  284,  293,   42,  421,
   42,   33,   42,   42,   42,   33,   42,  287,    7,  350,
   42,   42,   42,   33,  288,   33,   41,  203,   33,   33,
  172,  203,   13,  203,  200,   33,   33,   33,  203,  203,
  408,  145,  379,   51,  158,  265,  173,  266,  267,  164,
  437,  295,  296,    1,  297,  171,  389,  174,  175,  176,
  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
  187,  188,  189,  190,  191,  192,  193,  194,  195,  268,
   42,  368,  203,  203,   70,  203,   43,   15,   15,  376,
  425,   50,  294,   25,  112,  400,  410,  401,  402,  203,
  433,  260,  369,   42,  254,  261,  255,  262,  429,   42,
  377,  426,  273,   25,   33,  292,  274,   26,  263,   43,
   25,  387,   27,   70,  119,   70,  275,  269,  370,  372,
  203,   70,  239,  405,   39,  270,  240,  271,  241,  272,
  242,  406,  243,   70,  244,   40,  245,   51,  246,   15,
  247,   70,  248,   53,  249,  299,   15,  360,  361,  362,
  363,  300,    5,  250,  367,   29,    6,  422,   30,  251,
   58,  252,   58,  253,    7,  371,    8,   58,  378,    9,
   10,  431,   59,  298,   59,  299,   11,   12,   13,   59,
   53,  374,  388,  380,  412,   55,  119,   59,  391,  392,
  393,  394,  395,  299,  415,   33,   70,   57,   34,  404,
  119,   25,   70,  434,  451,    6,  256,  435,  257,  396,
  258,  200,  259,    7,   58,    8,    2,   70,    9,   10,
    2,   70,  364,  365,  366,   11,   12,   13,    2,   54,
    2,   71,  218,    2,    2,   36,  218,   71,   56,   36,
    2,    2,    2,   70,   71,   72,   73,   36,  448,   36,
   29,  219,   36,   36,   29,  219,   41,  427,  428,   36,
   36,   36,   29,   60,   29,   37,   64,   29,   29,   37,
  356,  357,  358,  359,   29,   29,   29,   37,  399,   37,
  299,   67,   37,   37,  440,  418,  299,  446,  447,   37,
   37,   37,  382,   70,   71,   72,   73,  143,  423,   62,
   63,  144,   66,   68,   69,   70,   71,   72,   73,  441,
   74,  299,   75,  146,   76,  424,  436,   17,   17,   77,
   78,  148,   79,  154,  442,  119,  155,  443,  444,  418,
   80,   81,  449,  450,  299,  299,   82,   83,   70,   84,
   70,  198,   85,   86,   87,  278,  279,   88,  158,   89,
  202,   90,  203,   91,  205,   92,  204,   93,  119,   94,
  281,   95,   96,  354,  355,  282,  289,  285,  291,  301,
  302,  381,  385,  386,  398,  409,   97,  390,   98,  411,
   99,  414,  413,  416,  432,  430,  438,  439,   20,   12,
  100,   51,  101,   44,  102,  103,   52,  104,  105,   45,
  106,    4,  107,  108,  232,  109,   70,  110,  142,  111,
  147,   37,   61,  384,  303,  112,  397,  113,  445,  114,
  373,   66,   66,   66,   66,   66,   66,    0,   66,    0,
   66,    0,   66,    0,    0,    0,   66,   66,   66,    0,
   66,    0,    0,    0,    0,    0,    0,    0,   66,   66,
    0,    0,    0,    0,   66,   66,    0,   66,    0,    0,
   66,   66,   66,    0,    0,   66,    0,   66,    0,   66,
    0,   66,    0,   66,    0,   66,    0,   66,    0,   66,
   66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   66,    0,   66,    0,   66,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
   66,    0,   66,   66,    0,   66,   66,    0,   66,    0,
   66,   66,    0,   66,    0,   66,    0,   66,    0,    0,
    0,    0,    0,   66,   66,   66,    0,   66,   68,   69,
   70,   71,   72,   73,    0,   74,    0,   75,    0,   76,
  417,    0,    0,    0,   77,   78,    0,   79,    0,    0,
    0,    0,    0,    0,    0,   80,   81,    0,    0,    0,
    0,   82,   83,    0,   84,    0,    0,   85,   86,   87,
    0,    0,   88,    0,   89,    0,   90,    0,   91,    0,
   92,    0,   93,    0,   94,    0,   95,   96,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   97,    0,   98,    0,   99,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,    0,  101,    0,  102,
  103,    0,  104,  105,    0,  106,    0,  107,  108,    0,
  109,    0,  110,    0,  111,    0,    0,    0,    0,    0,
  112,    0,  113,    0,  114,   68,   69,   70,   71,   72,
   73,    0,   74,    0,   75,    0,   76,    0,    0,    0,
    0,   77,   78,    0,   79,    0,    0,    0,    0,    0,
    0,    0,   80,   81,    0,    0,    0,    0,   82,   83,
    0,   84,    0,    0,   85,   86,   87,    0,    0,   88,
    0,   89,    0,   90,    0,   91,    0,   92,    0,   93,
    0,   94,    0,   95,   96,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   97,    0,
   98,    0,   99,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,    0,  101,    0,  102,  103,    0,  104,
  105,    0,  106,    0,  107,  108,    0,  109,    0,  110,
    0,  111,   69,   70,   71,   72,   73,  112,   74,  113,
   75,  114,   76,    0,    0,    0,    0,   77,   78,    0,
   79,    0,    0,    0,    0,    0,    0,    0,   80,   81,
    0,    0,    0,    0,   82,   83,    0,   84,    0,    0,
   85,   86,   87,    0,    0,   88,    0,   89,    0,   90,
    0,   91,    0,   92,    0,   93,    0,   94,    0,   95,
   96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   97,    0,   98,    0,   99,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,    0,
  101,    0,  102,  103,    0,  104,  105,    0,  106,    0,
  107,  108,    0,  109,  183,  110,    0,  111,    0,  183,
  183,    0,    0,  112,    0,  113,    0,  114,    0,    0,
    0,    0,    0,    0,    0,  183,    0,    0,    0,    0,
    0,    0,    0,  183,  183,    0,    0,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,    0,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,    0,  183,
  183,  183,  183,  183,  183,   71,    0,    0,    0,    0,
   71,   71,    0,    0,    0,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,   71,  351,  352,  353,
    0,    0,    0,    0,   71,   71,    0,    0,   71,   71,
   71,    0,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,    0,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,    0,
   71,   71,   71,   71,   71,   71,   72,    0,    0,    0,
    0,   72,   72,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   72,    0,    0,
    0,    0,    0,    0,    0,   72,   72,    0,    0,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,    0,   72,   72,   72,   72,
   72,   72,   72,   72,   72,   72,   72,    0,   72,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
    0,   72,   72,   72,   72,   72,   72,  182,    0,    0,
    0,    0,  182,  182,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  182,    0,
    0,    0,    0,    0,    0,    0,  182,  182,    0,    0,
  182,  182,  182,    0,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,    0,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,    0,  182,  182,  182,  182,  182,  182,  208,    0,
    0,    0,    0,  208,  208,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  208,
    0,    0,    0,    0,    0,    0,    0,  208,  208,    0,
    0,  208,  208,  208,    0,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,    0,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,    0,  208,  208,  208,  208,  208,  208,   73,
    0,    0,    0,    0,   73,   73,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,    0,    0,    0,    0,    0,    0,   73,   73,
    0,    0,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,    0,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
    0,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,    0,   73,   73,   73,   73,   73,   73,
  207,    0,    0,    0,    0,  207,  207,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  207,    0,    0,    0,    0,    0,    0,    0,  207,
  207,    0,    0,  207,  207,  207,    0,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,    0,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,    0,  207,  207,  207,  207,  207,
  207,  212,    0,    0,    0,    0,  212,  212,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  212,    0,    0,    0,    0,    0,    0,    0,
  212,  212,    0,    0,  212,  212,  212,    0,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,    0,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,    0,  212,  212,  212,  212,
  212,  212,  205,    0,    0,    0,    0,  205,  205,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  205,    0,    0,    0,    0,    0,    0,
    0,  205,  205,    0,    0,  205,  205,  205,    0,  205,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
  205,  205,  205,    0,  205,  205,  205,  205,  205,  205,
  205,  205,  205,  205,  205,  205,    0,  205,  205,  205,
  205,  205,  205,  203,    0,    0,    0,    0,  203,  203,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  203,    0,    0,    0,    0,    0,
    0,    0,  203,  203,    0,    0,  203,  203,  203,    0,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
  203,  203,  203,  203,    0,  203,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,    0,  203,  203,
  203,  203,  203,  203,  214,    0,    0,    0,    0,  214,
  214,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  214,    0,    0,    0,    0,
    0,    0,    0,  214,  214,    0,    0,  214,  214,  214,
    0,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,    0,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  214,  214,    0,  214,
  214,  214,  214,  214,  214,  114,    0,    0,    0,    0,
  114,  114,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  114,    0,    0,    0,
    0,    0,    0,    0,  114,  114,    0,    0,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
  114,  114,    0,  114,    0,  114,    0,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,    0,
  114,  114,  114,  114,  114,  114,  206,    0,    0,    0,
    0,    0,  206,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  206,    0,    0,
    0,    0,    0,    0,    0,  206,  206,    0,    0,  206,
  206,  206,    0,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,    0,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
    0,  206,  206,  206,  206,  206,  206,   71,    0,    0,
    0,    0,    0,   71,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   71,    0,
    0,    0,    0,    0,    0,    0,   71,   71,    0,    0,
   71,   71,   71,    0,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,    0,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,    0,   71,   71,   71,   71,   71,   71,  204,    0,
    0,    0,    0,    0,  204,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  204,
    0,    0,    0,    0,    0,    0,    0,  204,  204,    0,
    0,  204,  204,  204,    0,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  204,    0,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,    0,  204,  204,  204,  204,  204,  204,  202,
    0,    0,    0,    0,    0,  202,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  202,    0,    0,    0,    0,    0,    0,    0,  202,  202,
    0,    0,  202,  202,  202,    0,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
    0,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,    0,  202,  202,  202,  202,  202,  202,
  125,    0,    0,    0,    0,  125,  125,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  125,    0,    0,    0,    0,    0,    0,    0,  125,
  125,    0,    0,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,    0,  125,    0,
  125,    0,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,    0,  125,  125,  125,  125,  125,
  125,  119,    0,    0,    0,    0,  119,  119,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  119,    0,    0,    0,    0,    0,    0,    0,
  119,  119,    0,    0,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,    0,  119,
    0,  119,    0,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,    0,  119,  119,  119,  119,
  119,  119,  118,    0,    0,    0,    0,  118,  118,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  118,    0,    0,    0,    0,    0,    0,
    0,  118,  118,    0,    0,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,    0,
  118,    0,  118,    0,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,    0,  118,  118,  118,
  118,  118,  118,  124,    0,    0,    0,    0,  124,  124,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  124,    0,    0,    0,    0,    0,
    0,    0,  124,  124,    0,    0,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
    0,  124,    0,  124,    0,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,    0,  124,  124,
  124,  124,  124,  124,  121,    0,    0,    0,    0,  121,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  121,    0,    0,    0,    0,
    0,    0,    0,  121,  121,    0,    0,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,    0,  121,    0,  121,    0,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,  121,  121,    0,  121,
  121,  121,  121,  121,  121,  115,    0,    0,    0,    0,
  115,  115,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  115,    0,    0,    0,
    0,    0,    0,    0,  115,  115,    0,    0,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,    0,  115,    0,  115,    0,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,    0,
  115,  115,  115,  115,  115,  115,  127,    0,    0,    0,
    0,  127,  127,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  127,    0,    0,
    0,    0,    0,    0,    0,  127,  127,    0,    0,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,    0,  127,    0,  127,    0,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
    0,  127,  127,  127,  127,  127,  127,  123,    0,    0,
    0,    0,  123,  123,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
    0,    0,    0,    0,    0,    0,  123,  123,    0,    0,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,    0,  123,    0,  123,    0,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,    0,  123,  123,  123,  123,  123,  123,  122,    0,
    0,    0,    0,  122,  122,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  122,
    0,    0,    0,    0,    0,    0,    0,  122,  122,    0,
    0,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,    0,  122,    0,  122,    0,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,    0,  122,  122,  122,  122,  122,  122,  117,
    0,    0,    0,    0,  117,  117,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  117,    0,    0,    0,    0,    0,    0,    0,  117,  117,
    0,    0,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,  117,  117,    0,  117,    0,  117,
    0,  117,  117,  117,  117,  117,  117,  117,  117,  117,
  117,  117,  117,    0,  117,  117,  117,  117,  117,  117,
  116,    0,    0,    0,    0,  116,  116,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  116,    0,    0,    0,    0,    0,    0,    0,  116,
  116,    0,    0,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,    0,  116,    0,
  116,    0,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  116,    0,  116,  116,  116,  116,  116,
  116,  126,    0,    0,    0,    0,  126,  126,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  126,    0,    0,    0,    0,    0,    0,    0,
  126,  126,    0,    0,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,    0,  126,
    0,  126,    0,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,    0,  126,  126,  126,  126,
  126,  126,  120,    0,    0,    0,    0,  120,  120,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  120,    0,    0,    0,    0,    0,    0,
    0,  120,  120,    0,    0,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,    0,
  120,    0,  120,    0,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,    0,  120,  120,  120,
  120,  120,  120,  128,    0,    0,    0,    0,  128,  128,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  128,    0,    0,    0,    0,    0,
    0,    0,  128,  128,    0,    0,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
    0,  128,    0,  128,    0,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,    0,  128,  128,
  128,  128,  128,  128,  213,    0,    0,    0,    0,  213,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  213,    0,    0,    0,    0,
    0,    0,    0,  213,  213,    0,    0,  213,  213,  213,
    0,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,    0,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,    0,  213,
  213,  213,  213,  213,  213,  129,    0,    0,    0,    0,
  129,  129,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  129,    0,    0,    0,
    0,    0,    0,    0,  129,  129,    0,    0,  129,  129,
  129,  129,  129,  129,  129,  129,  129,    0,  129,    0,
  129,    0,  129,    0,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,    0,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,    0,
  129,  129,  129,  129,  129,  129,  132,    0,    0,    0,
    0,  132,  132,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  132,    0,    0,
    0,    0,    0,    0,    0,  132,  132,    0,    0,  132,
    0,  132,  132,  132,    0,  132,    0,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,    0,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,    0,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
    0,  132,  132,  132,  132,  132,  132,  142,    0,    0,
    0,    0,  142,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  142,    0,
    0,    0,    0,    0,    0,    0,  142,  142,    0,    0,
    0,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,    0,  142,
    0,    0,  142,  142,  142,  142,  142,  142,    0,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,    0,  142,  142,  142,  142,  142,  142,  130,    0,
    0,    0,    0,  130,  130,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  130,
    0,    0,    0,    0,    0,    0,    0,  130,  130,    0,
    0,  130,  130,  130,  130,  130,  130,  130,  130,  130,
    0,  130,    0,  130,    0,  130,    0,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,    0,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,    0,  130,  130,  130,  130,  130,  130,  131,
    0,    0,    0,    0,  131,  131,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  131,    0,    0,    0,    0,    0,    0,    0,  131,  131,
    0,    0,  131,  131,  131,  131,  131,  131,  131,  131,
  131,    0,  131,    0,  131,    0,  131,    0,  131,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
    0,  131,  131,  131,  131,  131,  131,  131,  131,  131,
  131,  131,  131,    0,  131,  131,  131,  131,  131,  131,
  133,    0,    0,    0,    0,  133,  133,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  133,    0,    0,    0,    0,    0,    0,    0,  133,
  133,    0,    0,  133,    0,  133,  133,  133,    0,  133,
    0,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,    0,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,    0,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,    0,  133,  133,  133,  133,  133,
  133,  135,    0,    0,    0,    0,  135,  135,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  135,    0,    0,    0,    0,    0,    0,    0,
  135,  135,    0,    0,  135,    0,  135,  135,  135,    0,
  135,    0,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,    0,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,    0,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,    0,  135,  135,  135,  135,
  135,  135,  136,    0,    0,    0,    0,  136,  136,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  136,    0,    0,    0,    0,    0,    0,
    0,  136,  136,    0,    0,  136,    0,  136,  136,  136,
    0,  136,    0,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,    0,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,    0,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,    0,  136,  136,  136,
  136,  136,  136,  134,    0,    0,    0,    0,  134,  134,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  134,    0,    0,    0,    0,    0,
    0,    0,  134,  134,    0,    0,  134,    0,  134,  134,
  134,    0,  134,    0,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,    0,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,    0,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,    0,  134,  134,
  134,  134,  134,  134,  112,    0,    0,    0,    0,  112,
  112,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
    0,    0,    0,  112,  112,    0,    0,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
  112,  112,  112,  112,  112,  112,  112,  112,  112,    0,
  112,  112,  112,    0,  112,    0,  112,    0,  112,    0,
  112,    0,  112,    0,  112,    0,  112,    0,  112,    0,
  112,    0,  112,  112,  112,  112,  112,  112,  112,  112,
    0,  112,  112,  112,  112,    0,    0,  112,    0,  112,
    0,  112,  112,  112,  112,  112,  112,  112,    0,  112,
  112,  112,  112,  112,  112,   70,    0,    0,    0,    0,
   70,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   70,    0,    0,    0,
    0,    0,    0,    0,   70,   70,    0,    0,    0,   70,
   70,    0,   70,    0,   70,    0,   70,    0,   70,    0,
   70,    0,   70,    0,   70,    0,    0,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
    0,   70,    0,   70,    0,   70,   70,   70,   70,   70,
   70,   70,   70,   70,    0,   70,    0,   70,    0,    0,
   70,    0,    0,   70,    0,   70,    0,    0,   70,    0,
   70,    0,   70,    0,   70,   70,   70,   70,   70,    0,
   70,   76,   70,    0,   70,   70,   76,   76,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   76,    0,    0,    0,    0,    0,    0,    0,
   76,    0,    0,    0,   76,   76,    0,   76,    0,   76,
    0,   76,    0,   76,    0,   76,    0,   76,    0,   76,
    0,   76,   76,    0,    0,    0,   76,    0,    0,    0,
   76,    0,   76,    0,   76,    0,   76,    0,   76,    0,
   76,    0,   76,    0,   76,    0,   76,    0,   76,    0,
   76,    0,   76,    0,   76,   76,    0,   76,   76,    0,
   76,    0,    0,   76,    0,   76,    0,   76,    0,   76,
   76,   76,   76,   76,   76,    0,   76,   76,   76,   76,
   76,   76,  148,    0,    0,    0,    0,  148,  148,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  148,    0,    0,    0,    0,    0,    0,
    0,  148,  148,    0,    0,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,    0,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,    0,  148,  148,  148,  148,  148,  148,
    0,  148,  148,  148,  148,  148,    0,  148,    0,  148,
    0,  148,  110,  110,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  110,    0,
    0,    0,    0,    0,    0,    0,  110,  110,    0,    0,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  110,    0,  110,
  110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
  110,    0,  110,  110,  110,  110,  110,  110,  206,    0,
    0,    0,    0,  207,    0,  208,    0,  209,    0,  210,
    0,  211,    0,  212,    0,  213,    0,  214,    0,    0,
  215,  216,  217,    0,  218,  219,  220,    0,  221,    0,
  222,    0,  223,    0,  224,    0,  225,    0,  226,    0,
  227,    0,  228,    0,  229,    0,  230,    0,  231,    0,
  232,    0,    0,  233,    0,    0,  234,    0,  235,    0,
    0,  236,    0,  237,  305,  238,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,
  ]
  yycheck := [                         49,
  204,   67,  113,  157,   58,  206,  281,  143,  256,  300,
   75,   76,   77,  257,   79,  274,  271,   82,  154,   84,
   85,   86,  314,  282,   74,  271,  262,  297,   11,  288,
  266,  365,  278,   83,   84,  271,  370,  269,  274,  270,
  276,  262,  278,  279,  280,  266,  282,  362,  274,  250,
  286,  287,  288,  274,  369,  276,  282,  300,  279,  280,
  257,  300,  288,  300,  114,  286,  287,  288,  300,  300,
  362,   54,  276,  367,  368,  345,  273,  347,  348,   81,
  371,  269,  269,  256,  269,   87,  290,   89,   90,   91,
   92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
  102,  103,  104,  105,  106,  107,  108,  109,  110,  314,
  369,  257,  300,  300,  369,  300,  375,    3,    4,  257,
  257,  369,  293,  369,  368,  364,  369,  366,  367,  300,
  367,  298,  278,  369,  351,  302,  353,  304,  413,  375,
  278,  278,  277,  271,  365,  285,  281,  257,  315,  375,
  278,  287,  257,  363,  204,  365,  291,  362,  269,  270,
  300,  371,  319,  365,  257,  370,  323,  372,  325,  374,
  327,  373,  329,  365,  331,  257,  333,  367,  335,  271,
  337,  373,  339,  365,  341,  365,  278,  260,  261,  262,
  263,  371,  262,  350,  267,  257,  266,  398,  260,  356,
  363,  358,  365,  360,  274,  270,  276,  370,  273,  279,
  280,  415,  363,  363,  365,  365,  286,  287,  288,  370,
  365,  271,  288,  277,  369,  367,  276,  257,  293,  294,
  295,  296,  297,  365,  388,  257,  365,  362,  260,  371,
  290,  262,  371,  369,  448,  266,  306,  373,  308,  299,
  310,  301,  312,  274,  362,  276,  262,  369,  279,  280,
  266,  373,  264,  265,  266,  286,  287,  288,  274,  365,
  276,  365,  369,  279,  280,  262,  373,  371,  365,  266,
  286,  287,  288,  258,  259,  260,  261,  274,  442,  276,
  262,  369,  279,  280,  266,  373,  282,  408,  409,  286,
  287,  288,  274,  271,  276,  262,  369,  279,  280,  266,
  256,  257,  258,  259,  286,  287,  288,  274,  363,  276,
  365,  369,  279,  280,  363,  390,  365,  438,  439,  286,
  287,  288,  257,  258,  259,  260,  261,  362,  403,   44,
   45,  257,   47,  256,  257,  258,  259,  260,  261,  363,
  263,  365,  265,  258,  267,  405,  421,    3,    4,  272,
  273,  257,  275,  362,  430,  415,  278,  432,  433,  434,
  283,  284,  363,  363,  365,  365,  289,  290,  363,  292,
  365,  257,  295,  296,  297,  141,  142,  300,  368,  302,
  271,  304,  300,  306,  343,  308,  369,  310,  448,  312,
  367,  314,  315,  254,  255,  363,  271,  363,  257,  369,
  373,  363,  371,  363,  264,  362,  329,  372,  331,  271,
  333,  363,  367,  271,  367,  369,  362,  362,  362,  271,
  343,  363,  345,  363,  347,  348,  363,  350,  351,  363,
  353,    1,  355,  356,  373,  358,  365,  360,   51,  362,
   56,   10,   43,  283,  203,  368,  301,  370,  434,  372,
  373,  256,  257,  258,  259,  260,  261,   -1,  263,   -1,
  265,   -1,  267,   -1,   -1,   -1,  271,  272,  273,   -1,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,  284,
   -1,   -1,   -1,   -1,  289,  290,   -1,  292,   -1,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
   -1,  306,   -1,  308,   -1,  310,   -1,  312,   -1,  314,
  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,
  345,   -1,  347,  348,   -1,  350,  351,   -1,  353,   -1,
  355,  356,   -1,  358,   -1,  360,   -1,  362,   -1,   -1,
   -1,   -1,   -1,  368,  369,  370,   -1,  372,  256,  257,
  258,  259,  260,  261,   -1,  263,   -1,  265,   -1,  267,
  268,   -1,   -1,   -1,  272,  273,   -1,  275,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  283,  284,   -1,   -1,   -1,
   -1,  289,  290,   -1,  292,   -1,   -1,  295,  296,  297,
   -1,   -1,  300,   -1,  302,   -1,  304,   -1,  306,   -1,
  308,   -1,  310,   -1,  312,   -1,  314,  315,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  329,   -1,  331,   -1,  333,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  343,   -1,  345,   -1,  347,
  348,   -1,  350,  351,   -1,  353,   -1,  355,  356,   -1,
  358,   -1,  360,   -1,  362,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,  256,  257,  258,  259,  260,
  261,   -1,  263,   -1,  265,   -1,  267,   -1,   -1,   -1,
   -1,  272,  273,   -1,  275,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,  289,  290,
   -1,  292,   -1,   -1,  295,  296,  297,   -1,   -1,  300,
   -1,  302,   -1,  304,   -1,  306,   -1,  308,   -1,  310,
   -1,  312,   -1,  314,  315,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,
  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  343,   -1,  345,   -1,  347,  348,   -1,  350,
  351,   -1,  353,   -1,  355,  356,   -1,  358,   -1,  360,
   -1,  362,  257,  258,  259,  260,  261,  368,  263,  370,
  265,  372,  267,   -1,   -1,   -1,   -1,  272,  273,   -1,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,  284,
   -1,   -1,   -1,   -1,  289,  290,   -1,  292,   -1,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
   -1,  306,   -1,  308,   -1,  310,   -1,  312,   -1,  314,
  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,
  345,   -1,  347,  348,   -1,  350,  351,   -1,  353,   -1,
  355,  356,   -1,  358,  264,  360,   -1,  362,   -1,  269,
  270,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,  239,  240,  241,  242,  243,
  244,  245,  246,  247,  248,  249,  285,  251,  252,  253,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,   -1,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,
   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,   -1,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  264,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,   -1,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  264,   -1,
   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,   -1,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  264,
   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,   -1,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,   -1,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
   -1,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,
   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,   -1,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  264,   -1,   -1,
   -1,   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,   -1,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  264,   -1,
   -1,   -1,   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,   -1,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  264,
   -1,   -1,   -1,   -1,   -1,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,   -1,  352,
   -1,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,   -1,
  352,   -1,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,
   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  264,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  264,   -1,
   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  264,
   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,   -1,  352,   -1,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,   -1,  352,
   -1,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,   -1,
  352,   -1,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
   -1,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,
   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
   -1,  299,  300,  301,   -1,  303,   -1,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,   -1,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  264,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
   -1,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,   -1,  346,
   -1,   -1,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  264,   -1,
   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  264,
   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,  300,  301,  302,  303,  304,
  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,   -1,  299,  300,  301,   -1,  303,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,   -1,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,   -1,  299,  300,  301,   -1,
  303,   -1,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,   -1,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,   -1,  299,  300,  301,
   -1,  303,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,   -1,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,   -1,  299,  300,
  301,   -1,  303,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,   -1,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,  269,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
  320,  321,  322,   -1,  324,   -1,  326,   -1,  328,   -1,
  330,   -1,  332,   -1,  334,   -1,  336,   -1,  338,   -1,
  340,   -1,  342,  343,  344,  345,  346,  347,  348,  349,
   -1,  351,  352,  353,  354,   -1,   -1,  357,   -1,  359,
   -1,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  264,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,   -1,  298,
  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,   -1,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
   -1,  330,   -1,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,  342,   -1,  344,   -1,  346,   -1,   -1,
  349,   -1,   -1,  352,   -1,  354,   -1,   -1,  357,   -1,
  359,   -1,  361,   -1,  363,  364,  365,  366,  367,   -1,
  369,  264,  371,   -1,  373,  374,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  293,   -1,   -1,   -1,  297,  298,   -1,  300,   -1,  302,
   -1,  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,
   -1,  314,  315,   -1,   -1,   -1,  319,   -1,   -1,   -1,
  323,   -1,  325,   -1,  327,   -1,  329,   -1,  331,   -1,
  333,   -1,  335,   -1,  337,   -1,  339,   -1,  341,   -1,
  343,   -1,  345,   -1,  347,  348,   -1,  350,  351,   -1,
  353,   -1,   -1,  356,   -1,  358,   -1,  360,   -1,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
   -1,  363,  364,  365,  366,  367,   -1,  369,   -1,  371,
   -1,  373,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  294,   -1,
   -1,   -1,   -1,  299,   -1,  301,   -1,  303,   -1,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,   -1,
  316,  317,  318,   -1,  320,  321,  322,   -1,  324,   -1,
  326,   -1,  328,   -1,  330,   -1,  332,   -1,  334,   -1,
  336,   -1,  338,   -1,  340,   -1,  342,   -1,  344,   -1,
  346,   -1,   -1,  349,   -1,   -1,  352,   -1,  354,   -1,
   -1,  357,   -1,  359,  205,  361,  207,  208,  209,  210,
  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,
  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
  231,  232,  233,  234,  235,  236,  237,  238,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 375
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","DEFAULT",
"DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","INVOCABLE","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"PROCEDURE","RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","TO","UNTIL",
"WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","SWAP","NMLT","AUGNMLT","REVASSIGN",
"REVSWAP","SLT","AUGSLT","SLE","AUGSLE","NMLE","AUGNMLE","NMEQ","AUGNMEQ","SEQ",
"AUGSEQ","EQUIV","AUGEQUIV","NMGT","AUGNMGT","NMGE","AUGNMGE","SGT","AUGSGT",
"SGE","AUGSGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET",
"BAR","CONCAT","AUGCONCAT","LCONCAT","AUGLCONCAT","TILDE","NMNE","AUGNMNE",
"SNE","AUGSNE","NEQUIV","AUGNEQUIV","LPAREN","RPAREN","PCOLON","COMMA","MCOLON",
"COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR",
"ABSTRACT",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : proc",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : invocable",
"decl : cl",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial procbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial procbody",
"optsemi :",
"optsemi : SEMICOL",
"cl : classhead SEMICOL END",
"cl : classhead methods optsemi initiallysection END",
"classhead : CLASS IDENT supers LPAREN arglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON IDENT",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"invocable : INVOCABLE invoclist",
"invoclist : invocop",
"invoclist : invoclist COMMA invocop",
"invocop : IDENT",
"invocop : STRINGLIT",
"invocop : STRINGLIT COLON INTLIT",
"package : PACKAGE lnkfile",
"import : IMPORT lnklist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"fldlist :",
"fldlist : idlist",
"proc : prochead SEMICOL locals initial procbody END",
"meth : methhead SEMICOL locals initial procbody END",
"meth : ABSTRACT methhead",
"prochead : PROCEDURE IDENT LPAREN arglist RPAREN",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"locals :",
"locals : locals retention idlist SEMICOL",
"retention : LOCAL",
"retention : STATIC",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"procbody :",
"procbody : nexpr SEMICOL procbody",
"nexpr :",
"nexpr : expr",
"expr : expr1a",
"expr : expr AND expr1a",
"expr1a : expr1",
"expr1a : expr1a QMARK expr1",
"expr1 : expr2",
"expr1 : expr2 SWAP expr1",
"expr1 : expr2 ASSIGN expr1",
"expr1 : expr2 REVSWAP expr1",
"expr1 : expr2 REVASSIGN expr1",
"expr1 : expr2 AUGCONCAT expr1",
"expr1 : expr2 AUGLCONCAT expr1",
"expr1 : expr2 AUGDIFF expr1",
"expr1 : expr2 AUGUNION expr1",
"expr1 : expr2 AUGPLUS expr1",
"expr1 : expr2 AUGMINUS expr1",
"expr1 : expr2 AUGSTAR expr1",
"expr1 : expr2 AUGINTER expr1",
"expr1 : expr2 AUGSLASH expr1",
"expr1 : expr2 AUGMOD expr1",
"expr1 : expr2 AUGCARET expr1",
"expr1 : expr2 AUGNMEQ expr1",
"expr1 : expr2 AUGEQUIV expr1",
"expr1 : expr2 AUGNMGE expr1",
"expr1 : expr2 AUGNMGT expr1",
"expr1 : expr2 AUGNMLE expr1",
"expr1 : expr2 AUGNMLT expr1",
"expr1 : expr2 AUGNMNE expr1",
"expr1 : expr2 AUGNEQUIV expr1",
"expr1 : expr2 AUGSEQ expr1",
"expr1 : expr2 AUGSGE expr1",
"expr1 : expr2 AUGSGT expr1",
"expr1 : expr2 AUGSLE expr1",
"expr1 : expr2 AUGSLT expr1",
"expr1 : expr2 AUGSNE expr1",
"expr1 : expr2 AUGQMARK expr1",
"expr1 : expr2 AUGAND expr1",
"expr1 : expr2 AUGAT expr1",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr3 : expr4",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 SEQ expr5",
"expr4 : expr4 SGE expr5",
"expr4 : expr4 SGT expr5",
"expr4 : expr4 SLE expr5",
"expr4 : expr4 SLT expr5",
"expr4 : expr4 SNE expr5",
"expr4 : expr4 NMEQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr4 : expr4 EQUIV expr5",
"expr4 : expr4 NEQUIV expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr5 : expr5 LCONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : expr9 CARET expr8",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : LCONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NMEQ expr10",
"expr10 : NMNE expr10",
"expr10 : SEQ expr10",
"expr10 : SNE expr10",
"expr10 : EQUIV expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : NEQUIV expr10",
"expr10 : BACKSLASH expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : CREATE expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : packageref",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"proc : prochead error procbody END",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 626 "unigram.y"

procedure InvocationNode(args[])
   tmpcount +:= 1
   if type(args[1]) == "token" & (args[1].tok = IDENT) then {
       n1 := args[1]
       lparen := copy(args[1])
       lparen.tok := LPAREN
       lparen.s := "("
   }
   else {
       n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
       if lparen := Clone1stToken(args[1]) then {
	   lparen.tok := LPAREN
	   lparen.s := "("
       }
       else lparen := "("
   }
   if *args = 6 then
       return node("Paren",lparen,node("invoke",
	  Field(Field(n1, ".", "__m"), "." , args[3]),
	     args[4], node("exprlist",
	     if n1 === args[1] then args[1] else "__"||tmpcount,
	     if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
	     ,")")
   else return  node("Paren",lparen,node("invoke",Field(Field(
			  Field(n1,".", "__m"),
			 "." , args[3]),".",args[5]),
		       args[6], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
		      ,")")
end

procedure isloco(node, s)
case type(node) of {
   "treenode": {
      if *node.children > 0 then return isloco(!node.children, s)
      }
   "token" : {
      if (node.tok = IDENT) & (node.s == s) then return
      }
   }
end
#line 1992 "unigram.icn"
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    action[yyn]()          # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 240 "unigram.y"
 Progend(valstk[2]);
end

procedure action_2()
#line 242 "unigram.y"
 yyval := EmptyNode 
end

procedure action_3()
#line 243 "unigram.y"

	   if yynerrs = 0 then iwrites(&errout,".");
	   yyval := node("decls", valstk[2], valstk[1])
	      
end

procedure action_12()
#line 258 "unigram.y"
 yyval := EmptyNode 
end

procedure action_13()
#line 259 "unigram.y"

	   yyval := Method( , , , , , "initially", EmptyNode, "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_14()
#line 265 "unigram.y"

	   yyval := Method( , , , , , "initially", valstk[6], "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_15()
#line 273 "unigram.y"
 yyval := EmptyNode 
end

procedure action_17()
#line 276 "unigram.y"

   yyval := valstk[3]
   yyval.methods := methodstaque(&null, yyval)
   
end

procedure action_18()
#line 280 "unigram.y"

   yyval := valstk[5]
   if valstk[2] ~=== EmptyNode then
      valstk[4] := node("methods", valstk[4], valstk[2])
   yyval.methods := methodstaque(valstk[4], yyval)
   
end

procedure action_19()
#line 287 "unigram.y"

   yyval := Class()
   yyval.tag := valstk[6]
   yyval.unmangled_name := valstk[5].s
   yyval.name := package_mangled_symbol(valstk[5].s)
   if proc(yyval.name, 0) then warning("Warning: class " || yyval.name || " overrides the built-in function")
   classes.insert(yyval, yyval.name)
   yyval.supers_node := valstk[4]
   yyval.fields := valstk[2]
   yyval.lptoken := valstk[3]
   yyval.rptoken := valstk[1]
   
end

procedure action_20()
#line 300 "unigram.y"
 yyval := EmptyNode 
end

procedure action_21()
#line 301 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_22()
#line 302 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_23()
#line 305 "unigram.y"
 yyval := node("packageref", valstk[3],valstk[2],valstk[1]) 
end

procedure action_24()
#line 306 "unigram.y"
 yyval := node("packageref", valstk[2],valstk[1]) 
end

procedure action_25()
#line 309 "unigram.y"
 yyval := EmptyNode 
end

procedure action_26()
#line 310 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_27()
#line 311 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_28()
#line 312 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_29()
#line 315 "unigram.y"
 yyval := node("invocable", valstk[2], valstk[1]);
end

procedure action_31()
#line 318 "unigram.y"
 yyval := node("invoclist", valstk[3],valstk[2],valstk[1]);
end

procedure action_34()
#line 322 "unigram.y"
yyval := node("invocop3", valstk[3],valstk[2],valstk[1]);
end

procedure action_35()
#line 324 "unigram.y"

   if \thePackage then {
      yyerror(fName || " cannot be in both package "|| thePackage.name ||
	      " and package " || valstk[1].s)
      yyval := EmptyNode
      }
   else {
      yyval := node("package", valstk[2],valstk[1]);
      thePackage := Package(valstk[1].s)
      thePackage.insertfname(fName)
      thePackage.add_imported()
      }
   
end

procedure action_36()
#line 338 "unigram.y"

   yyval := node("import", valstk[2],valstk[1]," ")
   import_class(valstk[1])
   
end

procedure action_37()
#line 343 "unigram.y"
 yyval := node("link", valstk[2],valstk[1]," "); 
end

procedure action_39()
#line 346 "unigram.y"
 yyval := node("lnklist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_42()
#line 351 "unigram.y"
 yyval := node("global", valstk[2],valstk[1]) 
end

procedure action_43()
#line 353 "unigram.y"

		yyval := declaration(valstk[4],valstk[2],valstk[5],valstk[3],valstk[1])
		
end

procedure action_44()
#line 357 "unigram.y"
 yyval := EmptyNode 
end

procedure action_46()
#line 360 "unigram.y"

#		body_scopeck(valstk[2])
		yyval := node("proc", valstk[6],";",valstk[4],valstk[3],valstk[2],valstk[1])
		
end

procedure action_47()
#line 365 "unigram.y"

		yyval := valstk[6]
		yyval.locals := valstk[4]
		yyval.initl := valstk[3]
		yyval.procbody := valstk[2]
		
end

procedure action_48()
#line 371 "unigram.y"

		yyval := valstk[1]
                yyval.abstract_flag := 1
		
end

procedure action_49()
#line 376 "unigram.y"

		yyval := declaration(valstk[4], valstk[2], valstk[5], valstk[3], valstk[1])
		
end

procedure action_50()
#line 380 "unigram.y"

		yyval := Method( , , , , , valstk[4].s, valstk[2], valstk[5].s, valstk[3], valstk[1])
		
end

procedure action_51()
#line 384 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_52()
#line 385 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_53()
#line 386 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_55()
#line 390 "unigram.y"
 yyval := node("idlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_57()
#line 393 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_59()
#line 396 "unigram.y"
 yyval := node("arg2", valstk[3], valstk[2], valstk[1]) 
end

procedure action_60()
#line 397 "unigram.y"
 yyval := node("arg3", valstk[3], valstk[2], valstk[1]) 
end

procedure action_61()
#line 398 "unigram.y"
 yyval := node("arg4", valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]) 
end

procedure action_62()
#line 400 "unigram.y"
 yyval := EmptyNode;
end

procedure action_63()
#line 401 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_66()
#line 406 "unigram.y"
 yyval := EmptyNode 
end

procedure action_67()
#line 407 "unigram.y"

	   yyval := node("initial", valstk[3], valstk[2],";")
	      
end

procedure action_68()
#line 411 "unigram.y"
 yyval := EmptyNode 
end

procedure action_69()
#line 412 "unigram.y"
 yyval := node("procbody", valstk[3],";",valstk[1]);
end

procedure action_70()
#line 414 "unigram.y"
 yyval := EmptyNode 
end

procedure action_73()
#line 418 "unigram.y"
 yyval := node("and", valstk[3],valstk[2],valstk[1]) 
end

procedure action_75()
#line 421 "unigram.y"
 yyval := node("binques", valstk[3],valstk[2],valstk[1]);
end

procedure action_77()
#line 424 "unigram.y"
 yyval := node("swap", valstk[3],valstk[2],valstk[1]);
end

procedure action_78()
#line 425 "unigram.y"
 yyval := node("assign", valstk[3],valstk[2],valstk[1]);
end

procedure action_79()
#line 426 "unigram.y"
 yyval := node("revswap", valstk[3],valstk[2],valstk[1]);
end

procedure action_80()
#line 427 "unigram.y"
 yyval := node("revasgn", valstk[3],valstk[2],valstk[1]);
end

procedure action_81()
#line 428 "unigram.y"
 yyval := node("augcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_82()
#line 429 "unigram.y"
 yyval := node("auglcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_83()
#line 430 "unigram.y"
 yyval := node("Bdiffa", valstk[3],valstk[2],valstk[1]);
end

procedure action_84()
#line 431 "unigram.y"
 yyval := node("Buniona", valstk[3],valstk[2],valstk[1]);
end

procedure action_85()
#line 432 "unigram.y"
 yyval := node("Bplusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_86()
#line 433 "unigram.y"
 yyval := node("Bminusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_87()
#line 434 "unigram.y"
 yyval := node("Bstara", valstk[3],valstk[2],valstk[1]);
end

procedure action_88()
#line 435 "unigram.y"
 yyval := node("Bintera", valstk[3],valstk[2],valstk[1]);
end

procedure action_89()
#line 436 "unigram.y"
 yyval := node("Bslasha", valstk[3],valstk[2],valstk[1]);
end

procedure action_90()
#line 437 "unigram.y"
 yyval := node("Bmoda", valstk[3],valstk[2],valstk[1]);
end

procedure action_91()
#line 438 "unigram.y"
 yyval := node("Bcareta", valstk[3],valstk[2],valstk[1]);
end

procedure action_92()
#line 439 "unigram.y"
 yyval := node("Baugeq", valstk[3],valstk[2],valstk[1]);
end

procedure action_93()
#line 440 "unigram.y"
 yyval := node("Baugeqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_94()
#line 441 "unigram.y"
 yyval := node("Baugge", valstk[3],valstk[2],valstk[1]);
end

procedure action_95()
#line 442 "unigram.y"
 yyval := node("Bauggt", valstk[3],valstk[2],valstk[1]);
end

procedure action_96()
#line 443 "unigram.y"
 yyval := node("Baugle", valstk[3],valstk[2],valstk[1]);
end

procedure action_97()
#line 444 "unigram.y"
 yyval := node("Bauglt", valstk[3],valstk[2],valstk[1]);
end

procedure action_98()
#line 445 "unigram.y"
 yyval := node("Baugne", valstk[3],valstk[2],valstk[1]);
end

procedure action_99()
#line 446 "unigram.y"
 yyval := node("Baugneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_100()
#line 447 "unigram.y"
 yyval := node("Baugseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_101()
#line 448 "unigram.y"
 yyval := node("Baugsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_102()
#line 449 "unigram.y"
 yyval := node("Baugsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_103()
#line 450 "unigram.y"
 yyval := node("Baugsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_104()
#line 451 "unigram.y"
 yyval := node("Baugslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_105()
#line 452 "unigram.y"
 yyval := node("Baugsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_106()
#line 453 "unigram.y"
 yyval := node("Baugques", valstk[3],valstk[2],valstk[1]);
end

procedure action_107()
#line 454 "unigram.y"
 yyval := node("Baugamper", valstk[3],valstk[2],valstk[1]);
end

procedure action_108()
#line 455 "unigram.y"
 yyval := node("Baugact", valstk[3],valstk[2],valstk[1]);
end

procedure action_110()
#line 458 "unigram.y"
 yyval := node("to", valstk[3],valstk[2],valstk[1]);
end

procedure action_111()
#line 459 "unigram.y"
 yyval := node("toby", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_113()
#line 462 "unigram.y"
yyval := node(BAR, valstk[3],valstk[2],valstk[1]);
end

procedure action_115()
#line 465 "unigram.y"
 yyval := node("Bseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_116()
#line 466 "unigram.y"
 yyval := node("Bsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_117()
#line 467 "unigram.y"
 yyval := node("Bsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_118()
#line 468 "unigram.y"
 yyval := node("Bsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_119()
#line 469 "unigram.y"
 yyval := node("Bslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_120()
#line 470 "unigram.y"
 yyval := node("Bsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_121()
#line 471 "unigram.y"
 yyval := node("Beq", valstk[3],valstk[2],valstk[1]);
end

procedure action_122()
#line 472 "unigram.y"
 yyval := node("Bge", valstk[3],valstk[2],valstk[1]);
end

procedure action_123()
#line 473 "unigram.y"
 yyval := node("Bgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_124()
#line 474 "unigram.y"
 yyval := node("Ble", valstk[3],valstk[2],valstk[1]);
end

procedure action_125()
#line 475 "unigram.y"
 yyval := node("Blt", valstk[3],valstk[2],valstk[1]);
end

procedure action_126()
#line 476 "unigram.y"
 yyval := node("Bne", valstk[3],valstk[2],valstk[1]);
end

procedure action_127()
#line 477 "unigram.y"
 yyval := node("Beqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_128()
#line 478 "unigram.y"
 yyval := node("Bneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_130()
#line 481 "unigram.y"
 yyval := node("Bcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_131()
#line 482 "unigram.y"
 yyval := node("Blcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_133()
#line 485 "unigram.y"
 yyval := node("Bplus", valstk[3],valstk[2],valstk[1]);
end

procedure action_134()
#line 486 "unigram.y"
 yyval := node("Bdiff", valstk[3],valstk[2],valstk[1]);
end

procedure action_135()
#line 487 "unigram.y"
 yyval := node("Bunion", valstk[3],valstk[2],valstk[1]);
end

procedure action_136()
#line 488 "unigram.y"
 yyval := node("Bminus", valstk[3],valstk[2],valstk[1]);
end

procedure action_138()
#line 491 "unigram.y"
 yyval := node("Bstar", valstk[3],valstk[2],valstk[1]);
end

procedure action_139()
#line 492 "unigram.y"
 yyval := node("Binter", valstk[3],valstk[2],valstk[1]);
end

procedure action_140()
#line 493 "unigram.y"
 yyval := node("Bslash", valstk[3],valstk[2],valstk[1]);
end

procedure action_141()
#line 494 "unigram.y"
 yyval := node("Bmod", valstk[3],valstk[2],valstk[1]);
end

procedure action_143()
#line 497 "unigram.y"
 yyval := node("Bcaret", valstk[3],valstk[2],valstk[1]);
end

procedure action_145()
#line 500 "unigram.y"
 yyval := node("limit", valstk[3],valstk[2],valstk[1]);
end

procedure action_146()
#line 501 "unigram.y"
 yyval := node("at", valstk[3],valstk[2],valstk[1]) 
end

procedure action_147()
#line 502 "unigram.y"
 yyval := node("apply", valstk[3],valstk[2],valstk[1]);
end

procedure action_149()
#line 505 "unigram.y"
 yyval := node("uat", valstk[2],valstk[1]);
end

procedure action_150()
#line 506 "unigram.y"
 yyval := node("unot", valstk[2],valstk[1]);
end

procedure action_151()
#line 507 "unigram.y"
 yyval := node("ubar", valstk[2],valstk[1]);
end

procedure action_152()
#line 508 "unigram.y"
 yyval := node("uconcat", valstk[2],valstk[1]);
end

procedure action_153()
#line 509 "unigram.y"
 yyval := node("ulconcat", valstk[2],valstk[1]);
end

procedure action_154()
#line 510 "unigram.y"
 yyval := node("udot", valstk[2],valstk[1]);
end

procedure action_155()
#line 511 "unigram.y"
 yyval := node("ubang", valstk[2],valstk[1]);
end

procedure action_156()
#line 512 "unigram.y"
 yyval := node("udiff", valstk[2],valstk[1]);
end

procedure action_157()
#line 513 "unigram.y"
 yyval := node("uplus", valstk[2],valstk[1]);
end

procedure action_158()
#line 514 "unigram.y"
 yyval := node("ustar", valstk[2],valstk[1]);
end

procedure action_159()
#line 515 "unigram.y"
 yyval := node("uslash", valstk[2],valstk[1]);
end

procedure action_160()
#line 516 "unigram.y"
 yyval := node("ucaret", valstk[2],valstk[1]);
end

procedure action_161()
#line 517 "unigram.y"
 yyval := node("uinter", valstk[2],valstk[1]);
end

procedure action_162()
#line 518 "unigram.y"
 yyval := node("utilde", valstk[2],valstk[1]);
end

procedure action_163()
#line 519 "unigram.y"
 yyval := node("uminus", valstk[2],valstk[1]);
end

procedure action_164()
#line 520 "unigram.y"
 yyval := node("unumeq", valstk[2],valstk[1]);
end

procedure action_165()
#line 521 "unigram.y"
 yyval := node("unumne", valstk[2],valstk[1]);
end

procedure action_166()
#line 522 "unigram.y"
 yyval := node("ulexeq", valstk[2],valstk[1]);
end

procedure action_167()
#line 523 "unigram.y"
 yyval := node("ulexne", valstk[2],valstk[1]);
end

procedure action_168()
#line 524 "unigram.y"
 yyval := node("uequiv", valstk[2],valstk[1]);
end

procedure action_169()
#line 525 "unigram.y"
 yyval := node("uunion", valstk[2],valstk[1]);
end

procedure action_170()
#line 526 "unigram.y"
 yyval := node("uqmark", valstk[2],valstk[1]);
end

procedure action_171()
#line 527 "unigram.y"
 yyval := node("unotequiv", valstk[2],valstk[1]);
end

procedure action_172()
#line 528 "unigram.y"
 yyval := node("ubackslash", valstk[2],valstk[1]);
end

procedure action_182()
#line 539 "unigram.y"
 yyval := node("create", valstk[2],valstk[1]);
end

procedure action_184()
#line 541 "unigram.y"
 yyval := node("Next", valstk[1]);
end

procedure action_185()
#line 542 "unigram.y"
 yyval := node("Break", valstk[2],valstk[1]);
end

procedure action_186()
#line 543 "unigram.y"
 yyval := node("Paren", valstk[3],valstk[2],valstk[1]);
end

procedure action_187()
#line 544 "unigram.y"
 yyval := node("Brace", valstk[3],valstk[2],valstk[1]);
end

procedure action_188()
#line 545 "unigram.y"
 yyval := node("Brack", valstk[3],valstk[2],valstk[1]);
end

procedure action_189()
#line 546 "unigram.y"
 yyval := node("Subscript", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_190()
#line 547 "unigram.y"
 yyval := node("Pdco0", valstk[3],valstk[2],valstk[1]);
end

procedure action_191()
#line 548 "unigram.y"
 yyval := node("Pdco1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_192()
#line 549 "unigram.y"
 yyval := node("invoke", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_193()
#line 550 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_194()
#line 553 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_195()
#line 556 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_196()
#line 559 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_197()
#line 562 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]) 
end

procedure action_199()
#line 564 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]) 
end

procedure action_200()
#line 565 "unigram.y"
 yyval := node("keyword",valstk[2],valstk[1]) 
end

procedure action_201()
#line 566 "unigram.y"
 yyval := Keyword(valstk[2],valstk[1]) 
end

procedure action_202()
#line 568 "unigram.y"
 yyval := node("While0", valstk[2],valstk[1]);
end

procedure action_203()
#line 569 "unigram.y"
 yyval := node("While1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_204()
#line 571 "unigram.y"
 yyval := node("until", valstk[2],valstk[1]);
end

procedure action_205()
#line 572 "unigram.y"
 yyval := node("until1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_206()
#line 574 "unigram.y"
 yyval := node("every", valstk[2],valstk[1]);
end

procedure action_207()
#line 575 "unigram.y"
 yyval := node("every1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_208()
#line 577 "unigram.y"
 yyval := node("repeat", valstk[2],valstk[1]);
end

procedure action_210()
#line 580 "unigram.y"
 yyval := node("return", valstk[2], valstk[1]);
end

procedure action_211()
#line 581 "unigram.y"
 yyval := node("Suspend0", valstk[2],valstk[1]);
end

procedure action_212()
#line 582 "unigram.y"
 yyval := node("Suspend1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_213()
#line 584 "unigram.y"
 yyval := node("If0", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_214()
#line 585 "unigram.y"
 yyval := node("If1", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_215()
#line 587 "unigram.y"
 yyval := node("Case", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_217()
#line 590 "unigram.y"
 yyval := node("Caselist", valstk[3],";",valstk[1]);
end

procedure action_218()
#line 592 "unigram.y"
 yyval := node("cclause0", valstk[3],valstk[2],valstk[1]);
end

procedure action_219()
#line 593 "unigram.y"
 yyval := node("cclause1", valstk[3],valstk[2],valstk[1]);
end

procedure action_221()
#line 596 "unigram.y"

	   if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
	      yyval := valstk[3]; put(yyval.children, valstk[2], valstk[1])
	      }
	   else
	      yyval := node("elst1", valstk[3],valstk[2],valstk[1])
	   
end

procedure action_222()
#line 604 "unigram.y"
 yyval := node("pdcolist0", valstk[1]) 
end

procedure action_223()
#line 605 "unigram.y"
 yyval := node("pdcolist1", valstk[3],valstk[2],valstk[1]); 
end

procedure action_228()
#line 612 "unigram.y"
 yyval := node("section", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_233()
#line 619 "unigram.y"
 yyval := node("compound", valstk[3],";",valstk[1]);
end

procedure action_235()
#line 622 "unigram.y"
 yyval := node("error", valstk[4],valstk[2],valstk[1]); 
end

procedure action_236()
#line 623 "unigram.y"
 yyval := node("error"); 
end

#line 3127 "unigram.icn"
