### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 143 "unigram.y"

procedure Keyword(x1,x2)
   static keywords
   initial {
      keywords := set(["allocated","clock","collections","column","current",
		       "date","now","dateline","digits","e","error",
		       "errornumber","errortext","errorvalue","errout","fail",
		       "eventcode","eventsource","eventvalue","features",
		       "file","host","input","lcase","letters","level",
		       "line","main","null","output","phi","pi","pick","pos",
		       "progname","random","regions","source","storage",
		       "subject","time","trace","dump","ucase","version",
		       "errno","window","col","row","x","y","interval",
		       "control","shift","meta","lpress","mpress","rpress",
		       "lrelease","mrelease","rrelease","ldrag","mdrag",
		       "rdrag","resize","ascii","cset"])
      }

   # verify that x2 is a valid keyword
   if not member(keywords, x2.s) then
      write(&errout, "&",x2.s," is not a valid keyword!")

   return node("keyword",x1,x2)
end

global list_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
initial { list_of_all_fields := [ ]; dummyrecno := 1 }

   if \iconc then {
      if type(x3) == "token" then {
	 put(list_of_all_fields, x3.s)
#	 write(&errout, "field ", image(x3.s))
	 }
      }

   return node("field",x1,x2,x3)
end

procedure Clone1stToken(n)
   case type(n) of {
      "token": return copy(n)
      "treenode": {
	 return Clone1stToken(!n.children)
	 }
      }
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
   
   if yynerrs > 0 then
      istop(yynerrs || " error" || (if yynerrs > 1 then "s" else ""))

   package_level_syms := set()
   package_level_class_syms := set()
   set_package_level_syms(x1)
   scopecheck_superclass_decs(x1)

   outline := 1
   outcol := 1
   #
   # export specifications for each class
   #
   native := set()
   every cl := classes.foreach_t() do {
      cl.WriteSpec()
      insert(native, cl)
      }
   #
   # import class specifications, transitively
   #
   repeat {
      added := 0
      every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
         if /classes.lookup(super) then {
	    added := 1
	    readspec(super)
	    cl := classes.lookup(super)
	    if /cl then halt("can't inherit class '",super,"'")
	    iwrite("  inherits ", super, " from ", cl.linkfile)
	    writelink(cl.dir, cl.linkfile)
            }
       }
    if added = 0 then break
  }
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
  every (classes.foreach_t()).transitive_closure()
  every (classes.foreach_t()).resolve()

  scopecheck_bodies(x1)

   if \thePackage then {
      every thePackage.insertsym(!package_level_syms)
      }

  if \iconc then  {
     iconc_prep_parse_tree(&null, x1)
     }

  #
  # generate output
  #
#  iwrite("Generating code:")
   yyprint(x1)
   write(yyout)

   if \iconc & (type(list_of_all_fields) == "list") &
	(*list_of_all_fields > 0) then {
      writes(yyout, "record __dummyrecord",dummyrecno,"(",
			list_of_all_fields[1])
      every writes(yyout, ",", list_of_all_fields[2 to *list_of_all_fields])
      write(yyout, ")")
      dummyrecno +:= 1
      list_of_all_fields := [ ]
      }
end
#line 126 "unigram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define DEFAULT 268
$define DO 269
$define ELSE 270
$define END 271
$define EVERY 272
$define FAIL 273
$define GLOBAL 274
$define IF 275
$define IMPORT 276
$define iconINITIAL 277
$define INITIALLY 278
$define INVOCABLE 279
$define LINK 280
$define LOCAL 281
$define METHOD 282
$define NEXT 283
$define NOT 284
$define OF 285
$define PACKAGE 286
$define PROCEDURE 287
$define RECORD 288
$define REPEAT 289
$define RETURN 290
$define STATIC 291
$define SUSPEND 292
$define THEN 293
$define TO 294
$define UNTIL 295
$define WHILE 296
$define BANG 297
$define MOD 298
$define AUGMOD 299
$define AND 300
$define AUGAND 301
$define STAR 302
$define AUGSTAR 303
$define INTER 304
$define AUGINTER 305
$define PLUS 306
$define AUGPLUS 307
$define UNION 308
$define AUGUNION 309
$define MINUS 310
$define AUGMINUS 311
$define DIFF 312
$define AUGDIFF 313
$define DOT 314
$define SLASH 315
$define AUGSLASH 316
$define ASSIGN 317
$define SWAP 318
$define NMLT 319
$define AUGNMLT 320
$define REVASSIGN 321
$define REVSWAP 322
$define SLT 323
$define AUGSLT 324
$define SLE 325
$define AUGSLE 326
$define NMLE 327
$define AUGNMLE 328
$define NMEQ 329
$define AUGNMEQ 330
$define SEQ 331
$define AUGSEQ 332
$define EQUIV 333
$define AUGEQUIV 334
$define NMGT 335
$define AUGNMGT 336
$define NMGE 337
$define AUGNMGE 338
$define SGT 339
$define AUGSGT 340
$define SGE 341
$define AUGSGE 342
$define QMARK 343
$define AUGQMARK 344
$define AT 345
$define AUGAT 346
$define BACKSLASH 347
$define CARET 348
$define AUGCARET 349
$define BAR 350
$define CONCAT 351
$define AUGCONCAT 352
$define LCONCAT 353
$define AUGLCONCAT 354
$define TILDE 355
$define NMNE 356
$define AUGNMNE 357
$define SNE 358
$define AUGSNE 359
$define NEQUIV 360
$define AUGNEQUIV 361
$define LPAREN 362
$define RPAREN 363
$define PCOLON 364
$define COMMA 365
$define MCOLON 366
$define COLON 367
$define COLONCOLON 368
$define SEMICOL 369
$define LBRACK 370
$define RBRACK 371
$define LBRACE 372
$define RBRACE 373
$define DOLLAR 374
$define ABSTRACT 375
$define PMATCH 376
$define PAND 377
$define POR 378
$define PUNEVAL 379
$define PASSNONMATCH 380
$define PIMDASSN 381
$define PSETCUR 382
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
    2,   11,   11,   11,   16,   16,   10,   10,   17,   20,
   20,   20,   22,   22,   19,   19,   19,   19,    9,   24,
   24,   25,   25,   25,    7,    8,    6,   27,   27,   26,
   26,    5,    3,   29,   29,    4,   23,   23,   30,   31,
   15,   15,   15,   21,   21,   21,   28,   28,   34,   34,
   34,   34,   36,   36,   36,   36,   32,   32,   33,   33,
   37,   37,   37,   37,   38,   40,   40,   40,   18,   18,
   12,   12,   12,   13,   13,   14,   14,   42,   42,   41,
   41,   43,   43,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   44,   44,   45,   45,
   45,   45,   46,   46,   46,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,   48,   48,   48,   49,   49,   49,   49,   49,
   50,   50,   50,   50,   50,   51,   51,   52,   52,   52,
   52,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   59,   59,   60,
   60,   61,   61,   62,   56,   56,   56,   56,   57,   57,
   58,   66,   66,   67,   67,   63,   63,   65,   65,   39,
   39,   39,   39,   55,   68,   68,   68,   64,   64,    0,
    4,   41,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    8,    0,    1,    3,    7,    6,    0,
    3,    3,    3,    2,    0,    2,    2,    2,    2,    1,
    3,    1,    1,    3,    2,    2,    2,    1,    3,    1,
    1,    2,    5,    0,    1,    6,    6,    2,    5,    5,
    0,    1,    3,    0,    1,    3,    1,    3,    1,    3,
    3,    5,    1,    3,    3,    5,    1,    3,    1,    3,
    1,    3,    3,    5,    2,    0,    1,    1,    0,    4,
    0,    4,    4,    0,    3,    0,    3,    0,    1,    1,
    3,    1,    3,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    3,    1,    3,
    5,    3,    1,    3,    3,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    3,    3,    1,    3,    3,    3,    3,
    1,    3,    3,    3,    3,    1,    3,    1,    3,    3,
    3,    1,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    2,    3,    3,    3,    4,    3,    4,    4,    6,    6,
    8,    8,    3,    1,    3,    2,    2,    2,    4,    2,
    4,    2,    4,    2,    1,    2,    2,    4,    4,    6,
    6,    1,    3,    3,    3,    1,    3,    1,    3,    1,
    1,    1,    1,    6,    1,    1,    1,    1,    3,    3,
    4,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    4,    5,    6,    7,    8,    9,
   10,   11,    0,    0,  260,    0,   57,    0,   40,   41,
   38,    0,   32,    0,    0,   30,    0,   35,    0,    0,
    0,   79,    0,   81,    0,    0,    0,    0,    0,    0,
    0,    0,   17,    0,  262,    0,  250,  251,  252,  253,
    0,    0,    0,    0,  235,    0,  210,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  207,    0,    0,  224,   92,  198,    0,    0,    0,
    0,    0,  129,    0,    0,    0,    0,  161,    0,  168,
    0,  199,  200,  201,  202,  203,  204,  205,  206,    0,
    0,    0,    0,   58,   39,   34,   31,    0,    0,    0,
   67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  211,    0,    0,    0,    0,  174,    0,  236,
    0,  237,    0,    0,  179,  227,  226,  182,  185,  181,
  193,  187,  180,  178,  183,  188,  190,  192,  194,  173,
  196,  184,  175,  176,  177,  186,  189,  191,  195,  246,
    0,   24,    0,    0,    0,  197,  261,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   21,   22,   77,   78,
    0,    0,   69,    0,    0,   49,    0,    0,   43,    0,
    0,    0,   48,   28,   27,   16,    0,   26,   81,   23,
    0,    0,    0,    0,    0,    0,  212,    0,  214,    0,
  213,    0,   87,   93,  108,  125,  105,  106,  103,  102,
  104,  101,  107,   96,   95,  115,   98,   97,  122,  121,
  114,  110,  118,  111,  113,  112,  120,  119,  124,  126,
  109,   99,  100,  116,  123,  117,    0,    0,  132,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  135,    0,    0,    0,  134,    0,    0,    0,    0,    0,
    0,    0,    0,  165,  162,  163,  164,  171,  170,  169,
  167,  223,  225,    0,    0,    0,  216,  248,    0,    0,
    0,    0,    0,    0,    0,    0,   19,    0,    0,   75,
    0,   73,   68,   53,    0,    0,   80,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  247,  259,    0,
  218,  256,  257,  255,    0,  215,    0,  217,    0,    0,
    0,   85,   82,    0,    0,   83,   46,   70,   56,    0,
   60,    0,    0,    0,   81,   18,    0,    0,    0,    0,
  242,    0,  131,    0,  249,    0,    0,    0,    0,   64,
    0,   74,    0,   50,    0,    0,    0,    0,    0,    0,
  241,    0,  254,    0,    0,  220,  219,    0,   62,    0,
    0,   47,    0,    0,  243,    0,    0,   66,   81,   13,
  222,  221,    0,    0,   14,
  ]
  yydgoto := [                          2,
    3,   14,  147,   16,  148,   18,   19,   20,   21,   22,
  410,  130,  276,  104,  139,   42,   23,   54,  149,   46,
  281,  105,  150,   35,   36,   31,   32,   28,  143,   24,
  151,  140,  282,  291,  106,  395,  141,  283,  107,  284,
  108,  190,  110,  111,  112,  113,  114,  115,  116,  117,
  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
  128,  129,  191,  195,  389,  450,  451,  425,
  ]
  yysindex := [                      -187,
    0,    0,  -28,   94,    0, -137, -108,   92,  130,   92,
   92,  -51,  -18,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -232, -242,    0, -208,    0, -189,    0,    0,
    0,  -71,    0,   -9,  -60,    0,  -71,    0,  -19,    1,
   50,    0,  538,    0, -240,    3,  115,   92,  128,  130,
  136, -108,    0, -156,    0,   35,    0,    0,    0,    0,
  538,  538,  538,  538,    0,  538,    0,  664,  538,  538,
  538,  538,  538,  664,  -69,  664,  664,  664,  664,  664,
  664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
  664,  664,  664,  664,  664,  664,  664,  538,  149,  538,
  538,    0,  664,  160,    0,    0,    0,  111,   73,  101,
 6355, -233,    0,  -27, -331,  -13,  -41,    0, -132,    0,
 -167,    0,    0,    0,    0,    0,    0,    0,    0,  -15,
 -289, -208,  -37,    0,    0,    0,    0,   88,   95,  -48,
    0, -189,   99,  207,  209,  193, -122, -122,  107, -122,
  108,  221,    0,  -77,  111,  -99,  -83,    0,  111,    0,
  -89,    0,  -86,  -82,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   29,    0, -171,  110,  112,    0,    0,  664,  538,  664,
  664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
  664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
  664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
  664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
  664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
  664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
  664,  664,  664,  664,  664,  664,  664,  -80,  538,  538,
  284,  -79,  538,  207,  226,  538,    0,    0,    0,    0,
  121,  -38,    0,  136,   79,    0,  136,  116,    0,  174,
  -78,  127,    0,    0,    0,    0,  214,    0,    0,    0,
  122,  538,  538,  538,  538,  538,    0,  538,    0,  538,
    0,  101,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -233,  229,    0, -331,
 -331, -331, -331, -331, -331, -331, -331, -331, -331, -331,
    0, -331, -331, -331,    0, -331, -331,  -13,  -13,  -41,
  -41,  -41,  -41,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   47, -243, -135,    0,    0, -141, -299,
  133, -223,  -62,  179,  -39,  227,    0,  -37,  126,    0,
  132,    0,    0,    0,  664,  244,    0,  136,  -94,  232,
  -15,  411,  111,  -98,  111,  111,  111,    0,    0,  664,
    0,    0,    0,    0,  538,    0,  538,    0,  -31,  538,
  538,    0,    0,  664,  249,    0,    0,    0,    0,  140,
    0,  192,  148,  136,    0,    0,  538,  147, -238,  -45,
    0,  538,    0, -236,    0,  154,  156,   56,   60,    0,
  203,    0,  664,    0,  158,  -15,  251,  538,  538,  411,
    0,  111,    0,  538,  538,    0,    0,  664,    0,  155,
  538,    0,  111,  111,    0,   74,   80,    0,    0,    0,
    0,    0,  -15,  538,    0,
  ]
  yyrindex := [                       109,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -120,    0,    0,  161,    0, -206,    0,    0,
    0,  194,    0,  -95,  321,    0,  448,    0,    0,    0,
  -92,    0, -250,    0,    0,    0,    0,    0,    0,    0,
  165,  167,    0, -252,    0,  759,    0,    0,    0,    0,
 5932,    0,    0,    0,    0,    0,    0,    0,    0, 5932,
 5932,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   85,    0,  -81,
  -25,    0,    0,    0,    0,    0,    0,  874,    0,  989,
 6047, 2024,    0, 6162, 2138, 4782, 4897,    0, 5012,    0,
 5817,    0,    0,    0,    0,    0,    0,    0,    0,  157,
  161,  161, -241,    0,    0,    0,    0,  -54,    0,  168,
    0,  169,    0,    0,    0,    0, -252, -252,    7, -252,
    0,    0,    0,    0, 1104, 2253,    0,    0, 1219,    0,
 2368,    0, 2483, 2598,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  162,    0,    0,    0,    0, -250,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   85,  -81,
  173,    0,    0,    0,    0, -250,    0,    0,    0,    0,
    0,  170,    0,    0,    0,    0,    0,    0,    0, -140,
 -120,    0,    0,    0,    0,    0,  263,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -340,    0,  -25,
    0, 1334,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2713, 6272,    0, 2827,
 2942, 3057, 3172, 3287, 3402, 3517, 3632, 3747, 3862, 3977,
    0, 4092, 4207, 4322,    0, 4437, 4552, 5127, 5242, 5357,
 5472, 5587, 5702,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -46,    0,    0,    0,    0,    0,
    0,    0,    0,  -24,    0,    0,    0,  280,    0,    0,
  -50,    0,    0,    0,    0,    0,    0,  165,    0,    0,
  157,    0, 1449, 4667, 1564, 1679, 1794,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -109,    0,    0,   85,
   85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -138,    0,  165,    0,    0, -250,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -23,    0,    0,    0,    0,  157,    0,    0,    0,    0,
    0, 1909,    0,   85,   85,    0,    0,    0,    0,    0,
 -250,    0,  -14,  -12,    0,    0,    0,    0,    0,    0,
    0,    0,  157, -250,    0,
  ]
  yygindex := [                         0,
  545,    0,  246,    0,  268,    0,    0,    0,    0,    0,
    0, -292, -336, -193, -269, -136,    0,    0,  219,  245,
    0,  503,    0,    0,  500,   18,  542,  501,    0,    0,
  408,    0,    0,  281, -116,    0,  118,  163, -276,    0,
  -61,  -43,  360,    0,  327, -180,    0, 6484,  172,  177,
   19,    0,  -44,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -96,  252,    0,    0,   93,    0,
  ]
$define YYTABLESIZE 6737
  yytable := [                        109,
  154,  155,  156,  193,  157,  313,  411,  159,  402,  161,
  163,  164,  297,   43,  429,   76,  131,  153,   25,  254,
   86,  255,   88,  158,   88,   25,  160,  162,   38,  165,
   88,  168,  169,  170,  171,  172,  173,  174,  175,  176,
  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
  187,  188,  189,  348,  349,   42,  198,  194,  196,   42,
  234,  198,  430,  198,   42,  135,  361,   42,    1,   42,
  365,   42,   42,   42,  447,   42,  198,   45,  152,   42,
   42,   42,  396,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,   25,    7,   88,   26,
  422,   54,  423,  424,  144,  145,   44,   99,  469,  481,
   59,   13,   61,   59,  473,   61,   41,   59,  443,   61,
   59,   59,   61,   61,  235,  432,  268,   59,   27,   61,
   15,    7,  466,   15,  407,  109,  494,   15,   45,  145,
   15,   15,   42,  462,  264,   13,   33,   15,   42,  302,
   33,  452,  384,  386,  465,   47,  382,  390,   33,  304,
   33,   16,  305,   33,   33,   16,  306,  166,   16,   16,
   33,   33,   33,  308,  269,   16,  493,  383,  391,  309,
  198,  198,  270,  167,  271,   39,  272,  301,  385,  303,
  198,  392,  265,  198,  266,  267,  198,  198,  146,  378,
  379,  380,  198,  427,   59,  456,   61,  388,   59,  308,
   61,  428,  109,    5,   59,  426,   61,    6,   40,  453,
  413,  414,  415,  416,  417,    7,  457,    8,   15,   15,
    9,   10,  146,  467,   15,   88,  260,   11,   12,   13,
  261,  273,  262,   88,  418,  274,  194,  444,  279,   33,
   17,   17,  280,  263,  445,  275,   16,   15,  374,  375,
  376,  377,   16,   88,   15,  381,  406,  490,  441,   88,
  296,  236,  256,   48,  257,  237,  258,  238,  259,  239,
  495,  240,  406,  241,   50,  242,  433,  243,   71,  244,
   71,  245,   72,  246,   72,   71,  287,  460,   89,   72,
   53,  288,  247,  470,   89,  435,  398,  471,  248,  436,
  249,  399,  250,  458,  459,  401,   57,   58,   59,   60,
   63,   65,   51,   88,   63,   65,  479,   88,   29,  251,
  449,   30,  252,  253,  244,   25,  245,   49,  244,    6,
  245,  488,   52,  454,  133,  294,  295,    7,  298,    8,
    2,  134,    9,   10,    2,  277,  278,  486,  487,   11,
   12,   13,    2,  455,    2,  136,   33,    2,    2,   34,
  472,  307,  138,  308,    2,    2,    2,   57,   58,   59,
   60,  400,  152,  109,  403,  192,  483,  484,  449,  421,
  198,  308,   84,   84,   84,   84,   84,   84,  476,   84,
  308,   84,  477,   84,  308,  368,  369,   84,   84,   84,
  197,   84,  370,  371,  372,  373,  491,  109,  308,   84,
   84,  199,  492,  200,  308,   84,   84,   88,   84,   88,
  109,   84,   84,   84,  285,   36,   84,  286,   84,   36,
   84,  289,   84,  290,   84,  292,   84,   36,   84,   36,
   84,   84,   36,   36,  145,  296,  299,  300,  310,   36,
   36,   36,  394,  397,  311,   84,  404,   84,  408,   84,
  405,  409,  420,  412,  431,  434,  439,  437,  440,   84,
  442,   84,  446,   84,   84,  461,   84,   84,  463,   84,
  464,   84,   84,  468,   84,  474,   84,  475,   84,  478,
  480,  482,   20,  489,   84,   84,   84,   51,   84,   44,
   52,   45,   55,   12,  258,   84,   76,   88,   84,   55,
   56,   57,   58,   59,   60,    4,   61,  132,   62,  137,
   63,   37,  142,  293,  393,   64,   65,  312,   66,  347,
  438,  419,  485,    0,    0,    0,   67,   68,    0,    0,
    0,    0,   69,   70,    0,   71,    0,    0,   72,   73,
   74,    0,   29,   75,    0,   76,   29,   77,    0,   78,
    0,   79,    0,   80,   29,   81,   29,   82,   83,   29,
   29,    0,    0,    0,    0,    0,   29,   29,   29,    0,
    0,    0,   84,    0,   85,    0,   86,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   87,    0,   88,    0,
   89,   90,    0,   91,   92,    0,   93,    0,   94,   95,
    0,   96,    0,   97,    0,   98,    0,    0,    0,    0,
    0,   99,    0,  100,    0,  101,  387,    0,    0,    0,
    0,    0,  102,    0,    0,  103,   55,   56,   57,   58,
   59,   60,    0,   61,    0,   62,    0,   63,  448,    0,
    0,    0,   64,   65,    0,   66,    0,    0,    0,    0,
    0,    0,    0,   67,   68,    0,    0,    0,    0,   69,
   70,    0,   71,    0,    0,   72,   73,   74,    0,   37,
   75,    0,   76,   37,   77,    0,   78,    0,   79,    0,
   80,   37,   81,   37,   82,   83,   37,   37,    0,    0,
    0,    0,    0,   37,   37,   37,    0,    0,    0,   84,
    0,   85,    0,   86,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   87,    0,   88,    0,   89,   90,    0,
   91,   92,    0,   93,    0,   94,   95,    0,   96,    0,
   97,    0,   98,    0,    0,    0,    0,    0,   99,    0,
  100,    0,  101,    0,    0,    0,    0,    0,    0,  102,
    0,    0,  103,   55,   56,   57,   58,   59,   60,    0,
   61,    0,   62,    0,   63,    0,    0,    0,    0,   64,
   65,    0,   66,    0,    0,    0,    0,    0,    0,    0,
   67,   68,    0,    0,    0,    0,   69,   70,    0,   71,
    0,    0,   72,   73,   74,    0,    0,   75,    0,   76,
    0,   77,    0,   78,    0,   79,    0,   80,    0,   81,
    0,   82,   83,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   84,    0,   85,    0,
   86,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   87,    0,   88,    0,   89,   90,    0,   91,   92,    0,
   93,    0,   94,   95,    0,   96,    0,   97,    0,   98,
    0,    0,    0,    0,    0,   99,    0,  100,    0,  101,
    0,    0,    0,    0,    0,    0,  102,    0,    0,  103,
   56,   57,   58,   59,   60,    0,   61,    0,   62,    0,
   63,    0,    0,    0,    0,   64,   65,    0,   66,    0,
    0,    0,    0,    0,    0,    0,   67,   68,    0,    0,
    0,    0,   69,   70,    0,   71,    0,    0,   72,   73,
   74,    0,    0,   75,    0,   76,    0,   77,    0,   78,
    0,   79,    0,   80,    0,   81,    0,   82,   83,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   84,    0,   85,    0,   86,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   87,    0,   88,    0,
   89,   90,    0,   91,   92,    0,   93,    0,   94,   95,
    0,   96,  209,   97,    0,   98,    0,  209,  209,  209,
    0,   99,  209,  100,    0,  101,  209,    0,    0,  209,
  209,    0,  102,  209,    0,  103,  209,    0,    0,    0,
    0,  209,  209,    0,    0,  209,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  209,  209,  209,    0,  209,  209,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,    0,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  209,   89,  209,  209,
    0,    0,   89,   89,   89,    0,    0,   89,    0,    0,
    0,   89,    0,    0,   89,   89,    0,    0,   89,    0,
    0,   89,    0,    0,    0,    0,   89,   89,    0,    0,
   89,   89,   89,    0,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,    0,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,    0,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   90,   89,   89,    0,    0,   90,   90,   90,
    0,    0,   90,    0,    0,    0,   90,    0,    0,   90,
   90,    0,    0,   90,    0,    0,   90,    0,    0,    0,
    0,   90,   90,    0,    0,   90,   90,   90,   90,   90,
   90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
   90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
   90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
   90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
   90,    0,   90,   90,   90,   90,   90,   90,   90,   90,
   90,   90,   90,    0,   90,   90,   90,   90,   90,   90,
   90,   90,   90,   90,   90,   90,    0,   90,   90,   90,
   90,   90,   90,   90,   90,   90,   90,  208,   90,   90,
    0,    0,  208,  208,  208,    0,    0,  208,    0,    0,
    0,  208,    0,    0,  208,  208,    0,    0,  208,    0,
    0,  208,    0,    0,    0,    0,  208,  208,    0,    0,
  208,  208,  208,    0,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,    0,  208,
  208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
  208,    0,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  234,  208,  208,    0,    0,  234,  234,  234,
    0,    0,  234,    0,    0,    0,  234,    0,    0,  234,
  234,    0,    0,  234,    0,    0,  234,    0,    0,    0,
    0,  234,  234,    0,    0,  234,  234,  234,    0,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,    0,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,    0,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,   91,  234,  234,
    0,    0,   91,   91,   91,    0,    0,   91,    0,    0,
    0,   91,    0,    0,   91,   91,    0,    0,   91,    0,
    0,   91,    0,    0,    0,    0,   91,   91,    0,    0,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,    0,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,    0,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,    0,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,  233,   91,   91,    0,    0,  233,  233,  233,
    0,    0,  233,    0,    0,    0,  233,    0,    0,  233,
  233,    0,    0,  233,    0,    0,  233,    0,    0,    0,
    0,  233,  233,    0,    0,  233,  233,  233,    0,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,    0,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,    0,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  238,  233,  233,
    0,    0,  238,  238,  238,    0,    0,  238,    0,    0,
    0,  238,    0,    0,  238,  238,    0,    0,  238,    0,
    0,  238,    0,    0,    0,    0,  238,  238,    0,    0,
  238,  238,  238,    0,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,    0,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,    0,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  238,  231,  238,  238,    0,    0,  231,  231,  231,
    0,    0,  231,    0,    0,    0,  231,    0,    0,  231,
  231,    0,    0,  231,    0,    0,  231,    0,    0,    0,
    0,  231,  231,    0,    0,  231,  231,  231,    0,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,    0,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,    0,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  229,  231,  231,
    0,    0,  229,  229,  229,    0,    0,  229,    0,    0,
    0,  229,    0,    0,  229,  229,    0,    0,  229,    0,
    0,  229,    0,    0,    0,    0,  229,  229,    0,    0,
  229,  229,  229,    0,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  229,  229,  229,    0,  229,
  229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,    0,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  240,  229,  229,    0,    0,  240,  240,  240,
    0,    0,  240,    0,    0,    0,  240,    0,    0,  240,
  240,    0,    0,  240,    0,    0,  240,    0,    0,    0,
    0,  240,  240,    0,    0,  240,  240,  240,    0,  240,
  240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
  240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
  240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
  240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
  240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
  240,  240,  240,    0,  240,  240,  240,  240,  240,  240,
  240,  240,  240,  240,  240,  240,    0,  240,  240,  240,
  240,  240,  240,  240,  240,  240,  240,  127,  240,  240,
    0,    0,  127,  127,  127,    0,    0,  127,    0,    0,
    0,  127,    0,    0,  127,  127,    0,    0,  127,    0,
    0,  127,    0,    0,    0,    0,  127,    0,    0,    0,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,    0,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,    0,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  136,    0,  127,  127,    0,  136,  136,  136,    0,
    0,  136,    0,    0,    0,  136,    0,    0,  136,  136,
    0,    0,  136,    0,    0,  136,    0,    0,    0,    0,
  136,  136,    0,    0,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,    0,  136,
    0,  136,    0,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,    0,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  232,  136,  136,    0,
    0,    0,  232,  232,    0,    0,  232,    0,    0,    0,
  232,    0,    0,  232,  232,    0,    0,  232,    0,    0,
  232,    0,    0,    0,    0,  232,  232,    0,    0,  232,
  232,  232,    0,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,    0,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
    0,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,   89,  232,  232,    0,    0,    0,   89,   89,    0,
    0,   89,    0,    0,    0,   89,    0,    0,   89,   89,
    0,    0,   89,    0,    0,   89,    0,    0,    0,    0,
   89,   89,    0,    0,   89,   89,   89,    0,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,    0,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,   89,   89,    0,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,  230,   89,   89,    0,
    0,    0,  230,  230,    0,    0,  230,    0,    0,    0,
  230,    0,    0,  230,  230,    0,    0,  230,    0,    0,
  230,    0,    0,    0,    0,  230,  230,    0,    0,  230,
  230,  230,    0,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  230,  230,  230,  230,  230,  230,    0,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
    0,  230,  230,  230,  230,  230,  230,  230,  230,  230,
  230,  228,  230,  230,    0,    0,    0,  228,  228,    0,
    0,  228,    0,    0,    0,  228,    0,    0,  228,  228,
    0,    0,  228,    0,    0,  228,    0,    0,    0,    0,
  228,  228,    0,    0,  228,  228,  228,    0,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,    0,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,    0,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  128,  228,  228,    0,
    0,  128,  128,  128,    0,    0,  128,    0,    0,    0,
  128,    0,    0,  128,  128,    0,    0,  128,    0,    0,
  128,    0,    0,    0,    0,  128,    0,    0,    0,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,    0,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
    0,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  149,    0,  128,  128,    0,  149,  149,  149,    0,    0,
  149,    0,    0,    0,  149,    0,    0,  149,  149,    0,
    0,  149,    0,    0,  149,    0,    0,    0,    0,  149,
  149,    0,    0,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,    0,  149,    0,
  149,    0,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,    0,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  143,  149,  149,    0,    0,
  143,  143,  143,    0,    0,  143,    0,    0,    0,  143,
    0,    0,  143,  143,    0,    0,  143,    0,    0,  143,
    0,    0,    0,    0,  143,  143,    0,    0,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,    0,  143,    0,  143,    0,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,    0,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  142,  143,  143,    0,    0,  142,  142,  142,    0,    0,
  142,    0,    0,    0,  142,    0,    0,  142,  142,    0,
    0,  142,    0,    0,  142,    0,    0,    0,    0,  142,
  142,    0,    0,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,    0,  142,    0,
  142,    0,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,    0,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  148,  142,  142,    0,    0,
  148,  148,  148,    0,    0,  148,    0,    0,    0,  148,
    0,    0,  148,  148,    0,    0,  148,    0,    0,  148,
    0,    0,    0,    0,  148,  148,    0,    0,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,    0,  148,    0,  148,    0,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,    0,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  145,  148,  148,    0,    0,  145,  145,  145,    0,    0,
  145,    0,    0,    0,  145,    0,    0,  145,  145,    0,
    0,  145,    0,    0,  145,    0,    0,    0,    0,  145,
  145,    0,    0,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,    0,  145,    0,
  145,    0,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,    0,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  139,  145,  145,    0,    0,
  139,  139,  139,    0,    0,  139,    0,    0,    0,  139,
    0,    0,  139,  139,    0,    0,  139,    0,    0,  139,
    0,    0,    0,    0,  139,  139,    0,    0,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,    0,  139,    0,  139,    0,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,    0,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  151,  139,  139,    0,    0,  151,  151,  151,    0,    0,
  151,    0,    0,    0,  151,    0,    0,  151,  151,    0,
    0,  151,    0,    0,  151,    0,    0,    0,    0,  151,
  151,    0,    0,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,    0,  151,    0,
  151,    0,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,    0,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  147,  151,  151,    0,    0,
  147,  147,  147,    0,    0,  147,    0,    0,    0,  147,
    0,    0,  147,  147,    0,    0,  147,    0,    0,  147,
    0,    0,    0,    0,  147,  147,    0,    0,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,    0,  147,    0,  147,    0,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,    0,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  146,  147,  147,    0,    0,  146,  146,  146,    0,    0,
  146,    0,    0,    0,  146,    0,    0,  146,  146,    0,
    0,  146,    0,    0,  146,    0,    0,    0,    0,  146,
  146,    0,    0,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,    0,  146,    0,
  146,    0,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,    0,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  141,  146,  146,    0,    0,
  141,  141,  141,    0,    0,  141,    0,    0,    0,  141,
    0,    0,  141,  141,    0,    0,  141,    0,    0,  141,
    0,    0,    0,    0,  141,  141,    0,    0,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,    0,  141,    0,  141,    0,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,    0,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  140,  141,  141,    0,    0,  140,  140,  140,    0,    0,
  140,    0,    0,    0,  140,    0,    0,  140,  140,    0,
    0,  140,    0,    0,  140,    0,    0,    0,    0,  140,
  140,    0,    0,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,    0,  140,    0,
  140,    0,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,    0,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  150,  140,  140,    0,    0,
  150,  150,  150,    0,    0,  150,    0,    0,    0,  150,
    0,    0,  150,  150,    0,    0,  150,    0,    0,  150,
    0,    0,    0,    0,  150,  150,    0,    0,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,    0,  150,    0,  150,    0,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,    0,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  144,  150,  150,    0,    0,  144,  144,  144,    0,    0,
  144,    0,    0,    0,  144,    0,    0,  144,  144,    0,
    0,  144,    0,    0,  144,    0,    0,    0,    0,  144,
  144,    0,    0,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,    0,  144,    0,
  144,    0,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,    0,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  152,  144,  144,    0,    0,
  152,  152,  152,    0,    0,  152,    0,    0,    0,  152,
    0,    0,  152,  152,    0,    0,  152,    0,    0,  152,
    0,    0,    0,    0,  152,  152,    0,    0,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,    0,  152,    0,  152,    0,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,    0,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  138,  152,  152,    0,    0,  138,  138,  138,    0,    0,
  138,    0,    0,    0,  138,    0,    0,  138,  138,    0,
    0,  138,    0,    0,  138,    0,    0,    0,    0,  138,
  138,    0,    0,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,    0,  138,    0,
  138,    0,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,    0,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  137,  138,  138,    0,    0,
  137,  137,  137,    0,    0,  137,    0,    0,    0,  137,
    0,    0,  137,  137,    0,    0,  137,    0,    0,  137,
    0,    0,    0,    0,  137,  137,    0,    0,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,    0,  137,    0,  137,    0,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,    0,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  239,  137,  137,    0,    0,  239,    0,  239,    0,    0,
  239,    0,    0,    0,  239,    0,    0,  239,  239,    0,
    0,  239,    0,    0,  239,    0,    0,    0,    0,  239,
  239,    0,    0,  239,  239,  239,    0,  239,  239,  239,
  239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
  239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
  239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
  239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
  239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
  239,    0,  239,  239,  239,  239,  239,  239,  239,  239,
  239,  239,  239,  239,    0,  239,  239,  239,  239,  239,
  239,  239,  239,  239,  239,  153,  239,  239,    0,    0,
  153,  153,  153,    0,    0,  153,    0,    0,    0,  153,
    0,    0,  153,  153,    0,    0,  153,    0,    0,  153,
    0,    0,    0,    0,  153,  153,    0,    0,  153,  153,
  153,  153,  153,  153,  153,  153,  153,    0,  153,    0,
  153,    0,  153,    0,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,    0,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,    0,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  156,  153,  153,    0,    0,  156,  156,  156,    0,    0,
  156,    0,    0,    0,  156,    0,    0,  156,  156,    0,
    0,  156,    0,    0,  156,    0,    0,    0,    0,  156,
  156,    0,    0,  156,    0,  156,  156,  156,    0,  156,
    0,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,    0,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,    0,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,    0,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  166,  156,  156,    0,    0,
  166,  166,  166,    0,    0,  166,    0,    0,    0,  166,
    0,    0,  166,  166,    0,    0,  166,    0,    0,  166,
    0,    0,    0,    0,  166,  166,    0,    0,    0,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,    0,  166,    0,    0,
  166,  166,  166,  166,  166,  166,    0,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,    0,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  154,  166,  166,    0,    0,  154,  154,  154,    0,    0,
  154,    0,    0,    0,  154,    0,    0,  154,  154,    0,
    0,  154,    0,    0,  154,    0,    0,    0,    0,  154,
  154,    0,    0,  154,  154,  154,  154,  154,  154,  154,
  154,  154,    0,  154,    0,  154,    0,  154,    0,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,    0,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,    0,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  155,  154,  154,    0,    0,
  155,  155,  155,    0,    0,  155,    0,    0,    0,  155,
    0,    0,  155,  155,    0,    0,  155,    0,    0,  155,
    0,    0,    0,    0,  155,  155,    0,    0,  155,  155,
  155,  155,  155,  155,  155,  155,  155,    0,  155,    0,
  155,    0,  155,    0,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,    0,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,    0,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  157,  155,  155,    0,    0,  157,  157,  157,    0,    0,
  157,    0,    0,    0,  157,    0,    0,  157,  157,    0,
    0,  157,    0,    0,  157,    0,    0,    0,    0,  157,
  157,    0,    0,  157,    0,  157,  157,  157,    0,  157,
    0,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,    0,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,    0,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,    0,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  159,  157,  157,    0,    0,
  159,  159,  159,    0,    0,  159,    0,    0,    0,  159,
    0,    0,  159,  159,    0,    0,  159,    0,    0,  159,
    0,    0,    0,    0,  159,  159,    0,    0,  159,    0,
  159,  159,  159,    0,  159,    0,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,    0,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,    0,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,    0,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  160,  159,  159,    0,    0,  160,  160,  160,    0,    0,
  160,    0,    0,    0,  160,    0,    0,  160,  160,    0,
    0,  160,    0,    0,  160,    0,    0,    0,    0,  160,
  160,    0,    0,  160,    0,  160,  160,  160,    0,  160,
    0,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,    0,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,    0,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,    0,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  158,  160,  160,    0,    0,
  158,  158,  158,    0,    0,  158,    0,    0,    0,  158,
    0,    0,  158,  158,    0,    0,  158,    0,    0,  158,
    0,    0,    0,    0,  158,  158,    0,    0,  158,    0,
  158,  158,  158,    0,  158,    0,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,    0,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,    0,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,    0,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  172,  158,  158,    0,    0,  172,  172,  172,    0,    0,
  172,    0,    0,    0,  172,    0,    0,  172,  172,    0,
    0,  172,    0,    0,  172,    0,    0,    0,    0,  172,
  172,    0,    0,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
    0,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,    0,  172,  172,  172,  172,  172,  172,    0,  172,
  172,  172,  172,  172,    0,  172,    0,  172,    0,  172,
    0,  172,  172,  172,  172,   88,  172,  172,    0,    0,
   88,   88,   88,    0,    0,   88,    0,    0,    0,   88,
    0,    0,   88,   88,    0,    0,   88,    0,    0,   88,
    0,    0,    0,    0,   88,   88,    0,    0,    0,   88,
   88,    0,   88,    0,   88,    0,   88,    0,   88,    0,
   88,    0,   88,    0,   88,    0,    0,   88,   88,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
    0,   88,    0,   88,    0,   88,   88,   88,   88,   88,
   88,   88,   88,   88,    0,   88,    0,   88,    0,    0,
   88,    0,    0,   88,    0,   88,    0,    0,   88,    0,
   88,    0,   88,    0,   88,   88,   88,   88,   88,    0,
   88,    0,   88,    0,   88,   88,   88,   88,   88,   88,
   94,   88,   88,    0,    0,   94,   94,   94,    0,    0,
   94,    0,    0,    0,   94,    0,    0,   94,   94,    0,
    0,   94,    0,    0,   94,    0,    0,    0,    0,   94,
   94,    0,    0,   94,   94,    0,   94,    0,   94,    0,
   94,    0,   94,    0,   94,    0,   94,    0,   94,    0,
   94,   94,    0,    0,    0,   94,    0,    0,    0,   94,
    0,   94,    0,   94,    0,   94,    0,   94,    0,   94,
    0,   94,    0,   94,    0,   94,    0,   94,    0,   94,
    0,   94,    0,   94,   94,    0,   94,   94,    0,   94,
    0,    0,   94,    0,   94,    0,   94,    0,   94,   94,
   94,   94,   94,   94,    0,   94,   94,   94,   94,   94,
   94,   94,    0,   94,   94,  133,   94,   94,    0,    0,
  133,  133,  133,    0,    0,  133,    0,    0,    0,  133,
    0,    0,  133,  133,    0,    0,  133,    0,    0,  133,
    0,    0,    0,    0,  133,  133,    0,    0,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
    0,  133,  133,  133,    0,  133,    0,  133,    0,  133,
    0,  133,    0,  133,    0,  133,    0,  133,    0,  133,
    0,  133,    0,  133,  133,  133,  133,  133,  133,  133,
  133,    0,  133,  133,  133,  133,    0,    0,  133,    0,
  133,    0,  133,  133,  133,  133,  133,  133,  133,    0,
  133,  133,  133,  133,  133,  133,  133,  133,    0,  133,
  130,  130,  130,    0,    0,  130,    0,    0,    0,  130,
    0,    0,  130,  130,    0,    0,  130,    0,    0,  130,
    0,    0,    0,    0,  130,  130,    0,    0,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,    0,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,    0,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
    0,  130,  130,  201,    0,  202,    0,  203,    0,  204,
    0,  205,    0,  206,    0,  207,    0,  208,    0,    0,
  209,  210,  211,    0,  212,  213,  214,    0,  215,    0,
  216,    0,  217,    0,  218,    0,  219,    0,  220,    0,
  221,    0,  222,    0,  223,    0,  224,    0,  225,    0,
  226,    0,    0,  227,    0,    0,  228,    0,  229,    0,
    0,  230,    0,  231,    0,  232,    0,    0,    0,  350,
  351,  352,  353,  354,  355,  356,  357,  358,  359,  360,
  233,  362,  363,  364,    0,  366,  367,
  ]
  yycheck := [                         43,
   62,   63,   64,  100,   66,  199,  299,   69,  285,   71,
   72,   73,  149,  256,  314,  257,  257,   61,  271,  351,
  271,  353,  363,   68,  365,  278,   70,   71,   11,   74,
  371,   76,   77,   78,   79,   80,   81,   82,   83,   84,
   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
   95,   96,   97,  234,  235,  262,  300,  101,  103,  266,
  294,  300,  362,  300,  271,   48,  247,  274,  256,  276,
  251,  278,  279,  280,  411,  282,  300,  367,  368,  286,
  287,  288,  276,  200,  201,  202,  203,  204,  205,  206,
  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,
  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
  227,  228,  229,  230,  231,  232,  369,  274,  369,  257,
  364,  363,  366,  367,  281,  282,  369,  368,  367,  466,
  271,  288,  271,  274,  371,  274,  369,  278,  408,  278,
  281,  282,  281,  282,  378,  369,  314,  288,  257,  288,
  271,  274,  445,  274,  291,  199,  493,  278,  367,  282,
  281,  282,  369,  440,  297,  288,  262,  288,  375,  269,
  266,  270,  269,  270,  444,  365,  257,  257,  274,  269,
  276,  274,  269,  279,  280,  278,  269,  257,  281,  282,
  286,  287,  288,  365,  362,  288,  489,  278,  278,  371,
  300,  300,  370,  273,  372,  257,  374,  285,  270,  293,
  300,  273,  345,  300,  347,  348,  300,  300,  375,  264,
  265,  266,  300,  365,  365,  257,  365,  271,  369,  365,
  369,  373,  276,  262,  375,  371,  375,  266,  257,  420,
  302,  303,  304,  305,  306,  274,  278,  276,    3,    4,
  279,  280,  375,  447,  375,  365,  298,  286,  287,  288,
  302,  277,  304,  373,  308,  281,  310,  362,  306,  365,
    3,    4,  310,  315,  369,  291,  369,  271,  260,  261,
  262,  263,  375,  365,  278,  267,  365,  481,  405,  371,
  369,  319,  306,  365,  308,  323,  310,  325,  312,  327,
  494,  329,  365,  331,  365,  333,  369,  335,  363,  337,
  365,  339,  363,  341,  365,  370,  365,  434,  365,  370,
  271,  370,  350,  369,  371,  365,  365,  373,  356,  369,
  358,  370,  360,  430,  431,  257,  258,  259,  260,  261,
  365,  365,  362,  369,  369,  369,  463,  373,  257,  377,
  412,  260,  380,  381,  369,  262,  369,  367,  373,  266,
  373,  478,  362,  425,  362,  147,  148,  274,  150,  276,
  262,  257,  279,  280,  266,  131,  132,  474,  475,  286,
  287,  288,  274,  427,  276,  258,  257,  279,  280,  260,
  452,  363,  257,  365,  286,  287,  288,  258,  259,  260,
  261,  284,  368,  447,  287,  257,  468,  469,  470,  363,
  300,  365,  256,  257,  258,  259,  260,  261,  363,  263,
  365,  265,  363,  267,  365,  254,  255,  271,  272,  273,
  271,  275,  256,  257,  258,  259,  363,  481,  365,  283,
  284,  369,  363,  343,  365,  289,  290,  363,  292,  365,
  494,  295,  296,  297,  367,  262,  300,  363,  302,  266,
  304,  363,  306,  257,  308,  257,  310,  274,  312,  276,
  314,  315,  279,  280,  282,  369,  369,  257,  369,  286,
  287,  288,  257,  363,  373,  329,  371,  331,  362,  333,
  317,  278,  264,  372,  362,  317,  371,  271,  367,  343,
  257,  345,  271,  347,  348,  257,  350,  351,  317,  353,
  363,  355,  356,  367,  358,  362,  360,  362,  362,  317,
  363,  271,  362,  369,  368,  369,  370,  363,  372,  363,
  363,  363,  363,  271,  373,  379,  257,  365,  382,  256,
  257,  258,  259,  260,  261,    1,  263,   45,  265,   50,
  267,   10,   52,  146,  274,  272,  273,  198,  275,  233,
  398,  310,  470,   -1,   -1,   -1,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   -1,  292,   -1,   -1,  295,  296,
  297,   -1,  262,  300,   -1,  302,  266,  304,   -1,  306,
   -1,  308,   -1,  310,  274,  312,  276,  314,  315,  279,
  280,   -1,   -1,   -1,   -1,   -1,  286,  287,  288,   -1,
   -1,   -1,  329,   -1,  331,   -1,  333,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,  345,   -1,
  347,  348,   -1,  350,  351,   -1,  353,   -1,  355,  356,
   -1,  358,   -1,  360,   -1,  362,   -1,   -1,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,  373,   -1,   -1,   -1,
   -1,   -1,  379,   -1,   -1,  382,  256,  257,  258,  259,
  260,  261,   -1,  263,   -1,  265,   -1,  267,  268,   -1,
   -1,   -1,  272,  273,   -1,  275,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,  289,
  290,   -1,  292,   -1,   -1,  295,  296,  297,   -1,  262,
  300,   -1,  302,  266,  304,   -1,  306,   -1,  308,   -1,
  310,  274,  312,  276,  314,  315,  279,  280,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,   -1,   -1,   -1,  329,
   -1,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  343,   -1,  345,   -1,  347,  348,   -1,
  350,  351,   -1,  353,   -1,  355,  356,   -1,  358,   -1,
  360,   -1,  362,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,  379,
   -1,   -1,  382,  256,  257,  258,  259,  260,  261,   -1,
  263,   -1,  265,   -1,  267,   -1,   -1,   -1,   -1,  272,
  273,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,  292,
   -1,   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,
   -1,  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,
   -1,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  329,   -1,  331,   -1,
  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  343,   -1,  345,   -1,  347,  348,   -1,  350,  351,   -1,
  353,   -1,  355,  356,   -1,  358,   -1,  360,   -1,  362,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
   -1,   -1,   -1,   -1,   -1,   -1,  379,   -1,   -1,  382,
  257,  258,  259,  260,  261,   -1,  263,   -1,  265,   -1,
  267,   -1,   -1,   -1,   -1,  272,  273,   -1,  275,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   -1,  292,   -1,   -1,  295,  296,
  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,  306,
   -1,  308,   -1,  310,   -1,  312,   -1,  314,  315,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  329,   -1,  331,   -1,  333,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,  345,   -1,
  347,  348,   -1,  350,  351,   -1,  353,   -1,  355,  356,
   -1,  358,  264,  360,   -1,  362,   -1,  269,  270,  271,
   -1,  368,  274,  370,   -1,  372,  278,   -1,   -1,  281,
  282,   -1,  379,  285,   -1,  382,  288,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  264,  380,  381,
   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,   -1,
   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,   -1,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  264,  380,  381,   -1,   -1,  269,  270,  271,
   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,  281,
  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,   -1,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  264,  380,  381,
   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,   -1,
   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,   -1,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  264,  380,  381,   -1,   -1,  269,  270,  271,
   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,  281,
  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  264,  380,  381,
   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,   -1,
   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,   -1,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  264,  380,  381,   -1,   -1,  269,  270,  271,
   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,  281,
  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  264,  380,  381,
   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,   -1,
   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,   -1,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  264,  380,  381,   -1,   -1,  269,  270,  271,
   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,  281,
  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  264,  380,  381,
   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,   -1,
   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,
  297,  298,  299,   -1,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  264,  380,  381,   -1,   -1,  269,  270,  271,
   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,  281,
  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,  356,  357,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,   -1,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  264,  380,  381,
   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,   -1,
   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,  356,
  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  264,   -1,  380,  381,   -1,  269,  270,  271,   -1,
   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,   -1,  352,
   -1,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378,  264,  380,  381,   -1,
   -1,   -1,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,
  278,   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,   -1,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  264,  380,  381,   -1,   -1,   -1,  270,  271,   -1,
   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378,  264,  380,  381,   -1,
   -1,   -1,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,
  278,   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,
  298,  299,   -1,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  264,  380,  381,   -1,   -1,   -1,  270,  271,   -1,
   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
  293,  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,   -1,  356,  357,  358,  359,  360,  361,  362,
  363,  364,  365,  366,  367,   -1,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378,  264,  380,  381,   -1,
   -1,  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,
  278,   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
  264,   -1,  380,  381,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,   -1,  352,   -1,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,   -1,  352,   -1,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,   -1,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,   -1,  299,  300,  301,   -1,  303,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,   -1,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,   -1,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,   -1,  346,   -1,   -1,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,   -1,  299,  300,  301,   -1,  303,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,   -1,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,   -1,
  299,  300,  301,   -1,  303,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,   -1,  299,  300,  301,   -1,  303,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,   -1,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,   -1,
  299,  300,  301,   -1,  303,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,   -1,  363,
  364,  365,  366,  367,   -1,  369,   -1,  371,   -1,  373,
   -1,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,   -1,  298,
  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,   -1,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
   -1,  330,   -1,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,  342,   -1,  344,   -1,  346,   -1,   -1,
  349,   -1,   -1,  352,   -1,  354,   -1,   -1,  357,   -1,
  359,   -1,  361,   -1,  363,  364,  365,  366,  367,   -1,
  369,   -1,  371,   -1,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,   -1,  300,   -1,  302,   -1,
  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,   -1,
  314,  315,   -1,   -1,   -1,  319,   -1,   -1,   -1,  323,
   -1,  325,   -1,  327,   -1,  329,   -1,  331,   -1,  333,
   -1,  335,   -1,  337,   -1,  339,   -1,  341,   -1,  343,
   -1,  345,   -1,  347,  348,   -1,  350,  351,   -1,  353,
   -1,   -1,  356,   -1,  358,   -1,  360,   -1,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,   -1,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,  320,  321,  322,   -1,  324,   -1,  326,   -1,  328,
   -1,  330,   -1,  332,   -1,  334,   -1,  336,   -1,  338,
   -1,  340,   -1,  342,  343,  344,  345,  346,  347,  348,
  349,   -1,  351,  352,  353,  354,   -1,   -1,  357,   -1,
  359,   -1,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,   -1,  378,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
   -1,  380,  381,  299,   -1,  301,   -1,  303,   -1,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,   -1,
  316,  317,  318,   -1,  320,  321,  322,   -1,  324,   -1,
  326,   -1,  328,   -1,  330,   -1,  332,   -1,  334,   -1,
  336,   -1,  338,   -1,  340,   -1,  342,   -1,  344,   -1,
  346,   -1,   -1,  349,   -1,   -1,  352,   -1,  354,   -1,
   -1,  357,   -1,  359,   -1,  361,   -1,   -1,   -1,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
  376,  248,  249,  250,   -1,  252,  253,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 382
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","DEFAULT",
"DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","INVOCABLE","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"PROCEDURE","RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","TO","UNTIL",
"WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","SWAP","NMLT","AUGNMLT","REVASSIGN",
"REVSWAP","SLT","AUGSLT","SLE","AUGSLE","NMLE","AUGNMLE","NMEQ","AUGNMEQ","SEQ",
"AUGSEQ","EQUIV","AUGEQUIV","NMGT","AUGNMGT","NMGE","AUGNMGE","SGT","AUGSGT",
"SGE","AUGSGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET",
"BAR","CONCAT","AUGCONCAT","LCONCAT","AUGLCONCAT","TILDE","NMNE","AUGNMNE",
"SNE","AUGSNE","NEQUIV","AUGNEQUIV","LPAREN","RPAREN","PCOLON","COMMA","MCOLON",
"COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR",
"ABSTRACT","PMATCH","PAND","POR","PUNEVAL","PASSNONMATCH","PIMDASSN","PSETCUR",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : proc",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : invocable",
"decl : cl",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial procbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial procbody",
"optsemi :",
"optsemi : SEMICOL",
"cl : classhead SEMICOL END",
"cl : classhead optsemi clocals methods optsemi initiallysection END",
"classhead : CLASS IDENT supers LPAREN carglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON IDENT",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"invocable : INVOCABLE invoclist",
"invoclist : invocop",
"invoclist : invoclist COMMA invocop",
"invocop : IDENT",
"invocop : STRINGLIT",
"invocop : STRINGLIT COLON INTLIT",
"package : PACKAGE lnkfile",
"import : IMPORT lnklist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"fldlist :",
"fldlist : idlist",
"proc : prochead SEMICOL locals initial procbody END",
"meth : methhead SEMICOL locals initial procbody END",
"meth : ABSTRACT methhead",
"prochead : PROCEDURE IDENT LPAREN arglist RPAREN",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"carglist :",
"carglist : cparmlist",
"carglist : cparmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"varlist : IDENT",
"varlist : IDENT ASSIGN expr1",
"varlist : varlist COMMA IDENT",
"varlist : varlist COMMA IDENT ASSIGN expr1",
"stalist : IDENT",
"stalist : IDENT ASSIGN expr1",
"stalist : stalist COMMA IDENT",
"stalist : stalist COMMA IDENT ASSIGN expr1",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"cparmlist : carg",
"cparmlist : cparmlist COMMA carg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"carg : priv arg",
"priv :",
"priv : PLUS",
"priv : MINUS",
"clocals :",
"clocals : clocals LOCAL varlist optsemi",
"locals :",
"locals : locals LOCAL varlist SEMICOL",
"locals : locals STATIC stalist SEMICOL",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"procbody :",
"procbody : nexpr SEMICOL procbody",
"nexpr :",
"nexpr : expr",
"expr : expr1a",
"expr : expr AND expr1a",
"expr1a : expr1",
"expr1a : expr1a QMARK expr1",
"expr1 : expr2a",
"expr1 : expr2a SWAP expr1",
"expr1 : expr2a ASSIGN expr1",
"expr1 : expr2a REVSWAP expr1",
"expr1 : expr2a REVASSIGN expr1",
"expr1 : expr2a AUGCONCAT expr1",
"expr1 : expr2a AUGLCONCAT expr1",
"expr1 : expr2a AUGDIFF expr1",
"expr1 : expr2a AUGUNION expr1",
"expr1 : expr2a AUGPLUS expr1",
"expr1 : expr2a AUGMINUS expr1",
"expr1 : expr2a AUGSTAR expr1",
"expr1 : expr2a AUGINTER expr1",
"expr1 : expr2a AUGSLASH expr1",
"expr1 : expr2a AUGMOD expr1",
"expr1 : expr2a AUGCARET expr1",
"expr1 : expr2a AUGNMEQ expr1",
"expr1 : expr2a AUGEQUIV expr1",
"expr1 : expr2a AUGNMGE expr1",
"expr1 : expr2a AUGNMGT expr1",
"expr1 : expr2a AUGNMLE expr1",
"expr1 : expr2a AUGNMLT expr1",
"expr1 : expr2a AUGNMNE expr1",
"expr1 : expr2a AUGNEQUIV expr1",
"expr1 : expr2a AUGSEQ expr1",
"expr1 : expr2a AUGSGE expr1",
"expr1 : expr2a AUGSGT expr1",
"expr1 : expr2a AUGSLE expr1",
"expr1 : expr2a AUGSLT expr1",
"expr1 : expr2a AUGSNE expr1",
"expr1 : expr2a AUGQMARK expr1",
"expr1 : expr2a AUGAND expr1",
"expr1 : expr2a AUGAT expr1",
"expr2a : expr2",
"expr2a : expr2a PMATCH expr2",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr2 : expr2 POR expr3",
"expr3 : expr4",
"expr3 : expr4 PAND expr3",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 PIMDASSN expr5",
"expr4 : expr4 PASSNONMATCH expr5",
"expr4 : expr4 SEQ expr5",
"expr4 : expr4 SGE expr5",
"expr4 : expr4 SGT expr5",
"expr4 : expr4 SLE expr5",
"expr4 : expr4 SLT expr5",
"expr4 : expr4 SNE expr5",
"expr4 : expr4 NMEQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr4 : expr4 EQUIV expr5",
"expr4 : expr4 NEQUIV expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr5 : expr5 LCONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : expr9 CARET expr8",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : LCONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NMEQ expr10",
"expr10 : NMNE expr10",
"expr10 : SEQ expr10",
"expr10 : SNE expr10",
"expr10 : EQUIV expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : NEQUIV expr10",
"expr10 : BACKSLASH expr10",
"expr10 : PSETCUR expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : PUNEVAL",
"expr11 : CREATE expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : packageref",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"proc : prochead error procbody END",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 727 "unigram.y"

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
   local rhs

   if /iconc then
      return nd
   if not (*nd.children = 3) then
      return nd
   rhs := nd.children[3]
   if (not(type(rhs) == "treenode")) then
      return nd
   if (not(rhs.label == "invoke")) then
      return nd
   rhs := node("Paren", "(", rhs, ")")
   nd.children[3] := rhs
   return nd
end

procedure FieldRef(lhs, dot, rhs)
   if /iconc | (type(lhs) ~== "treenode") then
      return Field(lhs, dot, rhs)

   if (lhs.label == "invoke") then {
      tmpcount +:= 1;
      return node("Paren", "(",
         node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
         node("invoke", Field("__" || tmpcount, ".", rhs))
         );
      }
   return Field(lhs, dot, rhs)
end

procedure InvocationNode(args[])
   tmpcount +:= 1
   if type(args[1]) == "token" & (args[1].tok = IDENT) then {
       n1 := args[1]
       lparen := copy(args[1])
       lparen.tok := LPAREN
       lparen.s := "("
   }
   else {
       n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
       if lparen := Clone1stToken(args[1]) then {
	   lparen.tok := LPAREN
	   lparen.s := "("
       }
       else lparen := "("
   }
   if *args = 6 then {
       return node("Paren",lparen,node("invoke",
		    # iconc uses no __m business
		   (if /iconc then Field(Field(n1, ".", "__m"), "." , args[3])
			      else Field(n1, ".", args[3])),

	     args[4], node("exprlist",
	     if n1 === args[1] then args[1] else "__"||tmpcount,
	     if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
	     ,")")
      }
   else {
      if /iconc then
	 return  node("Paren",lparen,node("invoke",Field(Field(
			  Field(n1,".", "__m"),
			 "." , args[3]),".",args[5]),
		       args[6], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
		      ,")")
      else return SuperMethodInvok ! args
   }
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
   if /iconc then
      return node("invoke", expr11, lparen, args, rparen)

   if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
      return node("invoke", expr11, lparen, args, rparen)
      }

   if (type(expr11) == "treenode") then {
      case expr11.label of {
         "field": {
            #
            # need to examine lhs of field-ref to determine
            # whether we need to decompose the expr11 further...
            #
            if (type(expr11.children[1]) == "treenode") then {
               tmpcount +:= 1;
               n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
                  expr11.children[1]), ")")
               return node("exprlist", "(", n1, "&",
                  node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
                  lparen, args, rparen), ")")
               }
            else {
               return node("invoke", expr11, lparen, args, rparen)
               }
            }
         default: {
            return node("invoke", expr11, lparen, args, rparen)
            }
         }
      }
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
   tmpcount +:= 1
   if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
      n1 := args[1]
      lparen := copy(args[1])
      lparen.tok := LPAREN
      lparen.s := "("
      }
   else {
      n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
      if lparen := Clone1stToken(args[1]) then {
         lparen.tok := LPAREN
         lparen.s := "("
         }
      else
         lparen := "("
      }

   args[3].s := mangle_class_sym(args[3].s)
   args[3].s ||:= "__oprec"
   return node("exprlist", "(", n1, ")", " & ",
      node("Paren", lparen, node("invoke",
      Field(args[3], ".", args[5]),
      args[6], node("exprlist",
      if n1 === args[1] then args[1] else "__" || tmpcount,
      if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
      ")", ))
end

procedure isloco(node, s)
case type(node) of {
   "treenode": {
      if *node.children > 0 then return isloco(!node.children, s)
      }
   "token" : {
      if (node.tok = IDENT) & (node.s == s) then return
      }
   }
end
#line 2328 "unigram.icn"
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    action[yyn]()          # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 274 "unigram.y"
 Progend(valstk[2]);
end

procedure action_2()
#line 276 "unigram.y"
 yyval := EmptyNode 
end

procedure action_3()
#line 277 "unigram.y"

	   if yynerrs = 0 then iwrites(&errout,".");
	   yyval := node("decls", valstk[2], valstk[1])
	      
end

procedure action_12()
#line 292 "unigram.y"
 yyval := EmptyNode 
end

procedure action_13()
#line 293 "unigram.y"

	   yyval := Method( , , , , , valstk[5], "initially", EmptyNode, "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_14()
#line 299 "unigram.y"

	   yyval := Method( , , , , , valstk[8], "initially", valstk[6], "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_15()
#line 307 "unigram.y"
 yyval := EmptyNode 
end

procedure action_17()
#line 310 "unigram.y"

   yyval := valstk[3]
   yyval.methods := methodstaque(&null, yyval)
   
end

procedure action_18()
#line 314 "unigram.y"

   yyval := valstk[7]
   if valstk[5] ~=== EmptyNode then {
      if valstk[5].label == "locals3" then
         yyerror("static class variables not yet implemented")
      # splice in any class locals into the field list
      yyval.fields.traverse(valstk[5])
      }
   if valstk[2] ~=== EmptyNode then
      valstk[4] := node("methods", valstk[4], valstk[2])
   yyval.methods := methodstaque(valstk[4], yyval)
   
end

procedure action_19()
#line 327 "unigram.y"

   yyval := Class()
   yyval.tag := valstk[6]
   yyval.unmangled_name := valstk[5].s
   yyval.name := package_mangled_symbol(valstk[5].s)
   if proc(yyval.name, 0) then
      warning("Warning: class "|| yyval.name ||" overrides the built-in function")
   else if \ (foobar := classes.lookup(yyval.name)) then {
      yyerror("redeclaration of class " || yyval.name)
      yynerrs +:= 1
      }
   else
      classes.insert(yyval, yyval.name)

   yyval.supers_node := valstk[4]
   yyval.fields := valstk[2]
   yyval.lptoken := valstk[3]
   yyval.rptoken := valstk[1]
   
end

procedure action_20()
#line 347 "unigram.y"
 yyval := EmptyNode 
end

procedure action_21()
#line 348 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_22()
#line 349 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_23()
#line 352 "unigram.y"
 yyval := node("packageref", valstk[3],valstk[2],valstk[1]) 
end

procedure action_24()
#line 353 "unigram.y"
 yyval := node("packageref", valstk[2],valstk[1]) 
end

procedure action_25()
#line 356 "unigram.y"
 yyval := EmptyNode 
end

procedure action_26()
#line 357 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_27()
#line 358 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_28()
#line 359 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_29()
#line 362 "unigram.y"
 yyval := node("invocable", valstk[2], valstk[1]);
end

procedure action_31()
#line 365 "unigram.y"
 yyval := node("invoclist", valstk[3],valstk[2],valstk[1]);
end

procedure action_34()
#line 369 "unigram.y"
yyval := node("invocop3", valstk[3],valstk[2],valstk[1]);
end

procedure action_35()
#line 371 "unigram.y"

   if \thePackage then {
      if not (thePackage.name == valstk[1].s) then {
         yyerror(fName || " cannot be in both package "|| thePackage.name ||
            " and package " || valstk[1].s)
         yyval := EmptyNode
         }
      else { # this branch allowed for -C / iconc
         thePackage.insertfname(fName)
         thePackage.add_imported()
         }
      }
   else {
      yyval := node("package", valstk[2],valstk[1]);
      thePackage := Package(valstk[1].s)
      thePackage.insertfname(fName)
      thePackage.add_imported()
      }
   
end

procedure action_36()
#line 391 "unigram.y"

   yyval := node("import", valstk[2],valstk[1]," ")
   import_class(valstk[1])
   
end

procedure action_37()
#line 396 "unigram.y"
 yyval := node("link", valstk[2],valstk[1]," "); 
end

procedure action_39()
#line 399 "unigram.y"
 yyval := node("lnklist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_42()
#line 404 "unigram.y"
 yyval := node("global", valstk[2],valstk[1]) 
end

procedure action_43()
#line 406 "unigram.y"

		yyval := declaration(valstk[4],valstk[2],valstk[5],valstk[3],valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_44()
#line 412 "unigram.y"
 yyval := EmptyNode 
end

procedure action_46()
#line 415 "unigram.y"

#		body_scopeck(valstk[2])
		yyval := node("proc", valstk[6],";",valstk[4],valstk[3],valstk[2],valstk[1])
		
end

procedure action_47()
#line 420 "unigram.y"

		yyval := valstk[6]
		yyval.locals := valstk[4]
		yyval.initl := valstk[3]
		yyval.procbody := valstk[2]
		
end

procedure action_48()
#line 426 "unigram.y"

		yyval := valstk[1]
                yyval.abstract_flag := 1
		
end

procedure action_49()
#line 431 "unigram.y"

		yyval := declaration(valstk[4], valstk[2], valstk[5], valstk[3], valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_50()
#line 437 "unigram.y"

		yyval := Method( , , , , , valstk[5], valstk[4].s, valstk[2], valstk[5].s, valstk[3], valstk[1])
		
end

procedure action_51()
#line 442 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_52()
#line 443 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_53()
#line 444 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_54()
#line 446 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_55()
#line 447 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_56()
#line 448 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_58()
#line 452 "unigram.y"
 yyval := node("idlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_60()
#line 455 "unigram.y"
 yyval := node("varlist2", valstk[3], valstk[2], valstk[1])
end

procedure action_61()
#line 456 "unigram.y"
 yyval := node("varlist3", valstk[3], valstk[2], valstk[1])
end

procedure action_62()
#line 457 "unigram.y"
 yyval := node("varlist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_64()
#line 460 "unigram.y"
 yyval := node("stalist2", valstk[3], valstk[2], valstk[1])
end

procedure action_65()
#line 461 "unigram.y"
 yyval := node("stalist3", valstk[3], valstk[2], valstk[1])
end

procedure action_66()
#line 462 "unigram.y"
 yyval := node("stalist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_68()
#line 465 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_70()
#line 468 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_72()
#line 471 "unigram.y"
 yyval := node("arg2", valstk[3], valstk[2], valstk[1]) 
end

procedure action_73()
#line 472 "unigram.y"
 yyval := node("arg3", valstk[3], valstk[2], valstk[1]) 
end

procedure action_74()
#line 473 "unigram.y"
 yyval := node("arg4", valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]) 
end

procedure action_75()
#line 475 "unigram.y"
 yyval := valstk[1] 
end

procedure action_76()
#line 477 "unigram.y"
 yyval := EmptyNode;
end

procedure action_79()
#line 481 "unigram.y"
 yyval := EmptyNode;
end

procedure action_80()
#line 482 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_81()
#line 484 "unigram.y"
 yyval := EmptyNode;
end

procedure action_82()
#line 485 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_83()
#line 486 "unigram.y"
 yyval := node("locals3", valstk[4],valstk[3],valstk[2],";");
end

procedure action_84()
#line 488 "unigram.y"
 yyval := EmptyNode 
end

procedure action_85()
#line 489 "unigram.y"

	   yyval := node("initial", valstk[3], valstk[2],";")
	      
end

procedure action_86()
#line 493 "unigram.y"
 yyval := EmptyNode 
end

procedure action_87()
#line 494 "unigram.y"
 yyval := node("procbody", valstk[3],";",valstk[1]);
end

procedure action_88()
#line 496 "unigram.y"
 yyval := EmptyNode 
end

procedure action_91()
#line 500 "unigram.y"
 yyval := node("and", valstk[3],valstk[2],valstk[1]) 
end

procedure action_93()
#line 503 "unigram.y"
 yyval := node("binques", valstk[3],valstk[2],valstk[1]);
end

procedure action_95()
#line 506 "unigram.y"
 yyval := node("swap", valstk[3],valstk[2],valstk[1]);
end

procedure action_96()
#line 507 "unigram.y"
 
          yyval := parenthesize_assign(node("assign",valstk[3],valstk[2],valstk[1]));
          
end

procedure action_97()
#line 510 "unigram.y"
 yyval := node("revswap", valstk[3],valstk[2],valstk[1]);
end

procedure action_98()
#line 511 "unigram.y"
 yyval := node("revasgn", valstk[3],valstk[2],valstk[1]);
end

procedure action_99()
#line 512 "unigram.y"
 yyval := node("augcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_100()
#line 513 "unigram.y"
 yyval := node("auglcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_101()
#line 514 "unigram.y"
 yyval := node("Bdiffa", valstk[3],valstk[2],valstk[1]);
end

procedure action_102()
#line 515 "unigram.y"
 yyval := node("Buniona", valstk[3],valstk[2],valstk[1]);
end

procedure action_103()
#line 516 "unigram.y"
 yyval := node("Bplusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_104()
#line 517 "unigram.y"
 yyval := node("Bminusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_105()
#line 518 "unigram.y"
 yyval := node("Bstara", valstk[3],valstk[2],valstk[1]);
end

procedure action_106()
#line 519 "unigram.y"
 yyval := node("Bintera", valstk[3],valstk[2],valstk[1]);
end

procedure action_107()
#line 520 "unigram.y"
 yyval := node("Bslasha", valstk[3],valstk[2],valstk[1]);
end

procedure action_108()
#line 521 "unigram.y"
 yyval := node("Bmoda", valstk[3],valstk[2],valstk[1]);
end

procedure action_109()
#line 522 "unigram.y"
 yyval := node("Bcareta", valstk[3],valstk[2],valstk[1]);
end

procedure action_110()
#line 523 "unigram.y"
 yyval := node("Baugeq", valstk[3],valstk[2],valstk[1]);
end

procedure action_111()
#line 524 "unigram.y"
 yyval := node("Baugeqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_112()
#line 525 "unigram.y"
 yyval := node("Baugge", valstk[3],valstk[2],valstk[1]);
end

procedure action_113()
#line 526 "unigram.y"
 yyval := node("Bauggt", valstk[3],valstk[2],valstk[1]);
end

procedure action_114()
#line 527 "unigram.y"
 yyval := node("Baugle", valstk[3],valstk[2],valstk[1]);
end

procedure action_115()
#line 528 "unigram.y"
 yyval := node("Bauglt", valstk[3],valstk[2],valstk[1]);
end

procedure action_116()
#line 529 "unigram.y"
 yyval := node("Baugne", valstk[3],valstk[2],valstk[1]);
end

procedure action_117()
#line 530 "unigram.y"
 yyval := node("Baugneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_118()
#line 531 "unigram.y"
 yyval := node("Baugseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_119()
#line 532 "unigram.y"
 yyval := node("Baugsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_120()
#line 533 "unigram.y"
 yyval := node("Baugsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_121()
#line 534 "unigram.y"
 yyval := node("Baugsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_122()
#line 535 "unigram.y"
 yyval := node("Baugslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_123()
#line 536 "unigram.y"
 yyval := node("Baugsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_124()
#line 537 "unigram.y"
 yyval := node("Baugques", valstk[3],valstk[2],valstk[1]);
end

procedure action_125()
#line 538 "unigram.y"
 yyval := node("Baugamper", valstk[3],valstk[2],valstk[1]);
end

procedure action_126()
#line 539 "unigram.y"
 yyval := node("Baugact", valstk[3],valstk[2],valstk[1]);
end

procedure action_128()
#line 542 "unigram.y"
 yyval := node("BPmatch", valstk[3],valstk[2],valstk[1]);
end

procedure action_130()
#line 545 "unigram.y"
 yyval := node("to", valstk[3],valstk[2],valstk[1]);
end

procedure action_131()
#line 546 "unigram.y"
 yyval := node("toby", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_132()
#line 547 "unigram.y"
 yyval := node("BPor", valstk[3],valstk[2],valstk[1]); 
end

procedure action_134()
#line 550 "unigram.y"
 yyval := node("BPand", valstk[3],valstk[2],valstk[1]); 
end

procedure action_135()
#line 551 "unigram.y"
yyval := node(BAR, valstk[3],valstk[2],valstk[1]);
end

procedure action_137()
#line 554 "unigram.y"
 yyval := node("BPiam", valstk[3],valstk[2],valstk[1]);
end

procedure action_138()
#line 555 "unigram.y"
 yyval := node("BPaom", valstk[3],valstk[2],valstk[1]);
end

procedure action_139()
#line 556 "unigram.y"
 yyval := node("Bseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_140()
#line 557 "unigram.y"
 yyval := node("Bsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_141()
#line 558 "unigram.y"
 yyval := node("Bsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_142()
#line 559 "unigram.y"
 yyval := node("Bsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_143()
#line 560 "unigram.y"
 yyval := node("Bslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_144()
#line 561 "unigram.y"
 yyval := node("Bsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_145()
#line 562 "unigram.y"
 yyval := node("Beq", valstk[3],valstk[2],valstk[1]);
end

procedure action_146()
#line 563 "unigram.y"
 yyval := node("Bge", valstk[3],valstk[2],valstk[1]);
end

procedure action_147()
#line 564 "unigram.y"
 yyval := node("Bgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_148()
#line 565 "unigram.y"
 yyval := node("Ble", valstk[3],valstk[2],valstk[1]);
end

procedure action_149()
#line 566 "unigram.y"
 yyval := node("Blt", valstk[3],valstk[2],valstk[1]);
end

procedure action_150()
#line 567 "unigram.y"
 yyval := node("Bne", valstk[3],valstk[2],valstk[1]);
end

procedure action_151()
#line 568 "unigram.y"
 yyval := node("Beqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_152()
#line 569 "unigram.y"
 yyval := node("Bneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_154()
#line 572 "unigram.y"
 yyval := node("Bcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_155()
#line 573 "unigram.y"
 yyval := node("Blcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_157()
#line 580 "unigram.y"
 yyval := node("Bplus", valstk[3],valstk[2],valstk[1]);
end

procedure action_158()
#line 581 "unigram.y"
 yyval := node("Bdiff", valstk[3],valstk[2],valstk[1]);
end

procedure action_159()
#line 582 "unigram.y"
 yyval := node("Bunion", valstk[3],valstk[2],valstk[1]);
end

procedure action_160()
#line 583 "unigram.y"
 yyval := node("Bminus", valstk[3],valstk[2],valstk[1]);
end

procedure action_162()
#line 586 "unigram.y"
 yyval := node("Bstar", valstk[3],valstk[2],valstk[1]);
end

procedure action_163()
#line 587 "unigram.y"
 yyval := node("Binter", valstk[3],valstk[2],valstk[1]);
end

procedure action_164()
#line 588 "unigram.y"
 yyval := node("Bslash", valstk[3],valstk[2],valstk[1]);
end

procedure action_165()
#line 589 "unigram.y"
 yyval := node("Bmod", valstk[3],valstk[2],valstk[1]);
end

procedure action_167()
#line 592 "unigram.y"
 yyval := node("Bcaret", valstk[3],valstk[2],valstk[1]);
end

procedure action_169()
#line 595 "unigram.y"
 yyval := node("limit", valstk[3],valstk[2],valstk[1]);
end

procedure action_170()
#line 596 "unigram.y"
 yyval := node("at", valstk[3],valstk[2],valstk[1]) 
end

procedure action_171()
#line 597 "unigram.y"
 yyval := node("apply", valstk[3],valstk[2],valstk[1]);
end

procedure action_173()
#line 600 "unigram.y"
 yyval := node("uat", valstk[2],valstk[1]);
end

procedure action_174()
#line 601 "unigram.y"
 yyval := node("unot", valstk[2],valstk[1]);
end

procedure action_175()
#line 602 "unigram.y"
 yyval := node("ubar", valstk[2],valstk[1]);
end

procedure action_176()
#line 603 "unigram.y"
 yyval := node("uconcat", valstk[2],valstk[1]);
end

procedure action_177()
#line 604 "unigram.y"
 yyval := node("ulconcat", valstk[2],valstk[1]);
end

procedure action_178()
#line 605 "unigram.y"
 yyval := node("udot", valstk[2],valstk[1]);
end

procedure action_179()
#line 606 "unigram.y"
 yyval := node("ubang", valstk[2],valstk[1]);
end

procedure action_180()
#line 607 "unigram.y"
 yyval := node("udiff", valstk[2],valstk[1]);
end

procedure action_181()
#line 608 "unigram.y"
 yyval := node("uplus", valstk[2],valstk[1]);
end

procedure action_182()
#line 609 "unigram.y"
 yyval := node("ustar", valstk[2],valstk[1]);
end

procedure action_183()
#line 610 "unigram.y"
 yyval := node("uslash", valstk[2],valstk[1]);
end

procedure action_184()
#line 611 "unigram.y"
 yyval := node("ucaret", valstk[2],valstk[1]);
end

procedure action_185()
#line 612 "unigram.y"
 yyval := node("uinter", valstk[2],valstk[1]);
end

procedure action_186()
#line 613 "unigram.y"
 yyval := node("utilde", valstk[2],valstk[1]);
end

procedure action_187()
#line 614 "unigram.y"
 yyval := node("uminus", valstk[2],valstk[1]);
end

procedure action_188()
#line 615 "unigram.y"
 yyval := node("unumeq", valstk[2],valstk[1]);
end

procedure action_189()
#line 616 "unigram.y"
 yyval := node("unumne", valstk[2],valstk[1]);
end

procedure action_190()
#line 617 "unigram.y"
 yyval := node("ulexeq", valstk[2],valstk[1]);
end

procedure action_191()
#line 618 "unigram.y"
 yyval := node("ulexne", valstk[2],valstk[1]);
end

procedure action_192()
#line 619 "unigram.y"
 yyval := node("uequiv", valstk[2],valstk[1]);
end

procedure action_193()
#line 620 "unigram.y"
 yyval := node("uunion", valstk[2],valstk[1]);
end

procedure action_194()
#line 621 "unigram.y"
 yyval := node("uqmark", valstk[2],valstk[1]);
end

procedure action_195()
#line 622 "unigram.y"
 yyval := node("unotequiv", valstk[2],valstk[1]);
end

procedure action_196()
#line 623 "unigram.y"
 yyval := node("ubackslash", valstk[2],valstk[1]);
end

procedure action_197()
#line 624 "unigram.y"
 yyval := node("upsetcur", valstk[2],valstk[1]);
end

procedure action_207()
#line 635 "unigram.y"
 yyval := node("BPuneval", valstk[1]);
end

procedure action_208()
#line 636 "unigram.y"
 yyval := node("create", valstk[2],valstk[1]);
end

procedure action_210()
#line 638 "unigram.y"
 yyval := node("Next", valstk[1]);
end

procedure action_211()
#line 639 "unigram.y"
 yyval := node("Break", valstk[2],valstk[1]);
end

procedure action_212()
#line 640 "unigram.y"
 yyval := node("Paren", valstk[3],valstk[2],valstk[1]);
end

procedure action_213()
#line 641 "unigram.y"
 yyval := node("Brace", valstk[3],valstk[2],valstk[1]);
end

procedure action_214()
#line 642 "unigram.y"
 yyval := node("Brack", valstk[3],valstk[2],valstk[1]);
end

procedure action_215()
#line 643 "unigram.y"
 yyval := node("Subscript", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_216()
#line 644 "unigram.y"
 yyval := node("Pdco0", valstk[3],valstk[2],valstk[1]);
end

procedure action_217()
#line 645 "unigram.y"
 yyval := node("Pdco1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_218()
#line 646 "unigram.y"

           yyval := SimpleInvocation(valstk[4],valstk[3],valstk[2],valstk[1]);
      
end

procedure action_219()
#line 649 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_220()
#line 652 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_221()
#line 655 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_222()
#line 658 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_223()
#line 661 "unigram.y"

           yyval := FieldRef(valstk[3],valstk[2],valstk[1]);
      
end

procedure action_225()
#line 665 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]) 
end

procedure action_226()
#line 666 "unigram.y"
 yyval := node("keyword",valstk[2],valstk[1]) 
end

procedure action_227()
#line 667 "unigram.y"
 yyval := Keyword(valstk[2],valstk[1]) 
end

procedure action_228()
#line 669 "unigram.y"
 yyval := node("While0", valstk[2],valstk[1]);
end

procedure action_229()
#line 670 "unigram.y"
 yyval := node("While1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_230()
#line 672 "unigram.y"
 yyval := node("until", valstk[2],valstk[1]);
end

procedure action_231()
#line 673 "unigram.y"
 yyval := node("until1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_232()
#line 675 "unigram.y"
 yyval := node("every", valstk[2],valstk[1]);
end

procedure action_233()
#line 676 "unigram.y"
 yyval := node("every1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_234()
#line 678 "unigram.y"
 yyval := node("repeat", valstk[2],valstk[1]);
end

procedure action_236()
#line 681 "unigram.y"
 yyval := node("return", valstk[2], valstk[1]);
end

procedure action_237()
#line 682 "unigram.y"
 yyval := node("Suspend0", valstk[2],valstk[1]);
end

procedure action_238()
#line 683 "unigram.y"
 yyval := node("Suspend1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_239()
#line 685 "unigram.y"
 yyval := node("If0", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_240()
#line 686 "unigram.y"
 yyval := node("If1", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_241()
#line 688 "unigram.y"
 yyval := node("Case", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_243()
#line 691 "unigram.y"
 yyval := node("Caselist", valstk[3],";",valstk[1]);
end

procedure action_244()
#line 693 "unigram.y"
 yyval := node("cclause0", valstk[3],valstk[2],valstk[1]);
end

procedure action_245()
#line 694 "unigram.y"
 yyval := node("cclause1", valstk[3],valstk[2],valstk[1]);
end

procedure action_247()
#line 697 "unigram.y"

	   if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
	      yyval := valstk[3]; put(yyval.children, valstk[2], valstk[1])
	      }
	   else
	      yyval := node("elst1", valstk[3],valstk[2],valstk[1])
	   
end

procedure action_248()
#line 705 "unigram.y"
 yyval := node("pdcolist0", valstk[1]) 
end

procedure action_249()
#line 706 "unigram.y"
 yyval := node("pdcolist1", valstk[3],valstk[2],valstk[1]); 
end

procedure action_254()
#line 713 "unigram.y"
 yyval := node("section", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_259()
#line 720 "unigram.y"
 yyval := node("compound", valstk[3],";",valstk[1]);
end

procedure action_261()
#line 723 "unigram.y"
 yyval := node("error", valstk[4],valstk[2],valstk[1]); 
end

procedure action_262()
#line 724 "unigram.y"
 yyval := node("error"); 
end

#line 3602 "unigram.icn"
