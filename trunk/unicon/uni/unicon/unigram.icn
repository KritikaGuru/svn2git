### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 143 "unigram.y"

procedure Keyword(x1,x2)
   static keywords
   initial {
      keywords := set(["allocated","clock","collections","column","current",
		       "date","now","dateline","digits","e","error",
		       "errornumber","errortext","errorvalue","errout","fail",
		       "eventcode","eventsource","eventvalue","features",
		       "file","host","input","lcase","letters","level",
		       "line","main","null","output","phi","pi","pick","pos",
		       "progname","random","regions","source","storage",
		       "subject","time","trace","dump","ucase","version",
		       "errno","window","col","row","x","y","interval",
		       "control","shift","meta","lpress","mpress","rpress",
		       "lrelease","mrelease","rrelease","ldrag","mdrag",
		       "rdrag","resize","ascii","cset"])
      }

   # verify that x2 is a valid keyword
   if not member(keywords, x2.s) then
      write(&errout, "&",x2.s," is not a valid keyword!")

   return node("keyword",x1,x2)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
initial { set_of_all_fields := set(); dummyrecno := 1 }

   if \iconc then {
      if type(x3) == "token" then {
	 insert(set_of_all_fields, x3.s)
#	 write(&errout, "field ", image(x3.s))
	 }
      }

   return node("field",x1,x2,x3)
end

procedure Clone1stToken(n)
   case type(n) of {
      "token": return copy(n)
      "treenode": {
	 return Clone1stToken(!n.children)
	 }
      }
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
   
   if yynerrs > 0 then
      istop(yynerrs || " error" || (if yynerrs > 1 then "s" else ""))

   if /x1 then istop("error: empty file")

   package_level_syms := set()
   package_level_class_syms := set()
   set_package_level_syms(x1)
   scopecheck_superclass_decs(x1)

   outline := 1
   outcol := 1
   #
   # export specifications for each class
   #
   native := set()
   every cl := classes.foreach_t() do {
      cl.WriteSpec()
      insert(native, cl)
      }
   #
   # import class specifications, transitively
   #
   repeat {
      added := 0
      every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
         if /classes.lookup(super) then {
	    added := 1
	    readspec(super)
	    cl := classes.lookup(super)
	    if /cl then halt("can't inherit class '",super,"'")
	    iwrite("  inherits ", super, " from ", cl.linkfile)
	    writelink(cl.dir, cl.linkfile)
            }
       }
    if added = 0 then break
  }
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
  every (classes.foreach_t()).transitive_closure()
  every (classes.foreach_t()).resolve()

  scopecheck_bodies(x1)

   if \thePackage then {
      every thePackage.insertsym(!package_level_syms)
      }

  if \iconc then  {
     iconc_prep_parse_tree(&null, x1)
     }

  #
  # generate output
  #
#  iwrite("Generating code:")
   yyprint(x1)
   write(yyout)

   if \iconc & (type(set_of_all_fields) == "set") &
	(*set_of_all_fields > 0) then {
	arandomfield := !set_of_all_fields
      writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
      delete(set_of_all_fields, arandomfield)
      every writes(yyout, ",", !set_of_all_fields)
      write(yyout, ")")
      dummyrecno +:= 1
      set_of_all_fields := set()
      }
end
#line 129 "unigram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define DEFAULT 268
$define DO 269
$define ELSE 270
$define END 271
$define EVERY 272
$define FAIL 273
$define GLOBAL 274
$define IF 275
$define IMPORT 276
$define iconINITIAL 277
$define INITIALLY 278
$define INVOCABLE 279
$define LINK 280
$define LOCAL 281
$define METHOD 282
$define NEXT 283
$define NOT 284
$define OF 285
$define PACKAGE 286
$define PROCEDURE 287
$define RECORD 288
$define REPEAT 289
$define RETURN 290
$define STATIC 291
$define SUSPEND 292
$define THEN 293
$define TO 294
$define UNTIL 295
$define WHILE 296
$define BANG 297
$define MOD 298
$define AUGMOD 299
$define AND 300
$define AUGAND 301
$define STAR 302
$define AUGSTAR 303
$define INTER 304
$define AUGINTER 305
$define PLUS 306
$define AUGPLUS 307
$define UNION 308
$define AUGUNION 309
$define MINUS 310
$define AUGMINUS 311
$define DIFF 312
$define AUGDIFF 313
$define DOT 314
$define SLASH 315
$define AUGSLASH 316
$define ASSIGN 317
$define SWAP 318
$define NMLT 319
$define AUGNMLT 320
$define REVASSIGN 321
$define REVSWAP 322
$define SLT 323
$define AUGSLT 324
$define SLE 325
$define AUGSLE 326
$define NMLE 327
$define AUGNMLE 328
$define NMEQ 329
$define AUGNMEQ 330
$define SEQ 331
$define AUGSEQ 332
$define EQUIV 333
$define AUGEQUIV 334
$define NMGT 335
$define AUGNMGT 336
$define NMGE 337
$define AUGNMGE 338
$define SGT 339
$define AUGSGT 340
$define SGE 341
$define AUGSGE 342
$define QMARK 343
$define AUGQMARK 344
$define AT 345
$define AUGAT 346
$define BACKSLASH 347
$define CARET 348
$define AUGCARET 349
$define BAR 350
$define CONCAT 351
$define AUGCONCAT 352
$define LCONCAT 353
$define AUGLCONCAT 354
$define TILDE 355
$define NMNE 356
$define AUGNMNE 357
$define SNE 358
$define AUGSNE 359
$define NEQUIV 360
$define AUGNEQUIV 361
$define LPAREN 362
$define RPAREN 363
$define PCOLON 364
$define COMMA 365
$define MCOLON 366
$define COLON 367
$define COLONCOLON 368
$define SEMICOL 369
$define LBRACK 370
$define RBRACK 371
$define LBRACE 372
$define RBRACE 373
$define DOLLAR 374
$define ABSTRACT 375
$define PMATCH 376
$define PAND 377
$define POR 378
$define PUNEVAL 379
$define PASSNONMATCH 380
$define PIMDASSN 381
$define PSETCUR 382
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
    2,   11,   11,   11,   16,   16,   10,   10,   17,   20,
   20,   20,   22,   22,   19,   19,   19,   19,    9,   24,
   24,   25,   25,   25,    7,    8,    6,   28,   28,   27,
   27,   26,   26,    5,    3,   30,   30,    4,   23,   23,
   31,   32,   15,   15,   15,   21,   21,   21,   29,   29,
   35,   35,   35,   35,   37,   37,   37,   37,   33,   33,
   34,   34,   38,   38,   38,   38,   39,   41,   41,   41,
   18,   18,   12,   12,   12,   13,   13,   14,   14,   43,
   43,   42,   42,   44,   44,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   45,   45,
   46,   46,   46,   46,   47,   47,   47,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   49,   49,   49,   50,   50,   50,
   50,   50,   51,   51,   51,   51,   51,   52,   52,   53,
   53,   53,   53,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   60,   60,   61,   61,   62,   62,   63,   57,   57,   57,
   57,   58,   58,   59,   66,   66,   68,   68,   64,   64,
   67,   67,   40,   40,   40,   40,   56,   69,   69,   69,
   65,   65,    0,    4,   42,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    8,    0,    1,    3,    7,    6,    0,
    3,    3,    3,    2,    0,    2,    2,    2,    2,    1,
    3,    1,    1,    3,    2,    2,    2,    1,    3,    1,
    3,    1,    1,    2,    5,    0,    1,    6,    6,    2,
    5,    5,    0,    1,    3,    0,    1,    3,    1,    3,
    1,    3,    3,    5,    1,    3,    3,    5,    1,    3,
    1,    3,    1,    3,    3,    5,    2,    0,    1,    1,
    0,    4,    0,    4,    4,    0,    3,    0,    3,    0,
    1,    1,    3,    1,    3,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
    1,    3,    5,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    3,    3,    1,    3,    1,
    3,    3,    3,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    1,    2,    3,    3,    3,    3,    4,    3,    4,
    4,    6,    6,    8,    8,    3,    1,    3,    2,    2,
    2,    4,    2,    4,    2,    4,    2,    1,    2,    2,
    4,    4,    6,    6,    1,    3,    3,    3,    1,    3,
    1,    3,    1,    1,    1,    1,    6,    1,    1,    1,
    1,    3,    3,    4,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    4,    5,    6,    7,    8,    9,
   10,   11,    0,    0,  263,    0,   59,    0,   42,   43,
   40,    0,   32,    0,    0,   30,   38,    0,   35,    0,
    0,    0,   81,    0,   83,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   17,    0,  265,    0,  253,  254,
  255,  256,    0,    0,    0,    0,  238,    0,  212,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  209,    0,    0,  227,   94,  200,    0,
    0,    0,    0,    0,  131,    0,    0,    0,    0,  163,
    0,  170,    0,  201,  202,  203,  204,  205,  206,  207,
  208,    0,    0,    0,    0,   60,   41,   34,   31,   39,
    0,    0,    0,   69,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  213,    0,    0,    0,    0,
  176,    0,  239,    0,  240,    0,    0,  181,  230,  229,
  184,  187,  183,  195,  189,  182,  180,  185,  190,  192,
  194,  196,  175,  198,  186,  177,  178,  179,  188,  191,
  193,  197,  249,    0,   24,    0,    0,    0,    0,  245,
    0,    0,  199,  264,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   21,   22,   79,   80,    0,    0,   71,
    0,    0,   51,    0,    0,   45,    0,    0,    0,   50,
   28,   27,   16,    0,   26,   83,   23,    0,    0,    0,
    0,    0,    0,  214,    0,    0,    0,  217,    0,  216,
    0,  215,    0,   89,   95,  110,  127,  107,  108,  105,
  104,  106,  103,  109,   98,   97,  117,  100,   99,  124,
  123,  116,  112,  120,  113,  115,  114,  122,  121,  126,
  128,  111,  101,  102,  118,  125,  119,    0,    0,  134,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  137,    0,    0,    0,  136,    0,    0,    0,    0,
    0,    0,    0,    0,  167,  164,  165,  166,  173,  172,
  171,  169,  226,  228,    0,    0,    0,  219,  251,    0,
    0,    0,    0,    0,    0,    0,    0,   19,    0,    0,
   77,    0,   75,   70,   55,    0,    0,   82,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  250,    0,
    0,    0,  246,  262,    0,  221,  259,  260,  258,    0,
  218,    0,  220,    0,    0,    0,   87,   84,    0,    0,
   85,   48,   72,   58,    0,   62,    0,    0,    0,   83,
   18,    0,    0,    0,  133,    0,  252,    0,    0,    0,
    0,   66,    0,   76,    0,   52,    0,    0,    0,  244,
    0,  257,    0,    0,  223,  222,    0,   64,    0,    0,
   49,    0,    0,   68,   83,   13,  225,  224,    0,    0,
   14,
  ]
  yydgoto := [                          2,
    3,   14,  150,   16,  151,   18,   19,   20,   21,   22,
  421,  132,  283,  106,  142,   43,   23,   56,  152,   47,
  288,  107,  153,   35,   36,   31,   32,   38,   28,  146,
   24,  154,  143,  289,  298,  108,  406,  144,  290,  109,
  291,  110,  193,  112,  113,  114,  115,  116,  117,  118,
  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
  129,  130,  131,  194,  202,  199,  400,  200,  440,
  ]
  yysindex := [                      -231,
    0,    0,   29,   48,    0, -177,  -86,   96,  124,   96,
   96,  -53,  -42,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -144, -221,    0, -124,    0,  -81,    0,    0,
    0,  -22,    0, -115,   15,    0,    0,   35,    0,  -87,
  -60,   41,    0,  546,    0, -219,   45,  182,   96,  187,
  124,   96,  190,  -86,    0,  -69,    0,   82,    0,    0,
    0,    0,  546,  546,  546,  546,    0,  546,    0,  672,
  546,  546,  546,  546,  546,  672, -195,  672,  672,  672,
  672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
  672,  672,  672,  672,  672,  672,  672,  672,  672,  546,
  194,  292,  546,    0,  672,  181,    0,    0,    0,  153,
   89,  116, 6363, -260,    0,   32, -284,  -30,  -74,    0,
 -275,    0, -139,    0,    0,    0,    0,    0,    0,    0,
    0,  -55,   27, -124,   34,    0,    0,    0,    0,    0,
   99,  100, -107,    0,  -81,  107,  215,  217,  201, -251,
 -251,  115, -251,  118,  228,    0, -130,  153, -253,  -92,
    0,  153,    0, -245,    0, -223, -113,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -183,    0,  119, -247,  -82, -290,    0,
  122,  120,    0,    0,  672,  546,  672,  672,  672,  672,
  672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
  672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
  672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
  672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
  672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
  672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
  672,  672,  672,  672, -237,  546,  546,  419, -215,  546,
  215,  235,  546,    0,    0,    0,    0,  132,  -71,    0,
  190,   72,    0,  190,  126,    0,  183,  -27,  137,    0,
    0,    0,    0,  223,    0,    0,    0,  130,  546,  546,
  546,  546,  546,    0,  546,  546,  546,    0,  292,    0,
  546,    0,  116,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -260,  239,    0,
 -284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
 -284,    0, -284, -284, -284,    0, -284, -284,  -30,  -30,
  -74,  -74,  -74,  -74,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -121, -146,  -79,    0,    0, -136,
 -287,  142, -218,  -20,  188,  -19,  236,    0,   34,  135,
    0,  144,    0,    0,    0,  672,  252,    0,  190, -204,
  243,  -55,  292,  153, -252,  153,  153,  153,    0,  153,
  153, -247,    0,    0,  672,    0,    0,    0,    0,  546,
    0,  546,    0,  -62,  546,  546,    0,    0,  672,  260,
    0,    0,    0,    0,  156,    0,  205,  161,  190,    0,
    0,  546,  -15,  546,    0, -249,    0,  157,  164,  -52,
   24,    0,  211,    0,  672,    0,  166,  -55,  259,    0,
  153,    0,  546,  546,    0,    0,  672,    0,  162,  546,
    0,   43,   64,    0,    0,    0,    0,    0,  -55,  546,
    0,
  ]
  yyrindex := [                       117,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -90,    0,    0,  170,    0, -222,    0,    0,
    0,  202,    0,  -77,  329,    0,    0,  456,    0,    0,
    0,  -88,    0, -250,    0,    0,    0,    0,    0,    0,
    0,    0,  175,  176,    0, -210,    0,  767,    0,    0,
    0,    0, 5940,    0,    0,    0,    0,    0,    0,    0,
    0, 5940, 5940,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,
    0,  -67,   -7,    0,    0,    0,    0,    0,    0,  882,
    0,  997, 6055, 2032,    0, 6170, 2146, 4790, 4905,    0,
 5020,    0, 5825,    0,    0,    0,    0,    0,    0,    0,
    0,  165,  170,  170, -242,    0,    0,    0,    0,    0,
 -320,    0,  177,    0,  179,    0,    0,    0,    0, -210,
 -210,  -33, -210,    0,    0,    0,    0, 1112, 2261,    0,
    0, 1227,    0, 2376,    0, 2491, 2606,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -64,    0,    0,    0,
  163,    0,    0,    0,    0, -250,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   68,  -67,  180,    0,    0,
    0,    0, -250,    0,    0,    0,    0,    0,  191,    0,
    0,    0,    0,    0,    0,    0, -114,  -90,    0,    0,
    0,    0,    0,  270,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -106,    0,    0,    0,    0,    0,
   -7,    0, 1342,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2721, 6280,    0,
 2835, 2950, 3065, 3180, 3295, 3410, 3525, 3640, 3755, 3870,
 3985,    0, 4100, 4215, 4330,    0, 4445, 4560, 5135, 5250,
 5365, 5480, 5595, 5710,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -64,    0,    0,    0,    0,
    0,    0,    0,    0,    3,    0,    0,    0,  289,    0,
    0,  -91,    0,    0,    0,    0,    0,    0,  175,    0,
    0,  165,    0, 1457, 4675, 1572, 1687, 1802,    0,  -48,
  -32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -133,    0,    0,   68,   68,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -105,    0,  175,    0,
    0, -250,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    5,    0,    0,    0,    0,  165,    0,    0,
 1917,    0,   68,   68,    0,    0,    0,    0,    0, -250,
    0,    0,    0,    0,    0,    0,    0,    0,  165, -250,
    0,
  ]
  yygindex := [                         0,
  542,    0,  293,    0,  407,    0,    0,    0,    0,    0,
    0, -299, -272, -200, -383, -135,    0,    0,  225,  286,
    0,  510,    0,    0,  507,   22,    0,    0,  508,    0,
    0,  412,    0,    0,  282, -123,    0,  108,  159, -283,
    0,  -63,  -44,  361,    0,  330, -228,    0, 6485,  173,
  178,   -1,    0,   47,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -98,  248,  148,    0,  253,    0,
  ]
$define YYTABLESIZE 6745
  yytable := [                        111,
  157,  158,  159,  198,  160,  324,  422,  162,  413,  164,
  166,  167,  359,  360,   78,  309,  304,  464,  156,  393,
   88,  271,    7,  311,    1,  372,  444,  163,  165,  376,
  148,   37,   39,  241,   44,  458,   13,  133,  197,   44,
  394,  401,   73,   44,   73,  312,  205,  205,   44,   73,
  205,   44,  205,   44,  205,   44,   44,   44,  201,   44,
   25,  169,  402,   44,   44,   44,  261,   25,  262,  272,
  137,  273,  274,  140,  445,  477,  205,  170,  319,   26,
  320,  205,  407,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,  161,  242,   90,  317,
   56,  482,  168,  149,  171,  172,  173,  174,  175,  176,
  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
  187,  188,  189,  190,  191,  192,   44,   45,  101,  462,
  447,  203,   44,  205,  308,  313,   61,  459,   25,   61,
  478,  111,  418,   61,  460,   63,   61,   61,   63,  205,
   27,  474,   63,   61,  275,   63,   63,  395,  397,  314,
   15,  315,   63,   15,   33,   16,  205,   15,   33,   16,
   15,   15,   16,   16,  468,  499,   33,   15,   33,   16,
  310,   33,   33,   40,    7,  490,  465,  205,   33,   33,
   33,  147,  148,  396,   41,  469,  403,  437,   13,  438,
  439,  280,  276,  267,   42,  281,  500,  268,  442,  269,
  277,   90,  278,  399,  279,  282,  443,   15,  111,   90,
  270,  436,   46,  315,   15,  424,  425,  426,  427,  428,
   61,   50,  430,  431,   61,  432,   90,  294,   90,   63,
   61,  479,  295,   63,   90,  385,  386,  387,  388,   63,
  429,   74,  392,   74,   53,  263,  201,  264,   74,  265,
   16,  266,  315,   48,   15,  315,   16,   33,  318,  496,
    5,  441,  456,  409,    6,   15,   15,   90,  410,  501,
   91,   54,    7,   90,    8,  149,   91,    9,   10,   25,
  485,   55,  315,    6,   11,   12,   13,  389,  390,  391,
  247,    7,  247,    8,  247,  472,    9,   10,  412,   59,
   60,   61,   62,   11,   12,   13,  248,  417,  248,  286,
  248,  303,   49,  287,  417,  450,  470,  471,  448,  451,
  243,  488,   29,  319,  244,   30,  245,  480,  246,  432,
  247,   90,  248,  494,  249,   90,  250,   65,  251,   67,
  252,   65,  253,   67,  301,  302,  466,  305,    2,   51,
   33,  254,    2,   34,  492,  493,  486,  255,  315,  256,
    2,  257,    2,   46,  155,    2,    2,  467,  411,   52,
  481,  414,    2,    2,    2,  497,  135,  315,  258,   17,
   17,  259,  260,   59,   60,   61,   62,  111,  284,  285,
   86,   86,   86,   86,   86,   86,  498,   86,  315,   86,
   90,   86,   90,  379,  380,   86,   86,   86,  136,   86,
  381,  382,  383,  384,  138,  111,  141,   86,   86,  155,
  195,  204,  205,   86,   86,  111,   86,  206,  207,   86,
   86,   86,  293,   36,   86,  292,   86,   36,   86,  296,
   86,  297,   86,  299,   86,   36,   86,   36,   86,   86,
   36,   36,  148,  303,  307,  316,  306,   36,   36,   36,
  321,  405,  322,   86,  408,   86,  415,   86,  419,  416,
  420,  423,  435,  446,  449,  454,  452,   86,  457,   86,
  455,   86,   86,  461,   86,   86,  473,   86,  483,   86,
   86,  475,   86,  476,   86,  484,   86,  487,  489,  491,
  495,   20,   86,   86,   86,  261,   86,   53,   46,   54,
   12,   47,    4,   86,   90,   78,   86,   57,   58,   59,
   60,   61,   62,   57,   63,  134,   64,  139,   65,  196,
  300,  145,  404,   66,   67,  323,   68,  453,  434,  358,
  463,  433,    0,    0,   69,   70,    0,    0,    0,    0,
   71,   72,    0,   73,    0,    0,   74,   75,   76,    0,
   29,   77,    0,   78,   29,   79,    0,   80,    0,   81,
    0,   82,   29,   83,   29,   84,   85,   29,   29,    0,
    0,    0,    0,    0,   29,   29,   29,    0,    0,    0,
   86,    0,   87,    0,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,    0,   90,    0,   91,   92,
    0,   93,   94,    0,   95,    0,   96,   97,    0,   98,
    0,   99,    0,  100,    0,    0,    0,    0,    0,  101,
    0,  102,    0,  103,    0,    0,    0,    0,    0,    0,
  104,    0,    0,  105,   57,   58,   59,   60,   61,   62,
    0,   63,    0,   64,    0,   65,    0,    0,    0,    0,
   66,   67,    0,   68,    0,    0,    0,    0,    0,    0,
    0,   69,   70,    0,    0,    0,    0,   71,   72,    0,
   73,    0,    0,   74,   75,   76,    0,   37,   77,    0,
   78,   37,   79,    0,   80,    0,   81,    0,   82,   37,
   83,   37,   84,   85,   37,   37,    0,    0,    0,    0,
    0,   37,   37,   37,    0,    0,    0,   86,    0,   87,
    0,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,    0,   90,    0,   91,   92,    0,   93,   94,
    0,   95,    0,   96,   97,    0,   98,    0,   99,    0,
  100,    0,    0,    0,    0,    0,  101,    0,  102,    0,
  103,  398,    0,    0,    0,    0,    0,  104,    0,    0,
  105,   57,   58,   59,   60,   61,   62,    0,   63,    0,
   64,    0,   65,    0,    0,    0,    0,   66,   67,    0,
   68,    0,    0,    0,    0,    0,    0,    0,   69,   70,
    0,    0,    0,    0,   71,   72,    0,   73,    0,    0,
   74,   75,   76,    0,    0,   77,    0,   78,    0,   79,
    0,   80,    0,   81,    0,   82,    0,   83,    0,   84,
   85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   86,    0,   87,    0,   88,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,    0,
   90,    0,   91,   92,    0,   93,   94,    0,   95,    0,
   96,   97,    0,   98,    0,   99,    0,  100,    0,    0,
    0,    0,    0,  101,    0,  102,    0,  103,    0,    0,
    0,    0,    0,    0,  104,    0,    0,  105,   58,   59,
   60,   61,   62,    0,   63,    0,   64,    0,   65,    0,
    0,    0,    0,   66,   67,    0,   68,    0,    0,    0,
    0,    0,    0,    0,   69,   70,    0,    0,    0,    0,
   71,   72,    0,   73,    0,    0,   74,   75,   76,    0,
    0,   77,    0,   78,    0,   79,    0,   80,    0,   81,
    0,   82,    0,   83,    0,   84,   85,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   86,    0,   87,    0,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,    0,   90,    0,   91,   92,
    0,   93,   94,    0,   95,    0,   96,   97,    0,   98,
  211,   99,    0,  100,    0,  211,  211,  211,    0,  101,
  211,  102,    0,  103,  211,    0,    0,  211,  211,    0,
  104,  211,    0,  105,  211,    0,    0,    0,    0,  211,
  211,    0,    0,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,    0,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,    0,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,   91,  211,  211,    0,    0,
   91,   91,   91,    0,    0,   91,    0,    0,    0,   91,
    0,    0,   91,   91,    0,    0,   91,    0,    0,   91,
    0,    0,    0,    0,   91,   91,    0,    0,   91,   91,
   91,    0,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,    0,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,    0,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   92,   91,   91,    0,    0,   92,   92,   92,    0,    0,
   92,    0,    0,    0,   92,    0,    0,   92,   92,    0,
    0,   92,    0,    0,   92,    0,    0,    0,    0,   92,
   92,    0,    0,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,    0,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,    0,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,    0,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,  210,   92,   92,    0,    0,
  210,  210,  210,    0,    0,  210,    0,    0,    0,  210,
    0,    0,  210,  210,    0,    0,  210,    0,    0,  210,
    0,    0,    0,    0,  210,  210,    0,    0,  210,  210,
  210,    0,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,    0,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,    0,
  210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
  237,  210,  210,    0,    0,  237,  237,  237,    0,    0,
  237,    0,    0,    0,  237,    0,    0,  237,  237,    0,
    0,  237,    0,    0,  237,    0,    0,    0,    0,  237,
  237,    0,    0,  237,  237,  237,    0,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,    0,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,    0,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,   93,  237,  237,    0,    0,
   93,   93,   93,    0,    0,   93,    0,    0,    0,   93,
    0,    0,   93,   93,    0,    0,   93,    0,    0,   93,
    0,    0,    0,    0,   93,   93,    0,    0,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,    0,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,    0,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,    0,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
  236,   93,   93,    0,    0,  236,  236,  236,    0,    0,
  236,    0,    0,    0,  236,    0,    0,  236,  236,    0,
    0,  236,    0,    0,  236,    0,    0,    0,    0,  236,
  236,    0,    0,  236,  236,  236,    0,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,    0,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,    0,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  241,  236,  236,    0,    0,
  241,  241,  241,    0,    0,  241,    0,    0,    0,  241,
    0,    0,  241,  241,    0,    0,  241,    0,    0,  241,
    0,    0,    0,    0,  241,  241,    0,    0,  241,  241,
  241,    0,  241,  241,  241,  241,  241,  241,  241,  241,
  241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
  241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
  241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
  241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
  241,  241,  241,  241,  241,  241,    0,  241,  241,  241,
  241,  241,  241,  241,  241,  241,  241,  241,  241,    0,
  241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
  234,  241,  241,    0,    0,  234,  234,  234,    0,    0,
  234,    0,    0,    0,  234,    0,    0,  234,  234,    0,
    0,  234,    0,    0,  234,    0,    0,    0,    0,  234,
  234,    0,    0,  234,  234,  234,    0,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,    0,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,    0,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  232,  234,  234,    0,    0,
  232,  232,  232,    0,    0,  232,    0,    0,    0,  232,
    0,    0,  232,  232,    0,    0,  232,    0,    0,  232,
    0,    0,    0,    0,  232,  232,    0,    0,  232,  232,
  232,    0,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,  232,    0,  232,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  232,  232,    0,
  232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
  243,  232,  232,    0,    0,  243,  243,  243,    0,    0,
  243,    0,    0,    0,  243,    0,    0,  243,  243,    0,
    0,  243,    0,    0,  243,    0,    0,    0,    0,  243,
  243,    0,    0,  243,  243,  243,    0,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,    0,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,    0,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  129,  243,  243,    0,    0,
  129,  129,  129,    0,    0,  129,    0,    0,    0,  129,
    0,    0,  129,  129,    0,    0,  129,    0,    0,  129,
    0,    0,    0,    0,  129,    0,    0,    0,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,    0,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,    0,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  138,
    0,  129,  129,    0,  138,  138,  138,    0,    0,  138,
    0,    0,    0,  138,    0,    0,  138,  138,    0,    0,
  138,    0,    0,  138,    0,    0,    0,    0,  138,  138,
    0,    0,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,    0,  138,    0,  138,
    0,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,    0,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  235,  138,  138,    0,    0,    0,
  235,  235,    0,    0,  235,    0,    0,    0,  235,    0,
    0,  235,  235,    0,    0,  235,    0,    0,  235,    0,
    0,    0,    0,  235,  235,    0,    0,  235,  235,  235,
    0,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,    0,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,    0,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,   91,
  235,  235,    0,    0,    0,   91,   91,    0,    0,   91,
    0,    0,    0,   91,    0,    0,   91,   91,    0,    0,
   91,    0,    0,   91,    0,    0,    0,    0,   91,   91,
    0,    0,   91,   91,   91,    0,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
    0,   91,   91,   91,   91,   91,   91,   91,   91,   91,
   91,   91,   91,    0,   91,   91,   91,   91,   91,   91,
   91,   91,   91,   91,  233,   91,   91,    0,    0,    0,
  233,  233,    0,    0,  233,    0,    0,    0,  233,    0,
    0,  233,  233,    0,    0,  233,    0,    0,  233,    0,
    0,    0,    0,  233,  233,    0,    0,  233,  233,  233,
    0,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,    0,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,    0,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  231,
  233,  233,    0,    0,    0,  231,  231,    0,    0,  231,
    0,    0,    0,  231,    0,    0,  231,  231,    0,    0,
  231,    0,    0,  231,    0,    0,    0,    0,  231,  231,
    0,    0,  231,  231,  231,    0,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
    0,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,    0,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  130,  231,  231,    0,    0,  130,
  130,  130,    0,    0,  130,    0,    0,    0,  130,    0,
    0,  130,  130,    0,    0,  130,    0,    0,  130,    0,
    0,    0,    0,  130,    0,    0,    0,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,    0,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,    0,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  151,    0,
  130,  130,    0,  151,  151,  151,    0,    0,  151,    0,
    0,    0,  151,    0,    0,  151,  151,    0,    0,  151,
    0,    0,  151,    0,    0,    0,    0,  151,  151,    0,
    0,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,    0,  151,    0,  151,    0,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,    0,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  145,  151,  151,    0,    0,  145,  145,
  145,    0,    0,  145,    0,    0,    0,  145,    0,    0,
  145,  145,    0,    0,  145,    0,    0,  145,    0,    0,
    0,    0,  145,  145,    0,    0,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
    0,  145,    0,  145,    0,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,    0,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  144,  145,
  145,    0,    0,  144,  144,  144,    0,    0,  144,    0,
    0,    0,  144,    0,    0,  144,  144,    0,    0,  144,
    0,    0,  144,    0,    0,    0,    0,  144,  144,    0,
    0,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,    0,  144,    0,  144,    0,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,    0,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  150,  144,  144,    0,    0,  150,  150,
  150,    0,    0,  150,    0,    0,    0,  150,    0,    0,
  150,  150,    0,    0,  150,    0,    0,  150,    0,    0,
    0,    0,  150,  150,    0,    0,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
    0,  150,    0,  150,    0,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,    0,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  147,  150,
  150,    0,    0,  147,  147,  147,    0,    0,  147,    0,
    0,    0,  147,    0,    0,  147,  147,    0,    0,  147,
    0,    0,  147,    0,    0,    0,    0,  147,  147,    0,
    0,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,    0,  147,    0,  147,    0,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,    0,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  141,  147,  147,    0,    0,  141,  141,
  141,    0,    0,  141,    0,    0,    0,  141,    0,    0,
  141,  141,    0,    0,  141,    0,    0,  141,    0,    0,
    0,    0,  141,  141,    0,    0,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
    0,  141,    0,  141,    0,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,    0,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  153,  141,
  141,    0,    0,  153,  153,  153,    0,    0,  153,    0,
    0,    0,  153,    0,    0,  153,  153,    0,    0,  153,
    0,    0,  153,    0,    0,    0,    0,  153,  153,    0,
    0,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,    0,  153,    0,  153,    0,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,    0,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  149,  153,  153,    0,    0,  149,  149,
  149,    0,    0,  149,    0,    0,    0,  149,    0,    0,
  149,  149,    0,    0,  149,    0,    0,  149,    0,    0,
    0,    0,  149,  149,    0,    0,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
    0,  149,    0,  149,    0,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,    0,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  148,  149,
  149,    0,    0,  148,  148,  148,    0,    0,  148,    0,
    0,    0,  148,    0,    0,  148,  148,    0,    0,  148,
    0,    0,  148,    0,    0,    0,    0,  148,  148,    0,
    0,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,    0,  148,    0,  148,    0,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,    0,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  143,  148,  148,    0,    0,  143,  143,
  143,    0,    0,  143,    0,    0,    0,  143,    0,    0,
  143,  143,    0,    0,  143,    0,    0,  143,    0,    0,
    0,    0,  143,  143,    0,    0,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
    0,  143,    0,  143,    0,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,    0,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  142,  143,
  143,    0,    0,  142,  142,  142,    0,    0,  142,    0,
    0,    0,  142,    0,    0,  142,  142,    0,    0,  142,
    0,    0,  142,    0,    0,    0,    0,  142,  142,    0,
    0,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,    0,  142,    0,  142,    0,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,    0,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  152,  142,  142,    0,    0,  152,  152,
  152,    0,    0,  152,    0,    0,    0,  152,    0,    0,
  152,  152,    0,    0,  152,    0,    0,  152,    0,    0,
    0,    0,  152,  152,    0,    0,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
    0,  152,    0,  152,    0,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,    0,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  146,  152,
  152,    0,    0,  146,  146,  146,    0,    0,  146,    0,
    0,    0,  146,    0,    0,  146,  146,    0,    0,  146,
    0,    0,  146,    0,    0,    0,    0,  146,  146,    0,
    0,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,    0,  146,    0,  146,    0,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,    0,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  154,  146,  146,    0,    0,  154,  154,
  154,    0,    0,  154,    0,    0,    0,  154,    0,    0,
  154,  154,    0,    0,  154,    0,    0,  154,    0,    0,
    0,    0,  154,  154,    0,    0,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
    0,  154,    0,  154,    0,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,    0,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  140,  154,
  154,    0,    0,  140,  140,  140,    0,    0,  140,    0,
    0,    0,  140,    0,    0,  140,  140,    0,    0,  140,
    0,    0,  140,    0,    0,    0,    0,  140,  140,    0,
    0,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  140,  140,    0,  140,    0,  140,    0,
  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,    0,  140,  140,  140,  140,  140,  140,  140,
  140,  140,  140,  139,  140,  140,    0,    0,  139,  139,
  139,    0,    0,  139,    0,    0,    0,  139,    0,    0,
  139,  139,    0,    0,  139,    0,    0,  139,    0,    0,
    0,    0,  139,  139,    0,    0,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
    0,  139,    0,  139,    0,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,    0,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  242,  139,
  139,    0,    0,  242,    0,  242,    0,    0,  242,    0,
    0,    0,  242,    0,    0,  242,  242,    0,    0,  242,
    0,    0,  242,    0,    0,    0,    0,  242,  242,    0,
    0,  242,  242,  242,    0,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  242,  242,  242,  242,  242,  242,    0,
  242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
  242,  242,    0,  242,  242,  242,  242,  242,  242,  242,
  242,  242,  242,  155,  242,  242,    0,    0,  155,  155,
  155,    0,    0,  155,    0,    0,    0,  155,    0,    0,
  155,  155,    0,    0,  155,    0,    0,  155,    0,    0,
    0,    0,  155,  155,    0,    0,  155,  155,  155,  155,
  155,  155,  155,  155,  155,    0,  155,    0,  155,    0,
  155,    0,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,    0,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,    0,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  158,  155,
  155,    0,    0,  158,  158,  158,    0,    0,  158,    0,
    0,    0,  158,    0,    0,  158,  158,    0,    0,  158,
    0,    0,  158,    0,    0,    0,    0,  158,  158,    0,
    0,  158,    0,  158,  158,  158,    0,  158,    0,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,    0,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,    0,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,    0,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  168,  158,  158,    0,    0,  168,  168,
  168,    0,    0,  168,    0,    0,    0,  168,    0,    0,
  168,  168,    0,    0,  168,    0,    0,  168,    0,    0,
    0,    0,  168,  168,    0,    0,    0,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,    0,  168,    0,    0,  168,  168,
  168,  168,  168,  168,    0,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,    0,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  156,  168,
  168,    0,    0,  156,  156,  156,    0,    0,  156,    0,
    0,    0,  156,    0,    0,  156,  156,    0,    0,  156,
    0,    0,  156,    0,    0,    0,    0,  156,  156,    0,
    0,  156,  156,  156,  156,  156,  156,  156,  156,  156,
    0,  156,    0,  156,    0,  156,    0,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,    0,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,    0,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  157,  156,  156,    0,    0,  157,  157,
  157,    0,    0,  157,    0,    0,    0,  157,    0,    0,
  157,  157,    0,    0,  157,    0,    0,  157,    0,    0,
    0,    0,  157,  157,    0,    0,  157,  157,  157,  157,
  157,  157,  157,  157,  157,    0,  157,    0,  157,    0,
  157,    0,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,    0,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,    0,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  159,  157,
  157,    0,    0,  159,  159,  159,    0,    0,  159,    0,
    0,    0,  159,    0,    0,  159,  159,    0,    0,  159,
    0,    0,  159,    0,    0,    0,    0,  159,  159,    0,
    0,  159,    0,  159,  159,  159,    0,  159,    0,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,    0,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,    0,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,    0,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  161,  159,  159,    0,    0,  161,  161,
  161,    0,    0,  161,    0,    0,    0,  161,    0,    0,
  161,  161,    0,    0,  161,    0,    0,  161,    0,    0,
    0,    0,  161,  161,    0,    0,  161,    0,  161,  161,
  161,    0,  161,    0,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,    0,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,    0,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,    0,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  162,  161,
  161,    0,    0,  162,  162,  162,    0,    0,  162,    0,
    0,    0,  162,    0,    0,  162,  162,    0,    0,  162,
    0,    0,  162,    0,    0,    0,    0,  162,  162,    0,
    0,  162,    0,  162,  162,  162,    0,  162,    0,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,    0,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,    0,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,    0,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  160,  162,  162,    0,    0,  160,  160,
  160,    0,    0,  160,    0,    0,    0,  160,    0,    0,
  160,  160,    0,    0,  160,    0,    0,  160,    0,    0,
    0,    0,  160,  160,    0,    0,  160,    0,  160,  160,
  160,    0,  160,    0,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,    0,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,    0,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,    0,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  174,  160,
  160,    0,    0,  174,  174,  174,    0,    0,  174,    0,
    0,    0,  174,    0,    0,  174,  174,    0,    0,  174,
    0,    0,  174,    0,    0,    0,    0,  174,  174,    0,
    0,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,    0,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,    0,
  174,  174,  174,  174,  174,  174,    0,  174,  174,  174,
  174,  174,    0,  174,    0,  174,    0,  174,    0,  174,
  174,  174,  174,   90,  174,  174,    0,    0,   90,   90,
   90,    0,    0,   90,    0,    0,    0,   90,    0,    0,
   90,   90,    0,    0,   90,    0,    0,   90,    0,    0,
    0,    0,   90,   90,    0,    0,    0,   90,   90,    0,
   90,    0,   90,    0,   90,    0,   90,    0,   90,    0,
   90,    0,   90,    0,    0,   90,   90,   90,   90,   90,
   90,   90,   90,   90,   90,   90,   90,   90,    0,   90,
    0,   90,    0,   90,   90,   90,   90,   90,   90,   90,
   90,   90,    0,   90,    0,   90,    0,    0,   90,    0,
    0,   90,    0,   90,    0,    0,   90,    0,   90,    0,
   90,    0,   90,   90,   90,   90,   90,    0,   90,    0,
   90,    0,   90,   90,   90,   90,   90,   90,   96,   90,
   90,    0,    0,   96,   96,   96,    0,    0,   96,    0,
    0,    0,   96,    0,    0,   96,   96,    0,    0,   96,
    0,    0,   96,    0,    0,    0,    0,   96,   96,    0,
    0,   96,   96,    0,   96,    0,   96,    0,   96,    0,
   96,    0,   96,    0,   96,    0,   96,    0,   96,   96,
    0,    0,    0,   96,    0,    0,    0,   96,    0,   96,
    0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
    0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
    0,   96,   96,    0,   96,   96,    0,   96,    0,    0,
   96,    0,   96,    0,   96,    0,   96,   96,   96,   96,
   96,   96,    0,   96,   96,   96,   96,   96,   96,   96,
    0,   96,   96,  135,   96,   96,    0,    0,  135,  135,
  135,    0,    0,  135,    0,    0,    0,  135,    0,    0,
  135,  135,    0,    0,  135,    0,    0,  135,    0,    0,
    0,    0,  135,  135,    0,    0,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,    0,  135,
  135,  135,    0,  135,    0,  135,    0,  135,    0,  135,
    0,  135,    0,  135,    0,  135,    0,  135,    0,  135,
    0,  135,  135,  135,  135,  135,  135,  135,  135,    0,
  135,  135,  135,  135,    0,    0,  135,    0,  135,    0,
  135,  135,  135,  135,  135,  135,  135,    0,  135,  135,
  135,  135,  135,  135,  135,  135,    0,  135,  132,  132,
  132,    0,    0,  132,    0,    0,    0,  132,    0,    0,
  132,  132,    0,    0,  132,    0,    0,  132,    0,    0,
    0,    0,  132,  132,    0,    0,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
  132,  132,  132,  132,    0,  132,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  132,  132,    0,  132,  132,
  132,  132,  132,  132,  132,  132,  132,  132,    0,  132,
  132,  208,    0,  209,    0,  210,    0,  211,    0,  212,
    0,  213,    0,  214,    0,  215,    0,    0,  216,  217,
  218,    0,  219,  220,  221,    0,  222,    0,  223,    0,
  224,    0,  225,    0,  226,    0,  227,    0,  228,    0,
  229,    0,  230,    0,  231,    0,  232,    0,  233,    0,
    0,  234,    0,    0,  235,    0,  236,    0,    0,  237,
    0,  238,    0,  239,    0,    0,    0,  361,  362,  363,
  364,  365,  366,  367,  368,  369,  370,  371,  240,  373,
  374,  375,    0,  377,  378,
  ]
  yycheck := [                         44,
   64,   65,   66,  102,   68,  206,  306,   71,  292,   73,
   74,   75,  241,  242,  257,  269,  152,  270,   63,  257,
  271,  297,  274,  269,  256,  254,  314,   72,   73,  258,
  282,   10,   11,  294,  256,  419,  288,  257,  102,  262,
  278,  257,  363,  266,  365,  269,  300,  300,  271,  370,
  300,  274,  300,  276,  300,  278,  279,  280,  103,  282,
  271,  257,  278,  286,  287,  288,  351,  278,  353,  345,
   49,  347,  348,   52,  362,  459,  300,  273,  369,  257,
  371,  300,  283,  207,  208,  209,  210,  211,  212,  213,
  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
  234,  235,  236,  237,  238,  239,   70,  378,  369,  367,
  363,  371,   76,  375,   78,   79,   80,   81,   82,   83,
   84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
   94,   95,   96,   97,   98,   99,  369,  369,  368,  422,
  369,  105,  375,  300,  285,  269,  271,  362,  369,  274,
  460,  206,  298,  278,  369,  271,  281,  282,  274,  300,
  257,  455,  278,  288,  314,  281,  282,  276,  277,  363,
  271,  365,  288,  274,  262,  274,  300,  278,  266,  278,
  281,  282,  281,  282,  257,  495,  274,  288,  276,  288,
  293,  279,  280,  257,  274,  478,  435,  300,  286,  287,
  288,  281,  282,  277,  257,  278,  280,  364,  288,  366,
  367,  277,  362,  298,  369,  281,  499,  302,  365,  304,
  370,  365,  372,  278,  374,  291,  373,  271,  283,  373,
  315,  363,  367,  365,  278,  309,  310,  311,  312,  313,
  365,  367,  316,  317,  369,  319,  363,  365,  365,  365,
  375,  462,  370,  369,  371,  267,  268,  269,  270,  375,
  315,  363,  274,  365,  362,  306,  321,  308,  370,  310,
  369,  312,  365,  365,  375,  365,  375,  365,  371,  490,
  262,  371,  416,  365,  266,    3,    4,  365,  370,  500,
  365,  362,  274,  371,  276,  375,  371,  279,  280,  262,
  363,  271,  365,  266,  286,  287,  288,  271,  272,  273,
  369,  274,  371,  276,  373,  449,  279,  280,  257,  258,
  259,  260,  261,  286,  287,  288,  369,  365,  371,  306,
  373,  369,  365,  310,  365,  365,  445,  446,  369,  369,
  319,  475,  257,  369,  323,  260,  325,  373,  327,  423,
  329,  369,  331,  487,  333,  373,  335,  365,  337,  365,
  339,  369,  341,  369,  150,  151,  440,  153,  262,  365,
  257,  350,  266,  260,  483,  484,  363,  356,  365,  358,
  274,  360,  276,  367,  368,  279,  280,  442,  291,  365,
  464,  294,  286,  287,  288,  363,  362,  365,  377,    3,
    4,  380,  381,  258,  259,  260,  261,  462,  133,  134,
  256,  257,  258,  259,  260,  261,  363,  263,  365,  265,
  363,  267,  365,  261,  262,  271,  272,  273,  257,  275,
  263,  264,  265,  266,  258,  490,  257,  283,  284,  368,
  257,  271,  300,  289,  290,  500,  292,  369,  343,  295,
  296,  297,  363,  262,  300,  367,  302,  266,  304,  363,
  306,  257,  308,  257,  310,  274,  312,  276,  314,  315,
  279,  280,  282,  369,  257,  367,  369,  286,  287,  288,
  369,  257,  373,  329,  363,  331,  371,  333,  362,  317,
  278,  372,  264,  362,  317,  371,  271,  343,  257,  345,
  367,  347,  348,  271,  350,  351,  257,  353,  362,  355,
  356,  317,  358,  363,  360,  362,  362,  317,  363,  271,
  369,  362,  368,  369,  370,  373,  372,  363,  363,  363,
  271,  363,    1,  379,  365,  257,  382,  256,  257,  258,
  259,  260,  261,  363,  263,   46,  265,   51,  267,  268,
  149,   54,  281,  272,  273,  205,  275,  409,  321,  240,
  423,  319,   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,
  289,  290,   -1,  292,   -1,   -1,  295,  296,  297,   -1,
  262,  300,   -1,  302,  266,  304,   -1,  306,   -1,  308,
   -1,  310,  274,  312,  276,  314,  315,  279,  280,   -1,
   -1,   -1,   -1,   -1,  286,  287,  288,   -1,   -1,   -1,
  329,   -1,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  343,   -1,  345,   -1,  347,  348,
   -1,  350,  351,   -1,  353,   -1,  355,  356,   -1,  358,
   -1,  360,   -1,  362,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,   -1,  372,   -1,   -1,   -1,   -1,   -1,   -1,
  379,   -1,   -1,  382,  256,  257,  258,  259,  260,  261,
   -1,  263,   -1,  265,   -1,  267,   -1,   -1,   -1,   -1,
  272,  273,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,
  292,   -1,   -1,  295,  296,  297,   -1,  262,  300,   -1,
  302,  266,  304,   -1,  306,   -1,  308,   -1,  310,  274,
  312,  276,  314,  315,  279,  280,   -1,   -1,   -1,   -1,
   -1,  286,  287,  288,   -1,   -1,   -1,  329,   -1,  331,
   -1,  333,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  343,   -1,  345,   -1,  347,  348,   -1,  350,  351,
   -1,  353,   -1,  355,  356,   -1,  358,   -1,  360,   -1,
  362,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,  373,   -1,   -1,   -1,   -1,   -1,  379,   -1,   -1,
  382,  256,  257,  258,  259,  260,  261,   -1,  263,   -1,
  265,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,   -1,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,  284,
   -1,   -1,   -1,   -1,  289,  290,   -1,  292,   -1,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
   -1,  306,   -1,  308,   -1,  310,   -1,  312,   -1,  314,
  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  329,   -1,  331,   -1,  333,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  343,   -1,
  345,   -1,  347,  348,   -1,  350,  351,   -1,  353,   -1,
  355,  356,   -1,  358,   -1,  360,   -1,  362,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,   -1,
   -1,   -1,   -1,   -1,  379,   -1,   -1,  382,  257,  258,
  259,  260,  261,   -1,  263,   -1,  265,   -1,  267,   -1,
   -1,   -1,   -1,  272,  273,   -1,  275,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,
  289,  290,   -1,  292,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,   -1,  306,   -1,  308,
   -1,  310,   -1,  312,   -1,  314,  315,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  329,   -1,  331,   -1,  333,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  343,   -1,  345,   -1,  347,  348,
   -1,  350,  351,   -1,  353,   -1,  355,  356,   -1,  358,
  264,  360,   -1,  362,   -1,  269,  270,  271,   -1,  368,
  274,  370,   -1,  372,  278,   -1,   -1,  281,  282,   -1,
  379,  285,   -1,  382,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,   -1,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,   -1,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,   -1,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,   -1,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,   -1,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,
  299,   -1,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  264,  380,  381,   -1,   -1,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,
  294,   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,  356,  357,  358,  359,  360,  361,  362,  363,
  364,  365,  366,  367,   -1,  369,  370,  371,  372,  373,
  374,  375,  376,  377,  378,  264,  380,  381,   -1,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
   -1,   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,  356,  357,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  264,
   -1,  380,  381,   -1,  269,  270,  271,   -1,   -1,  274,
   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,   -1,  352,   -1,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  264,  380,  381,   -1,   -1,   -1,
  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,
   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
   -1,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  264,
  380,  381,   -1,   -1,   -1,  270,  271,   -1,   -1,  274,
   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  264,  380,  381,   -1,   -1,   -1,
  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,
   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,
   -1,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  264,
  380,  381,   -1,   -1,   -1,  270,  271,   -1,   -1,  274,
   -1,   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,
   -1,   -1,  297,  298,  299,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
   -1,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,   -1,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  264,  380,  381,   -1,   -1,  269,
  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,
   -1,  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,   -1,   -1,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,  356,  357,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,   -1,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  264,   -1,
  380,  381,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,   -1,  352,   -1,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
   -1,  352,   -1,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,   -1,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,   -1,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,   -1,  307,   -1,  309,   -1,
  311,   -1,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,   -1,  299,  300,  301,   -1,  303,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,   -1,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,   -1,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,   -1,  346,   -1,   -1,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,   -1,  307,   -1,  309,   -1,
  311,   -1,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,   -1,  299,  300,  301,   -1,  303,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,   -1,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,   -1,  299,  300,
  301,   -1,  303,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,   -1,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,   -1,  299,  300,  301,   -1,  303,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,   -1,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,   -1,  299,  300,
  301,   -1,  303,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,   -1,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
  356,  357,  358,  359,  360,  361,   -1,  363,  364,  365,
  366,  367,   -1,  369,   -1,  371,   -1,  373,   -1,  375,
  376,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,   -1,  298,  299,   -1,
  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,
  311,   -1,  313,   -1,   -1,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,   -1,  330,
   -1,  332,   -1,  334,  335,  336,  337,  338,  339,  340,
  341,  342,   -1,  344,   -1,  346,   -1,   -1,  349,   -1,
   -1,  352,   -1,  354,   -1,   -1,  357,   -1,  359,   -1,
  361,   -1,  363,  364,  365,  366,  367,   -1,  369,   -1,
  371,   -1,  373,  374,  375,  376,  377,  378,  264,  380,
  381,   -1,   -1,  269,  270,  271,   -1,   -1,  274,   -1,
   -1,   -1,  278,   -1,   -1,  281,  282,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  297,  298,   -1,  300,   -1,  302,   -1,  304,   -1,
  306,   -1,  308,   -1,  310,   -1,  312,   -1,  314,  315,
   -1,   -1,   -1,  319,   -1,   -1,   -1,  323,   -1,  325,
   -1,  327,   -1,  329,   -1,  331,   -1,  333,   -1,  335,
   -1,  337,   -1,  339,   -1,  341,   -1,  343,   -1,  345,
   -1,  347,  348,   -1,  350,  351,   -1,  353,   -1,   -1,
  356,   -1,  358,   -1,  360,   -1,  362,  363,  364,  365,
  366,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
   -1,  377,  378,  264,  380,  381,   -1,   -1,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,   -1,  320,
  321,  322,   -1,  324,   -1,  326,   -1,  328,   -1,  330,
   -1,  332,   -1,  334,   -1,  336,   -1,  338,   -1,  340,
   -1,  342,  343,  344,  345,  346,  347,  348,  349,   -1,
  351,  352,  353,  354,   -1,   -1,  357,   -1,  359,   -1,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,   -1,  378,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,   -1,   -1,
  281,  282,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,  294,   -1,   -1,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,  356,  357,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,   -1,  380,
  381,  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,
   -1,  309,   -1,  311,   -1,  313,   -1,   -1,  316,  317,
  318,   -1,  320,  321,  322,   -1,  324,   -1,  326,   -1,
  328,   -1,  330,   -1,  332,   -1,  334,   -1,  336,   -1,
  338,   -1,  340,   -1,  342,   -1,  344,   -1,  346,   -1,
   -1,  349,   -1,   -1,  352,   -1,  354,   -1,   -1,  357,
   -1,  359,   -1,  361,   -1,   -1,   -1,  243,  244,  245,
  246,  247,  248,  249,  250,  251,  252,  253,  376,  255,
  256,  257,   -1,  259,  260,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 382
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","DEFAULT",
"DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","INVOCABLE","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"PROCEDURE","RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","TO","UNTIL",
"WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","SWAP","NMLT","AUGNMLT","REVASSIGN",
"REVSWAP","SLT","AUGSLT","SLE","AUGSLE","NMLE","AUGNMLE","NMEQ","AUGNMEQ","SEQ",
"AUGSEQ","EQUIV","AUGEQUIV","NMGT","AUGNMGT","NMGE","AUGNMGE","SGT","AUGSGT",
"SGE","AUGSGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET",
"BAR","CONCAT","AUGCONCAT","LCONCAT","AUGLCONCAT","TILDE","NMNE","AUGNMNE",
"SNE","AUGSNE","NEQUIV","AUGNEQUIV","LPAREN","RPAREN","PCOLON","COMMA","MCOLON",
"COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR",
"ABSTRACT","PMATCH","PAND","POR","PUNEVAL","PASSNONMATCH","PIMDASSN","PSETCUR",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : proc",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : invocable",
"decl : cl",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial procbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial procbody",
"optsemi :",
"optsemi : SEMICOL",
"cl : classhead SEMICOL END",
"cl : classhead optsemi clocals methods optsemi initiallysection END",
"classhead : CLASS IDENT supers LPAREN carglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON IDENT",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"invocable : INVOCABLE invoclist",
"invoclist : invocop",
"invoclist : invoclist COMMA invocop",
"invocop : IDENT",
"invocop : STRINGLIT",
"invocop : STRINGLIT COLON INTLIT",
"package : PACKAGE lnkfile",
"import : IMPORT implist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"implist : lnkfile",
"implist : implist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"fldlist :",
"fldlist : idlist",
"proc : prochead SEMICOL locals initial procbody END",
"meth : methhead SEMICOL locals initial procbody END",
"meth : ABSTRACT methhead",
"prochead : PROCEDURE IDENT LPAREN arglist RPAREN",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"carglist :",
"carglist : cparmlist",
"carglist : cparmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"varlist : IDENT",
"varlist : IDENT ASSIGN expr1",
"varlist : varlist COMMA IDENT",
"varlist : varlist COMMA IDENT ASSIGN expr1",
"stalist : IDENT",
"stalist : IDENT ASSIGN expr1",
"stalist : stalist COMMA IDENT",
"stalist : stalist COMMA IDENT ASSIGN expr1",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"cparmlist : carg",
"cparmlist : cparmlist COMMA carg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"carg : priv arg",
"priv :",
"priv : PLUS",
"priv : MINUS",
"clocals :",
"clocals : clocals LOCAL varlist optsemi",
"locals :",
"locals : locals LOCAL varlist SEMICOL",
"locals : locals STATIC stalist SEMICOL",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"procbody :",
"procbody : nexpr SEMICOL procbody",
"nexpr :",
"nexpr : expr",
"expr : expr1a",
"expr : expr AND expr1a",
"expr1a : expr1",
"expr1a : expr1a QMARK expr1",
"expr1 : expr2a",
"expr1 : expr2a SWAP expr1",
"expr1 : expr2a ASSIGN expr1",
"expr1 : expr2a REVSWAP expr1",
"expr1 : expr2a REVASSIGN expr1",
"expr1 : expr2a AUGCONCAT expr1",
"expr1 : expr2a AUGLCONCAT expr1",
"expr1 : expr2a AUGDIFF expr1",
"expr1 : expr2a AUGUNION expr1",
"expr1 : expr2a AUGPLUS expr1",
"expr1 : expr2a AUGMINUS expr1",
"expr1 : expr2a AUGSTAR expr1",
"expr1 : expr2a AUGINTER expr1",
"expr1 : expr2a AUGSLASH expr1",
"expr1 : expr2a AUGMOD expr1",
"expr1 : expr2a AUGCARET expr1",
"expr1 : expr2a AUGNMEQ expr1",
"expr1 : expr2a AUGEQUIV expr1",
"expr1 : expr2a AUGNMGE expr1",
"expr1 : expr2a AUGNMGT expr1",
"expr1 : expr2a AUGNMLE expr1",
"expr1 : expr2a AUGNMLT expr1",
"expr1 : expr2a AUGNMNE expr1",
"expr1 : expr2a AUGNEQUIV expr1",
"expr1 : expr2a AUGSEQ expr1",
"expr1 : expr2a AUGSGE expr1",
"expr1 : expr2a AUGSGT expr1",
"expr1 : expr2a AUGSLE expr1",
"expr1 : expr2a AUGSLT expr1",
"expr1 : expr2a AUGSNE expr1",
"expr1 : expr2a AUGQMARK expr1",
"expr1 : expr2a AUGAND expr1",
"expr1 : expr2a AUGAT expr1",
"expr2a : expr2",
"expr2a : expr2a PMATCH expr2",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr2 : expr2 POR expr3",
"expr3 : expr4",
"expr3 : expr4 PAND expr3",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 PIMDASSN expr5",
"expr4 : expr4 PASSNONMATCH expr5",
"expr4 : expr4 SEQ expr5",
"expr4 : expr4 SGE expr5",
"expr4 : expr4 SGT expr5",
"expr4 : expr4 SLE expr5",
"expr4 : expr4 SLT expr5",
"expr4 : expr4 SNE expr5",
"expr4 : expr4 NMEQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr4 : expr4 EQUIV expr5",
"expr4 : expr4 NEQUIV expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr5 : expr5 LCONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : expr9 CARET expr8",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : LCONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NMEQ expr10",
"expr10 : NMNE expr10",
"expr10 : SEQ expr10",
"expr10 : SNE expr10",
"expr10 : EQUIV expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : NEQUIV expr10",
"expr10 : BACKSLASH expr10",
"expr10 : PSETCUR expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : PUNEVAL",
"expr11 : CREATE expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK caselist RBRACK",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : packageref",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"proc : prochead error procbody END",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 734 "unigram.y"

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
   local rhs

   if /iconc then
      return nd
   if not (*nd.children = 3) then
      return nd
   rhs := nd.children[3]
   if (not(type(rhs) == "treenode")) then
      return nd
   if (not(rhs.label == "invoke")) then
      return nd
   rhs := node("Paren", "(", rhs, ")")
   nd.children[3] := rhs
   return nd
end

procedure FieldRef(lhs, dot, rhs)
   if /iconc | (type(lhs) ~== "treenode") then
      return Field(lhs, dot, rhs)

   if (lhs.label == "invoke") then {
      tmpcount +:= 1;
      return node("Paren", "(",
         node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
         node("invoke", Field("__" || tmpcount, ".", rhs))
         );
      }
   return Field(lhs, dot, rhs)
end

procedure InvocationNode(args[])
   tmpcount +:= 1
   if type(args[1]) == "token" & (args[1].tok = IDENT) then {
       n1 := args[1]
       lparen := copy(args[1])
       lparen.tok := LPAREN
       lparen.s := "("
   }
   else {
       n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
       if lparen := Clone1stToken(args[1]) then {
	   lparen.tok := LPAREN
	   lparen.s := "("
       }
       else lparen := "("
   }
   if *args = 6 then {
       return node("Paren",lparen,node("invoke",
		    # iconc uses no __m business
		   (if /iconc then Field(Field(n1, ".", "__m"), "." , args[3])
			      else Field(n1, ".", args[3])),

	     args[4], node("exprlist",
	     if n1 === args[1] then args[1] else "__"||tmpcount,
	     if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
	     ,")")
      }
   else {
      if /iconc then
	 return  node("Paren",lparen,node("invoke",Field(Field(
			  Field(n1,".", "__m"),
			 "." , args[3]),".",args[5]),
		       args[6], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
		      ,")")
      else return SuperMethodInvok ! args
   }
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
   if /iconc then
      return node("invoke", expr11, lparen, args, rparen)

   if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
      return node("invoke", expr11, lparen, args, rparen)
      }

   if (type(expr11) == "treenode") then {
      case expr11.label of {
         "field": {
            #
            # need to examine lhs of field-ref to determine
            # whether we need to decompose the expr11 further...
            #
            if (type(expr11.children[1]) == "treenode") then {
               tmpcount +:= 1;
               n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
                  expr11.children[1]), ")")
               return node("exprlist", "(", n1, "&",
                  node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
                  lparen, args, rparen), ")")
               }
            else {
               return node("invoke", expr11, lparen, args, rparen)
               }
            }
         default: {
            return node("invoke", expr11, lparen, args, rparen)
            }
         }
      }
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
   tmpcount +:= 1
   if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
      n1 := args[1]
      lparen := copy(args[1])
      lparen.tok := LPAREN
      lparen.s := "("
      }
   else {
      n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
      if lparen := Clone1stToken(args[1]) then {
         lparen.tok := LPAREN
         lparen.s := "("
         }
      else
         lparen := "("
      }

   args[3].s := mangle_class_sym(args[3].s)
   args[3].s ||:= "__oprec"
   return node("exprlist", "(", n1, ")", " & ",
      node("Paren", lparen, node("invoke",
      Field(args[3], ".", args[5]),
      args[6], node("exprlist",
      if n1 === args[1] then args[1] else "__" || tmpcount,
      if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
      ")", ))
end

procedure isloco(node, s)
case type(node) of {
   "treenode": {
      if *node.children > 0 then return isloco(!node.children, s)
      }
   "token" : {
      if (node.tok = IDENT) & (node.s == s) then return
      }
   }
end

procedure buildtab_from_cclause(n, args)
   if type(n) ~== "treenode" then stop("bad table literal")
   comma := copy(n.children[2])
   comma.tok := COMMA
   comma.s := ","
   case n.label of {
     "cclause0": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	}
     "cclause1": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	push(args.children, comma)
	push(args.children, n.children[1])
	}
   }
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
   args := node("elst1")
   write("I am a tablelit, cl is ", image(cl.label))
   while type(cl)=="treenode" & cl.label == "Caselist" do {
      buildtab_from_cclause(cl.children[3], args)
      cl := cl.children[1]
      }
   buildtab_from_cclause(cl, args)
   tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
   lp := copy(lb); lp.tok := LPAREN; lp.s := "("
   rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
   return node("invoke", tabid, lp, args, rp)
end
#line 2373 "unigram.icn"
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    action[yyn]()          # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 277 "unigram.y"
 Progend(valstk[2]);
end

procedure action_2()
#line 279 "unigram.y"
 yyval := EmptyNode 
end

procedure action_3()
#line 280 "unigram.y"

	   if yynerrs = 0 then iwrites(&errout,".");
	   yyval := node("decls", valstk[2], valstk[1])
	      
end

procedure action_12()
#line 295 "unigram.y"
 yyval := EmptyNode 
end

procedure action_13()
#line 296 "unigram.y"

	   yyval := Method( , , , , , valstk[5], "initially", EmptyNode, "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_14()
#line 302 "unigram.y"

	   yyval := Method( , , , , , valstk[8], "initially", valstk[6], "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_15()
#line 310 "unigram.y"
 yyval := EmptyNode 
end

procedure action_17()
#line 313 "unigram.y"

   yyval := valstk[3]
   yyval.methods := methodstaque(&null, yyval)
   
end

procedure action_18()
#line 317 "unigram.y"

   yyval := valstk[7]
   if valstk[5] ~=== EmptyNode then {
      if valstk[5].label == "locals3" then
         yyerror("static class variables not yet implemented")
      # splice in any class locals into the field list
      yyval.fields.traverse(valstk[5])
      }
   if valstk[2] ~=== EmptyNode then
      valstk[4] := node("methods", valstk[4], valstk[2])
   yyval.methods := methodstaque(valstk[4], yyval)
   
end

procedure action_19()
#line 330 "unigram.y"

   yyval := Class()
   yyval.tag := valstk[6]
   yyval.unmangled_name := valstk[5].s
   yyval.name := package_mangled_symbol(valstk[5].s)
   if proc(yyval.name, 0) then
      warning("Warning: class "|| yyval.name ||" overrides the built-in function")
   else if \ (foobar := classes.lookup(yyval.name)) then {
      yyerror("redeclaration of class " || yyval.name)
      yynerrs +:= 1
      }
   else
      classes.insert(yyval, yyval.name)

   yyval.supers_node := valstk[4]
   yyval.fields := valstk[2]
   yyval.lptoken := valstk[3]
   yyval.rptoken := valstk[1]
   
end

procedure action_20()
#line 350 "unigram.y"
 yyval := EmptyNode 
end

procedure action_21()
#line 351 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_22()
#line 352 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_23()
#line 355 "unigram.y"
 yyval := node("packageref", valstk[3],valstk[2],valstk[1]) 
end

procedure action_24()
#line 356 "unigram.y"
 yyval := node("packageref", valstk[2],valstk[1]) 
end

procedure action_25()
#line 359 "unigram.y"
 yyval := EmptyNode 
end

procedure action_26()
#line 360 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_27()
#line 361 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_28()
#line 362 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_29()
#line 365 "unigram.y"
 yyval := node("invocable", valstk[2], valstk[1]);
end

procedure action_31()
#line 368 "unigram.y"
 yyval := node("invoclist", valstk[3],valstk[2],valstk[1]);
end

procedure action_34()
#line 372 "unigram.y"
yyval := node("invocop3", valstk[3],valstk[2],valstk[1]);
end

procedure action_35()
#line 374 "unigram.y"

   if \thePackage then {
      if not (thePackage.name == valstk[1].s) then {
         yyerror(fName || " cannot be in both package "|| thePackage.name ||
            " and package " || valstk[1].s)
         yyval := EmptyNode
         }
      else { # this branch allowed for -C / iconc
         thePackage.insertfname(fName)
         thePackage.add_imported()
         }
      }
   else {
      yyval := node("package", valstk[2],valstk[1]);
      thePackage := Package(valstk[1].s)
      thePackage.insertfname(fName)
      thePackage.add_imported()
      }
   
end

procedure action_36()
#line 394 "unigram.y"

   yyval := node("import", valstk[2],valstk[1]," ")
   import_class(valstk[1])
   
end

procedure action_37()
#line 399 "unigram.y"
 yyval := node("link", valstk[2],valstk[1]," "); 
end

procedure action_39()
#line 402 "unigram.y"
 yyval := node("lnklist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_41()
#line 405 "unigram.y"
 yyval := node("implist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_44()
#line 410 "unigram.y"
 yyval := node("global", valstk[2],valstk[1]) 
end

procedure action_45()
#line 412 "unigram.y"

		yyval := declaration(valstk[4],valstk[2],valstk[5],valstk[3],valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_46()
#line 418 "unigram.y"
 yyval := EmptyNode 
end

procedure action_48()
#line 421 "unigram.y"

#		body_scopeck(valstk[2])
		yyval := node("proc", valstk[6],";",valstk[4],valstk[3],valstk[2],valstk[1])
		
end

procedure action_49()
#line 426 "unigram.y"

		yyval := valstk[6]
		yyval.locals := valstk[4]
		yyval.initl := valstk[3]
		yyval.procbody := valstk[2]
		
end

procedure action_50()
#line 432 "unigram.y"

		yyval := valstk[1]
                yyval.abstract_flag := 1
		
end

procedure action_51()
#line 437 "unigram.y"

		yyval := declaration(valstk[4], valstk[2], valstk[5], valstk[3], valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_52()
#line 443 "unigram.y"

		yyval := Method( , , , , , valstk[5], valstk[4].s, valstk[2], valstk[5].s, valstk[3], valstk[1])
		
end

procedure action_53()
#line 448 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_54()
#line 449 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_55()
#line 450 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_56()
#line 452 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_57()
#line 453 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_58()
#line 454 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_60()
#line 458 "unigram.y"
 yyval := node("idlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_62()
#line 461 "unigram.y"
 yyval := node("varlist2", valstk[3], valstk[2], valstk[1])
end

procedure action_63()
#line 462 "unigram.y"
 yyval := node("varlist3", valstk[3], valstk[2], valstk[1])
end

procedure action_64()
#line 463 "unigram.y"
 yyval := node("varlist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_66()
#line 466 "unigram.y"
 yyval := node("stalist2", valstk[3], valstk[2], valstk[1])
end

procedure action_67()
#line 467 "unigram.y"
 yyval := node("stalist3", valstk[3], valstk[2], valstk[1])
end

procedure action_68()
#line 468 "unigram.y"
 yyval := node("stalist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_70()
#line 471 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_72()
#line 474 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_74()
#line 477 "unigram.y"
 yyval := node("arg2", valstk[3], valstk[2], valstk[1]) 
end

procedure action_75()
#line 478 "unigram.y"
 yyval := node("arg3", valstk[3], valstk[2], valstk[1]) 
end

procedure action_76()
#line 479 "unigram.y"
 yyval := node("arg4", valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]) 
end

procedure action_77()
#line 481 "unigram.y"
 yyval := valstk[1] 
end

procedure action_78()
#line 483 "unigram.y"
 yyval := EmptyNode;
end

procedure action_81()
#line 487 "unigram.y"
 yyval := EmptyNode;
end

procedure action_82()
#line 488 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_83()
#line 490 "unigram.y"
 yyval := EmptyNode;
end

procedure action_84()
#line 491 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_85()
#line 492 "unigram.y"
 yyval := node("locals3", valstk[4],valstk[3],valstk[2],";");
end

procedure action_86()
#line 494 "unigram.y"
 yyval := EmptyNode 
end

procedure action_87()
#line 495 "unigram.y"

	   yyval := node("initial", valstk[3], valstk[2],";")
	      
end

procedure action_88()
#line 499 "unigram.y"
 yyval := EmptyNode 
end

procedure action_89()
#line 500 "unigram.y"
 yyval := node("procbody", valstk[3],";",valstk[1]);
end

procedure action_90()
#line 502 "unigram.y"
 yyval := EmptyNode 
end

procedure action_93()
#line 506 "unigram.y"
 yyval := node("and", valstk[3],valstk[2],valstk[1]) 
end

procedure action_95()
#line 509 "unigram.y"
 yyval := node("binques", valstk[3],valstk[2],valstk[1]);
end

procedure action_97()
#line 512 "unigram.y"
 yyval := node("swap", valstk[3],valstk[2],valstk[1]);
end

procedure action_98()
#line 513 "unigram.y"
 
          yyval := parenthesize_assign(node("assign",valstk[3],valstk[2],valstk[1]));
          
end

procedure action_99()
#line 516 "unigram.y"
 yyval := node("revswap", valstk[3],valstk[2],valstk[1]);
end

procedure action_100()
#line 517 "unigram.y"
 yyval := node("revasgn", valstk[3],valstk[2],valstk[1]);
end

procedure action_101()
#line 518 "unigram.y"
 yyval := node("augcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_102()
#line 519 "unigram.y"
 yyval := node("auglcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_103()
#line 520 "unigram.y"
 yyval := node("Bdiffa", valstk[3],valstk[2],valstk[1]);
end

procedure action_104()
#line 521 "unigram.y"
 yyval := node("Buniona", valstk[3],valstk[2],valstk[1]);
end

procedure action_105()
#line 522 "unigram.y"
 yyval := node("Bplusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_106()
#line 523 "unigram.y"
 yyval := node("Bminusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_107()
#line 524 "unigram.y"
 yyval := node("Bstara", valstk[3],valstk[2],valstk[1]);
end

procedure action_108()
#line 525 "unigram.y"
 yyval := node("Bintera", valstk[3],valstk[2],valstk[1]);
end

procedure action_109()
#line 526 "unigram.y"
 yyval := node("Bslasha", valstk[3],valstk[2],valstk[1]);
end

procedure action_110()
#line 527 "unigram.y"
 yyval := node("Bmoda", valstk[3],valstk[2],valstk[1]);
end

procedure action_111()
#line 528 "unigram.y"
 yyval := node("Bcareta", valstk[3],valstk[2],valstk[1]);
end

procedure action_112()
#line 529 "unigram.y"
 yyval := node("Baugeq", valstk[3],valstk[2],valstk[1]);
end

procedure action_113()
#line 530 "unigram.y"
 yyval := node("Baugeqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_114()
#line 531 "unigram.y"
 yyval := node("Baugge", valstk[3],valstk[2],valstk[1]);
end

procedure action_115()
#line 532 "unigram.y"
 yyval := node("Bauggt", valstk[3],valstk[2],valstk[1]);
end

procedure action_116()
#line 533 "unigram.y"
 yyval := node("Baugle", valstk[3],valstk[2],valstk[1]);
end

procedure action_117()
#line 534 "unigram.y"
 yyval := node("Bauglt", valstk[3],valstk[2],valstk[1]);
end

procedure action_118()
#line 535 "unigram.y"
 yyval := node("Baugne", valstk[3],valstk[2],valstk[1]);
end

procedure action_119()
#line 536 "unigram.y"
 yyval := node("Baugneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_120()
#line 537 "unigram.y"
 yyval := node("Baugseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_121()
#line 538 "unigram.y"
 yyval := node("Baugsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_122()
#line 539 "unigram.y"
 yyval := node("Baugsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_123()
#line 540 "unigram.y"
 yyval := node("Baugsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_124()
#line 541 "unigram.y"
 yyval := node("Baugslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_125()
#line 542 "unigram.y"
 yyval := node("Baugsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_126()
#line 543 "unigram.y"
 yyval := node("Baugques", valstk[3],valstk[2],valstk[1]);
end

procedure action_127()
#line 544 "unigram.y"
 yyval := node("Baugamper", valstk[3],valstk[2],valstk[1]);
end

procedure action_128()
#line 545 "unigram.y"
 yyval := node("Baugact", valstk[3],valstk[2],valstk[1]);
end

procedure action_130()
#line 548 "unigram.y"
 yyval := node("BPmatch", valstk[3],valstk[2],valstk[1]);
end

procedure action_132()
#line 551 "unigram.y"
 yyval := node("to", valstk[3],valstk[2],valstk[1]);
end

procedure action_133()
#line 552 "unigram.y"
 yyval := node("toby", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_134()
#line 553 "unigram.y"
 yyval := node("BPor", valstk[3],valstk[2],valstk[1]); 
end

procedure action_136()
#line 556 "unigram.y"
 yyval := node("BPand", valstk[3],valstk[2],valstk[1]); 
end

procedure action_137()
#line 557 "unigram.y"
yyval := node(BAR, valstk[3],valstk[2],valstk[1]);
end

procedure action_139()
#line 560 "unigram.y"
 yyval := node("BPiam", valstk[3],valstk[2],valstk[1]);
end

procedure action_140()
#line 561 "unigram.y"
 yyval := node("BPaom", valstk[3],valstk[2],valstk[1]);
end

procedure action_141()
#line 562 "unigram.y"
 yyval := node("Bseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_142()
#line 563 "unigram.y"
 yyval := node("Bsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_143()
#line 564 "unigram.y"
 yyval := node("Bsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_144()
#line 565 "unigram.y"
 yyval := node("Bsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_145()
#line 566 "unigram.y"
 yyval := node("Bslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_146()
#line 567 "unigram.y"
 yyval := node("Bsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_147()
#line 568 "unigram.y"
 yyval := node("Beq", valstk[3],valstk[2],valstk[1]);
end

procedure action_148()
#line 569 "unigram.y"
 yyval := node("Bge", valstk[3],valstk[2],valstk[1]);
end

procedure action_149()
#line 570 "unigram.y"
 yyval := node("Bgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_150()
#line 571 "unigram.y"
 yyval := node("Ble", valstk[3],valstk[2],valstk[1]);
end

procedure action_151()
#line 572 "unigram.y"
 yyval := node("Blt", valstk[3],valstk[2],valstk[1]);
end

procedure action_152()
#line 573 "unigram.y"
 yyval := node("Bne", valstk[3],valstk[2],valstk[1]);
end

procedure action_153()
#line 574 "unigram.y"
 yyval := node("Beqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_154()
#line 575 "unigram.y"
 yyval := node("Bneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_156()
#line 578 "unigram.y"
 yyval := node("Bcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_157()
#line 579 "unigram.y"
 yyval := node("Blcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_159()
#line 586 "unigram.y"
 yyval := node("Bplus", valstk[3],valstk[2],valstk[1]);
end

procedure action_160()
#line 587 "unigram.y"
 yyval := node("Bdiff", valstk[3],valstk[2],valstk[1]);
end

procedure action_161()
#line 588 "unigram.y"
 yyval := node("Bunion", valstk[3],valstk[2],valstk[1]);
end

procedure action_162()
#line 589 "unigram.y"
 yyval := node("Bminus", valstk[3],valstk[2],valstk[1]);
end

procedure action_164()
#line 592 "unigram.y"
 yyval := node("Bstar", valstk[3],valstk[2],valstk[1]);
end

procedure action_165()
#line 593 "unigram.y"
 yyval := node("Binter", valstk[3],valstk[2],valstk[1]);
end

procedure action_166()
#line 594 "unigram.y"
 yyval := node("Bslash", valstk[3],valstk[2],valstk[1]);
end

procedure action_167()
#line 595 "unigram.y"
 yyval := node("Bmod", valstk[3],valstk[2],valstk[1]);
end

procedure action_169()
#line 598 "unigram.y"
 yyval := node("Bcaret", valstk[3],valstk[2],valstk[1]);
end

procedure action_171()
#line 601 "unigram.y"
 yyval := node("limit", valstk[3],valstk[2],valstk[1]);
end

procedure action_172()
#line 602 "unigram.y"
 yyval := node("at", valstk[3],valstk[2],valstk[1]) 
end

procedure action_173()
#line 603 "unigram.y"
 yyval := node("apply", valstk[3],valstk[2],valstk[1]);
end

procedure action_175()
#line 606 "unigram.y"
 yyval := node("uat", valstk[2],valstk[1]);
end

procedure action_176()
#line 607 "unigram.y"
 yyval := node("unot", valstk[2],valstk[1]);
end

procedure action_177()
#line 608 "unigram.y"
 yyval := node("ubar", valstk[2],valstk[1]);
end

procedure action_178()
#line 609 "unigram.y"
 yyval := node("uconcat", valstk[2],valstk[1]);
end

procedure action_179()
#line 610 "unigram.y"
 yyval := node("ulconcat", valstk[2],valstk[1]);
end

procedure action_180()
#line 611 "unigram.y"
 yyval := node("udot", valstk[2],valstk[1]);
end

procedure action_181()
#line 612 "unigram.y"
 yyval := node("ubang", valstk[2],valstk[1]);
end

procedure action_182()
#line 613 "unigram.y"
 yyval := node("udiff", valstk[2],valstk[1]);
end

procedure action_183()
#line 614 "unigram.y"
 yyval := node("uplus", valstk[2],valstk[1]);
end

procedure action_184()
#line 615 "unigram.y"
 yyval := node("ustar", valstk[2],valstk[1]);
end

procedure action_185()
#line 616 "unigram.y"
 yyval := node("uslash", valstk[2],valstk[1]);
end

procedure action_186()
#line 617 "unigram.y"
 yyval := node("ucaret", valstk[2],valstk[1]);
end

procedure action_187()
#line 618 "unigram.y"
 yyval := node("uinter", valstk[2],valstk[1]);
end

procedure action_188()
#line 619 "unigram.y"
 yyval := node("utilde", valstk[2],valstk[1]);
end

procedure action_189()
#line 620 "unigram.y"
 yyval := node("uminus", valstk[2],valstk[1]);
end

procedure action_190()
#line 621 "unigram.y"
 yyval := node("unumeq", valstk[2],valstk[1]);
end

procedure action_191()
#line 622 "unigram.y"
 yyval := node("unumne", valstk[2],valstk[1]);
end

procedure action_192()
#line 623 "unigram.y"
 yyval := node("ulexeq", valstk[2],valstk[1]);
end

procedure action_193()
#line 624 "unigram.y"
 yyval := node("ulexne", valstk[2],valstk[1]);
end

procedure action_194()
#line 625 "unigram.y"
 yyval := node("uequiv", valstk[2],valstk[1]);
end

procedure action_195()
#line 626 "unigram.y"
 yyval := node("uunion", valstk[2],valstk[1]);
end

procedure action_196()
#line 627 "unigram.y"
 yyval := node("uqmark", valstk[2],valstk[1]);
end

procedure action_197()
#line 628 "unigram.y"
 yyval := node("unotequiv", valstk[2],valstk[1]);
end

procedure action_198()
#line 629 "unigram.y"
 yyval := node("ubackslash", valstk[2],valstk[1]);
end

procedure action_199()
#line 630 "unigram.y"
 yyval := node("upsetcur", valstk[2],valstk[1]);
end

procedure action_209()
#line 641 "unigram.y"
 yyval := node("BPuneval", valstk[1]);
end

procedure action_210()
#line 642 "unigram.y"
 yyval := node("create", valstk[2],valstk[1]);
end

procedure action_212()
#line 644 "unigram.y"
 yyval := node("Next", valstk[1]);
end

procedure action_213()
#line 645 "unigram.y"
 yyval := node("Break", valstk[2],valstk[1]);
end

procedure action_214()
#line 646 "unigram.y"
 yyval := node("Paren", valstk[3],valstk[2],valstk[1]);
end

procedure action_215()
#line 647 "unigram.y"
 yyval := node("Brace", valstk[3],valstk[2],valstk[1]);
end

procedure action_216()
#line 648 "unigram.y"
 yyval := tablelit(valstk[3],valstk[2],valstk[1]);
end

procedure action_217()
#line 649 "unigram.y"
 yyval := node("Brack", valstk[3],valstk[2],valstk[1]);
end

procedure action_218()
#line 650 "unigram.y"
 yyval := node("Subscript", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_219()
#line 651 "unigram.y"
 yyval := node("Pdco0", valstk[3],valstk[2],valstk[1]);
end

procedure action_220()
#line 652 "unigram.y"
 yyval := node("Pdco1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_221()
#line 653 "unigram.y"

           yyval := SimpleInvocation(valstk[4],valstk[3],valstk[2],valstk[1]);
      
end

procedure action_222()
#line 656 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_223()
#line 659 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_224()
#line 662 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_225()
#line 665 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_226()
#line 668 "unigram.y"

           yyval := FieldRef(valstk[3],valstk[2],valstk[1]);
      
end

procedure action_228()
#line 672 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]) 
end

procedure action_229()
#line 673 "unigram.y"
 yyval := node("keyword",valstk[2],valstk[1]) 
end

procedure action_230()
#line 674 "unigram.y"
 yyval := Keyword(valstk[2],valstk[1]) 
end

procedure action_231()
#line 676 "unigram.y"
 yyval := node("While0", valstk[2],valstk[1]);
end

procedure action_232()
#line 677 "unigram.y"
 yyval := node("While1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_233()
#line 679 "unigram.y"
 yyval := node("until", valstk[2],valstk[1]);
end

procedure action_234()
#line 680 "unigram.y"
 yyval := node("until1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_235()
#line 682 "unigram.y"
 yyval := node("every", valstk[2],valstk[1]);
end

procedure action_236()
#line 683 "unigram.y"
 yyval := node("every1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_237()
#line 685 "unigram.y"
 yyval := node("repeat", valstk[2],valstk[1]);
end

procedure action_239()
#line 688 "unigram.y"
 yyval := node("return", valstk[2], valstk[1]);
end

procedure action_240()
#line 689 "unigram.y"
 yyval := node("Suspend0", valstk[2],valstk[1]);
end

procedure action_241()
#line 690 "unigram.y"
 yyval := node("Suspend1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_242()
#line 692 "unigram.y"
 yyval := node("If0", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_243()
#line 693 "unigram.y"
 yyval := node("If1", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_244()
#line 695 "unigram.y"
 yyval := node("Case", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_246()
#line 698 "unigram.y"
 yyval := node("Caselist", valstk[3],";",valstk[1]);
end

procedure action_247()
#line 700 "unigram.y"
 yyval := node("cclause0", valstk[3],valstk[2],valstk[1]);
end

procedure action_248()
#line 701 "unigram.y"
 yyval := node("cclause1", valstk[3],valstk[2],valstk[1]);
end

procedure action_250()
#line 704 "unigram.y"

	   if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
	      yyval := valstk[3]; put(yyval.children, valstk[2], valstk[1])
	      }
	   else
	      yyval := node("elst1", valstk[3],valstk[2],valstk[1])
	   
end

procedure action_251()
#line 712 "unigram.y"
 yyval := node("pdcolist0", valstk[1]) 
end

procedure action_252()
#line 713 "unigram.y"
 yyval := node("pdcolist1", valstk[3],valstk[2],valstk[1]); 
end

procedure action_257()
#line 720 "unigram.y"
 yyval := node("section", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_262()
#line 727 "unigram.y"
 yyval := node("compound", valstk[3],";",valstk[1]);
end

procedure action_264()
#line 730 "unigram.y"
 yyval := node("error", valstk[4],valstk[2],valstk[1]); 
end

procedure action_265()
#line 731 "unigram.y"
 yyval := node("error"); 
end

#line 3657 "unigram.icn"
