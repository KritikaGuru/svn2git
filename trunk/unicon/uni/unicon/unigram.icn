### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 150 "unigram.y"

procedure Keyword(x1,x2)
   static keywords
   initial {
      keywords := set(["allocated","clock","collections","column","current",
		       "date","now","dateline","digits","e","error",
		       "errornumber","errortext","errorvalue","errout","fail",
		       "eventcode","eventsource","eventvalue","features",
		       "file","host","input","lcase","letters","level",
		       "line","main","null","output","phi","pi","pick","pos",
		       "progname","random","regions","source","storage",
		       "subject","time","trace","dump","ucase","version",
		       "errno","window","col","row","x","y","interval",
		       "control","shift","meta","lpress","mpress","rpress",
		       "lrelease","mrelease","rrelease","ldrag","mdrag",
		       "rdrag","resize","ascii","cset"])
      }

   # verify that x2 is a valid keyword
   if not member(keywords, x2.s) then
      yyerror("&" || x2.s ||" is not a valid keyword!")

   return node("keyword",x1,x2)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
initial { set_of_all_fields := set(); dummyrecno := 1 }

   if \iconc then {
      if type(x3) == "token" then {
	 insert(set_of_all_fields, x3.s)
#	 write(&errout, "field ", image(x3.s))
	 }
      }

   return node("field",x1,x2,x3)
end

procedure Clone1stToken(n)
   case type(n) of {
      "token": return copy(n)
      "treenode": {
	 return Clone1stToken(!n.children)
	 }
      }
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
   
   if *\parsingErrors > 0 then {
      every pe := !parsingErrors do {
	 write(&errout, pe.errorMessage)
	 }
      istop(*\parsingErrors || " error" ||
	    (if *\parsingErrors > 1 then "s" else ""))
      }

   if /x1 then istop("error: empty file")

   package_level_syms := set()
   package_level_class_syms := set()
   set_package_level_syms(x1)
   scopecheck_superclass_decs(x1)

   outline := 1
   outcol := 1
   #
   # export specifications for each class
   #
   native := set()
   every cl := classes.foreach_t() do {
      cl.WriteSpec()
      insert(native, cl)
      }
   #
   # import class specifications, transitively
   #
   repeat {
      added := 0
      every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
         if /classes.lookup(super) then {
	    added := 1
	    readspec(super)
	    cl := classes.lookup(super)
	    if /cl then halt("can't inherit class '",super,"'")
	    iwrite("  inherits ", super, " from ", cl.linkfile)
	    writelink(cl.dir, cl.linkfile)
            }
       }
    if added = 0 then break
  }
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
  every (classes.foreach_t()).transitive_closure()
  every (classes.foreach_t()).resolve()

  scopecheck_bodies(x1)

   if \thePackage then {
      every thePackage.insertsym(!package_level_syms)
      }

  if \iconc then  {
     iconc_prep_parse_tree(&null, x1)
     }

  #
  # generate output
  #
#  iwrite("Generating code:")
   yyprint(x1)
   write(yyout)

$ifndef NoPatternIntegration
   # generate invocable declarations for identifiers in unevaluated exprs
   if (*\list_of_invocables)>0 then {
      writes(yyout, "invocable ")
      every temp := list_of_invocables[i := 1 to *list_of_invocables] do {
	 writes(yyout, image(temp))
	 if i < *list_of_invocables then writes(yyout, ",")
         }
      write(yyout)
      }
$endif					# NoPatternIntegration

   if \iconc & (type(set_of_all_fields) == "set") &
	(*set_of_all_fields > 0) then {
	arandomfield := !set_of_all_fields
      writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
      delete(set_of_all_fields, arandomfield)
      every writes(yyout, ",", !set_of_all_fields)
      write(yyout, ")")
      dummyrecno +:= 1
      set_of_all_fields := set()
      }
end
#line 146 "unigram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define iconINITIAL 278
$define INITIALLY 279
$define INVOCABLE 280
$define LINK 281
$define LOCAL 282
$define METHOD 283
$define NEXT 284
$define NOT 285
$define OF 286
$define PACKAGE 287
$define PROCEDURE 288
$define RECORD 289
$define REPEAT 290
$define RETURN 291
$define STATIC 292
$define SUSPEND 293
$define THEN 294
$define THREAD 295
$define TO 296
$define UNTIL 297
$define WHILE 298
$define BANG 299
$define MOD 300
$define AUGMOD 301
$define AND 302
$define AUGAND 303
$define STAR 304
$define AUGSTAR 305
$define INTER 306
$define AUGINTER 307
$define PLUS 308
$define AUGPLUS 309
$define UNION 310
$define AUGUNION 311
$define MINUS 312
$define AUGMINUS 313
$define DIFF 314
$define AUGDIFF 315
$define DOT 316
$define SLASH 317
$define AUGSLASH 318
$define ASSIGN 319
$define SWAP 320
$define NMLT 321
$define AUGNMLT 322
$define REVASSIGN 323
$define REVSWAP 324
$define SLT 325
$define AUGSLT 326
$define SLE 327
$define AUGSLE 328
$define NMLE 329
$define AUGNMLE 330
$define NMEQ 331
$define AUGNMEQ 332
$define SEQ 333
$define AUGSEQ 334
$define EQUIV 335
$define AUGEQUIV 336
$define NMGT 337
$define AUGNMGT 338
$define NMGE 339
$define AUGNMGE 340
$define SGT 341
$define AUGSGT 342
$define SGE 343
$define AUGSGE 344
$define QMARK 345
$define AUGQMARK 346
$define AT 347
$define AUGAT 348
$define BACKSLASH 349
$define CARET 350
$define AUGCARET 351
$define BAR 352
$define CONCAT 353
$define AUGCONCAT 354
$define LCONCAT 355
$define AUGLCONCAT 356
$define TILDE 357
$define NMNE 358
$define AUGNMNE 359
$define SNE 360
$define AUGSNE 361
$define NEQUIV 362
$define AUGNEQUIV 363
$define LPAREN 364
$define RPAREN 365
$define PCOLON 366
$define COMMA 367
$define MCOLON 368
$define COLON 369
$define COLONCOLON 370
$define SEMICOL 371
$define LBRACK 372
$define RBRACK 373
$define LBRACE 374
$define RBRACE 375
$define DOLLAR 376
$define ABSTRACT 377
$define PMATCH 378
$define PAND 379
$define POR 380
$define PUNEVAL 381
$define PASSNONMATCH 382
$define PIMDASSN 383
$define PSETCUR 384
$define SND 385
$define SNDBK 386
$define RCV 387
$define RCVBK 388
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
    2,   11,   11,   11,   16,   16,   10,   10,   17,   20,
   20,   20,   22,   22,   19,   19,   19,   19,    9,   24,
   24,   25,   25,   25,    7,    8,    6,   28,   28,   27,
   27,   26,   26,    5,    3,   30,   30,    4,   23,   23,
   31,   32,   15,   15,   15,   21,   21,   21,   29,   29,
   35,   35,   35,   35,   37,   37,   37,   37,   33,   33,
   34,   34,   38,   38,   38,   38,   38,   38,   38,   38,
   39,   41,   41,   41,   18,   18,   12,   12,   12,   13,
   13,   14,   14,   43,   43,   42,   42,   44,   44,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   45,   45,   46,   46,   46,   46,   47,   47,
   47,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   49,   49,   49,   50,
   50,   50,   50,   50,   50,   50,   51,   51,   51,   51,
   51,   52,   52,   52,   54,   54,   54,   54,   53,   53,
   53,   53,   53,   53,   53,   53,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   56,   58,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   56,   56,   63,   63,   64,   64,
   65,   65,   66,   60,   60,   60,   60,   61,   61,   62,
   69,   69,   71,   71,   67,   67,   70,   70,   40,   40,
   40,   40,   57,   57,   72,   72,   72,   73,   73,   73,
   73,   73,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   75,   75,   76,   76,   76,   59,   77,   77,
   77,   68,   68,    0,    4,   42,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    5,    8,    0,    1,    3,    7,    6,    0,
    3,    3,    3,    2,    0,    2,    2,    2,    2,    1,
    3,    1,    1,    3,    2,    2,    2,    1,    3,    1,
    3,    1,    1,    2,    5,    0,    1,    6,    6,    2,
    5,    5,    0,    1,    3,    0,    1,    3,    1,    3,
    1,    3,    3,    5,    1,    3,    3,    5,    1,    3,
    1,    3,    1,    3,    3,    5,    4,    6,    4,    6,
    2,    0,    1,    1,    0,    4,    0,    4,    4,    0,
    3,    0,    3,    0,    1,    1,    3,    1,    3,    1,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    3,    1,    3,    5,    3,    1,    3,
    3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    3,
    3,    1,    1,    3,    2,    2,    2,    2,    1,    3,
    3,    3,    3,    3,    3,    3,    1,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    1,    0,    4,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    4,    1,    1,    2,    3,    3,
    3,    3,    5,    4,    3,    4,    4,    6,    6,    8,
    8,    3,    1,    3,    2,    2,    2,    4,    2,    4,
    2,    4,    2,    1,    2,    2,    4,    4,    6,    6,
    1,    3,    3,    3,    1,    3,    1,    3,    1,    1,
    1,    1,    1,    0,    1,    2,    3,    1,    2,    2,
    2,    4,    1,    1,    1,    1,    1,    1,    3,    3,
    4,    2,    1,    3,    1,    1,    1,    6,    1,    1,
    1,    1,    3,    3,    4,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    4,    5,    6,    7,    8,    9,
   10,   11,    0,    0,  314,    0,   59,    0,   42,   43,
   40,    0,   32,    0,    0,   30,   38,    0,   35,    0,
    0,    0,   85,    0,   87,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   17,    0,  316,    0,  279,  280,
  281,  282,    0,    0,    0,    0,    0,  264,    0,  237,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  218,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  232,    0,    0,    0,
    0,    0,    0,  253,   98,  217,    0,    0,    0,    0,
    0,  135,    0,    0,    0,    0,  167,    0,  173,  179,
    0,  220,  221,  222,  223,  224,  225,  226,  227,    0,
    0,    0,    0,   60,   41,   34,   31,   39,    0,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  238,    0,    0,    0,    0,    0,  193,
    0,  265,    0,  266,    0,    0,    0,  198,  256,  255,
  201,  204,  200,  212,  206,  199,  197,  202,    0,  207,
  209,  211,  213,  188,  215,  203,  194,  195,  196,  205,
  208,  210,  214,  275,    0,   24,    0,    0,    0,    0,
    0,  271,    0,    0,  216,  189,  190,  191,  192,  315,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   21,   22,   83,   84,    0,    0,   71,
    0,    0,   51,    0,    0,   45,    0,    0,    0,   50,
   28,   27,   16,    0,   26,   87,   23,    0,    0,    0,
    0,    0,    0,    0,  293,  294,  295,  296,  297,  298,
    0,    0,    0,    0,  283,    0,  288,  239,    0,    0,
    0,    0,  242,    0,  241,    0,  240,    0,   93,   99,
  114,  131,  111,  112,  109,  108,  110,  107,  113,  102,
  101,  121,  104,  103,  128,  127,  120,  116,  124,  117,
  119,  118,  126,  125,  130,  132,  115,  105,  106,  122,
  129,  123,    0,    0,  138,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  141,    0,    0,    0,
  140,    0,    0,    0,    0,    0,    0,    0,    0,  171,
  168,  169,  170,  186,  181,  180,  174,  182,  183,  184,
  185,  252,  254,    0,    0,    0,  245,  277,    0,    0,
    0,    0,    0,    0,    0,    0,   19,    0,    0,   81,
    0,    0,    0,   75,   70,   55,    0,    0,   86,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  302,    0,  305,  306,  307,    0,    0,  303,  219,  289,
  290,  291,    0,    0,  286,  276,    0,    0,    0,    0,
  272,  313,    0,  247,  310,  311,  309,    0,  244,    0,
  246,    0,    0,    0,   91,   88,    0,    0,   89,   48,
   72,   58,    0,   77,   79,   62,    0,    0,    0,   87,
   18,    0,    0,    0,  299,    0,    0,  300,  287,    0,
  243,  137,    0,  278,    0,    0,    0,    0,   66,    0,
    0,    0,   76,    0,   52,    0,    0,    0,  270,    0,
  301,  304,  292,  308,    0,    0,  249,  248,    0,   78,
   80,   64,    0,    0,   49,    0,    0,   68,   87,   13,
  251,  250,    0,    0,   14,
  ]
  yydgoto := [                          2,
    3,   14,  158,   16,  159,   18,   19,   20,   21,   22,
  462,  140,  303,  113,  150,   43,   23,   56,  160,   47,
  308,  114,  161,   35,   36,   31,   32,   38,   28,  154,
   24,  162,  151,  309,  318,  115,  445,  152,  310,  116,
  311,  117,  204,  119,  120,  121,  122,  123,  124,  125,
  126,  127,  128,  129,  130,  131,  344,  189,  132,  133,
  134,  135,  136,  137,  138,  139,  205,  214,  211,  439,
  212,  345,  346,  347,  477,  478,  498,
  ]
  yysindex := [                      -216,
    0,    0,  218,  351,    0, -207, -130,  231,  232,  231,
  231,  -80,  -54,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -344, -246,    0, -140,    0, -127,    0,    0,
    0, -112,    0, -104,  -88,    0,    0,  -69,    0,  -74,
  -47,   38,    0,  701,    0, -242,  -36,   77,  231,   83,
  232,  231,   95, -130,    0, -153,    0,   -9,    0,    0,
    0,    0,  701,  701,  701,  833,  701,    0,  701,    0,
  833,  701,  701,  701,  701,  701,  701,  833, -209,  833,
  833,  833,  833,  833,  833,  833,  833,    0,  833,  833,
  833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
  833,  833,  701,  118,  169,  701,    0,  833,  833,  833,
  833,  833,  114,    0,    0,    0,  100,   37,   68, 7964,
 -261,    0,   52,   91, -244,   50,    0, -102,    0,    0,
  -34,    0,    0,    0,    0,    0,    0,    0,    0,   -4,
   70, -140,  -95,    0,    0,    0,    0,    0,   51,   59,
  -71,    0, -127,   90,  176,  225,  204,  -68,  -68,  125,
  -68,  141,  271,    0,  -90,  100, -317, -231, -118,    0,
  100,    0,  -77,    0,  100,  -52,  -39,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -126,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   98,    0,  168,  701, -221,  -92,
  103,    0,  180,  177,    0,    0,    0,    0,    0,    0,
  833,  701,  833,  833,  833,  833,  833,  833,  833,  833,
  833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
  833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
  833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
  833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
  833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
  833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
  833,  833,  833,  833, -223,  701,  701,  435, -206,  701,
  176,  307,  701,    0,    0,    0,    0,  201,  -59,    0,
   95, -181,    0,   95,  195,    0,  252, -167,  208,    0,
    0,    0,    0,  294,    0,    0,    0,  203,  701,  701,
  701,  701,  701,  701,    0,    0,    0,    0,    0,    0,
 -126, -126, -200,  242,    0,  -72,    0,    0,  701,  701,
 -107,  701,    0,  568,    0,  701,    0,   68,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -261,  316,    0,   91,   91,   91,   91,   91,
   91,   91,   91,   91,   91,   91,    0,   91,   91,   91,
    0, -244, -244,   50,   50,   50,   50,   50,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  136, -108,  -49,    0,    0, -145, -290,
  217, -230,  -42,  263,  -23,  312,    0,  -95,  210,    0,
  216,  331,  221,    0,    0,    0,  833,  332,    0,   95,
 -304,  318,   -4,  568,  100,  100, -227,  100,  100,  100,
    0,  226,    0,    0,    0,  251, -229,    0,    0,    0,
    0,    0, -126,  338,    0,    0,  100,  229,  100, -221,
    0,    0,  833,    0,    0,    0,    0,  701,    0,  701,
    0, -194,  701,  701,    0,    0,  833,  341,    0,    0,
    0,    0,  -50,    0,    0,    0,  284,  240,   95,    0,
    0,  701,  -99,  701,    0, -120,  251,    0,    0,  234,
    0,    0, -233,    0,  243,  247,  146,  150,    0,  296,
  363,  248,    0,  833,    0,  257,   -4,  352,    0,  100,
    0,    0,    0,    0,  701,  701,    0,    0,  833,    0,
    0,    0,  254,  701,    0,  158,  167,    0,    0,    0,
    0,    0,   -4,  701,    0,
  ]
  yyrindex := [                       484,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   64,    0,    0,  265,    0, -234,    0,    0,
    0,  617,    0,  -61,  750,    0,    0,  882,    0,    0,
    0,  -40,    0, -247,    0,    0,    0,    0,    0,    0,
    0,    0,  262,  269,    0, -248,    0,  952,    0,    0,
    0,    0, 6826,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 6826, 6826,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  175,    0,   -1,   13,    0,    0, 6943, 7060,
 7177, 7294,    0,    0,    0,    0, 1072,    0, 1192, 6589,
 2512,    0, 6469, 2632, 6112, 5152,    0, 6709,    0,    0,
 5992,    0,    0,    0,    0,    0,    0,    0,    0,  302,
  265,  265, -239,    0,    0,    0,    0,    0,    4,    0,
  276,    0,  277,    0,    0,    0,    0, -248, -248,  -15,
 -248,    0,    0,    0,    0, 1312,    0, 2752,    0,    0,
 1432,    0, 2872,    0, 1552, 2992, 3112,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  293,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
    0,    0,  261,    0,    0,    0,    0,    0,    0,    0,
    0, -247,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 7411, 7528, 7645, 7762,    0,  175,   -1,  278,    0,    0,
    0,    0, -247,    0,    0,    0,    0,    0,  279,    0,
    0,    0,    0,    0,    0,    0,   32,   64,    0,    0,
    0,    0,    0,  371,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  281,    0,    0,    0, -190,    0,    0,  -16,    0,
    0,    0,    0,    0,    0,   13,    0, 1672,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3232, 7876,    0, 3352, 3472, 3592, 3712, 3832,
 3952, 4072, 4192, 4312, 4432, 4552,    0, 4672, 4792, 4912,
    0, 6231, 6350, 5272, 5392, 5512, 5632, 5752, 5872,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    0,    0,   27,    0,    0,    0,  391,    0,    0,
   25,    0,    0,    0,    0,    0,    0,    0,    0,  262,
    0,    0,  302,    0, 1792, 1912, 5032, 2032, 2152, 2272,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -76,    0,    7,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -134,
    0,    0,  175,  175,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   44,    0,  262,    0,
    0, -247,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   29,
    0,    0,    0,    0,    0,    0,  302,    0,    0, 2392,
    0,    0,    0,    0,  175,  175,    0,    0,    0,    0,
    0,    0,    0, -247,    0,    0,    0,    0,    0,    0,
    0,    0,  302, -247,    0,
  ]
  yygindex := [                         0,
  649,    0,  532,    0,  541,    0,    0,    0,    0,    0,
    0, -318, -427, -219, -437, -144,    0,    0,  311,  405,
    0,  607,    0,    0,  605,  283,    0,    0,  604,    0,
    0,  504,    0,    0,  362, -137,    0,  183,  219, -307,
    0,  -63,  -44,  444,  602,  413, -237,    0, 8072,  273,
  170,  133,    0,    0,   71,    0,  328,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -98,  315,  211,    0,
  323, -324,    0,    0,  202,  152,    0,
  ]
$define YYTABLESIZE 8345
  yytable := [                        118,
  165,  166,  359,  168,  454,  169,  210,  463,  171,   44,
  173,  175,  176,  177,  141,  324,  471,   82,  164,  394,
  395,  485,  518,   25,   92,  502,   42,   44,  172,  174,
   25,   44,  407,  432,  257,  522,  411,   44,  330,    1,
   44,  209,   44,  524,   44,   44,   44,  179,   44,   26,
  440,  329,   44,   44,   44,  433,  473,  474,  475,  519,
  256,  213,  535,  277,  180,  278,  520,  279,  221,  280,
  221,  221,  441,  503,  221,  451,   59,   60,   61,   62,
  221,  546,  527,  446,  536,  360,  361,  362,  363,  364,
  365,  366,  367,  368,  369,  370,  371,  372,  373,  374,
  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,
  385,  386,  387,  388,  389,  390,  391,  392,  258,  564,
  452,    7,   25,   94,   45,   56,   27,  104,  155,  156,
  335,  336,  337,  338,  339,   13,   44,  281,  282,  554,
  505,  170,   44,  528,  351,  574,  285,  352,  178,  476,
  181,  182,  183,  184,  185,  186,  187,  188,  529,  190,
  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
  201,  202,  203,  459,  285,  331,   40,  118,  215,  216,
  217,  218,  219,  221,  335,  336,  337,  338,  339,  340,
  453,  527,  332,  221,  221,  328,  287,  434,  436,  458,
   33,  547,   41,  323,   33,  543,    7,   59,   60,   61,
   62,  221,  306,   33,  156,   33,  307,  333,   33,   33,
   13,  500,  341,  157,  221,   33,   33,   33,   46,  501,
  334,  480,   94,  435,   16,  481,  442,  342,   16,   48,
   94,   16,   16,  340,  288,  343,  289,  290,   16,  221,
  573,  541,  551,  438,   49,  532,   15,  495,  118,  496,
  497,  488,  221,   15,   50,  465,  466,  467,  468,  469,
  470,  354,  482,  300,  349,  549,  341,  301,   51,  483,
  353,  295,  291,  292,  293,  294,  487,  302,  489,   53,
  490,  342,   37,   39,  273,  314,  273,   52,  273,  343,
  315,  484,  548,   61,  486,   33,   61,  448,  157,   55,
   61,  213,  449,   61,   61,   63,   54,  349,   63,  516,
   61,  542,   63,  499,  458,   63,   63,  143,  506,  296,
   16,  145,   63,  144,  148,   15,   16,  297,   15,  298,
  146,  299,   15,  508,  570,   15,   15,  509,   94,  283,
   94,  149,   15,  284,  575,  285,   94,  424,  425,  426,
  163,  428,  429,  430,  431,   94,  286,   95,   73,  539,
   73,   94,  259,   95,  206,   73,  260,  274,  261,  274,
  262,  274,  263,   94,  264,  220,  265,   94,  266,   74,
  267,   74,  268,   65,  269,   67,   74,   65,   61,   67,
  490,  221,   61,  270,  537,  538,  562,  222,   61,  271,
   63,  272,  223,  273,   63,  420,  421,  422,  423,  312,
   63,  568,  427,  313,   57,   58,   59,   60,   61,   62,
  274,   63,  317,   64,  533,   65,   66,  207,   46,  163,
   15,   67,   68,  275,   69,  276,  414,  415,  416,  417,
  418,  419,   70,   71,  316,  534,  566,  567,   72,   73,
  550,   74,  348,   75,  349,   76,   77,   78,  321,  322,
   79,  325,   80,  354,   81,  355,   82,  118,   83,    5,
   84,  319,   85,    6,   86,   87,  156,   29,   33,   88,
   30,   34,    7,  450,    8,  323,  455,    9,   10,   89,
  494,   90,  349,   91,   11,   12,   13,  473,  474,  475,
  557,  326,  349,   92,  558,   93,  349,   94,   95,  118,
   96,   97,  571,   98,  349,   99,  100,  327,  101,  118,
  102,  572,  103,  349,   15,   15,  350,  208,  104,   94,
  105,   94,  106,   17,   17,  304,  305,  412,  413,  107,
  356,  357,  108,  109,  110,  111,  112,   90,   90,   90,
   90,   90,   90,  444,   90,  447,   90,  456,   90,   90,
  457,  460,  461,   90,   90,   90,  464,   90,  479,  493,
  504,  507,  512,  510,  513,   90,   90,  514,  517,  521,
  525,   90,   90,  515,   90,  530,   90,  540,   90,   90,
   90,  531,  544,   90,  545,   90,  555,   90,  553,   90,
  556,   90,   25,   90,  559,   90,    6,   90,   90,  560,
  561,  563,   90,  565,  569,    7,   53,    8,   20,  284,
    9,   10,   90,   46,   90,  312,   90,   11,   12,   13,
   54,   47,   12,   57,   94,  284,   90,   82,   90,    4,
   90,   90,  142,   90,   90,  147,   90,  153,   90,   90,
  320,   90,  443,   90,  358,   90,  511,  167,  393,  472,
  492,   90,   90,   90,  523,   90,  491,  526,  552,    0,
    0,    0,   90,    0,    0,   90,   90,   90,   90,   90,
   57,   58,   59,   60,   61,   62,    0,   63,    0,   64,
    0,   65,   66,    0,    0,    0,    0,   67,   68,    0,
   69,    0,    0,    0,    0,    0,    0,    0,   70,   71,
    0,    0,    0,    0,   72,   73,    0,   74,    0,   75,
    0,   76,   77,   78,    0,    0,   79,    0,   80,    0,
   81,    0,   82,    0,   83,    2,   84,    0,   85,    2,
   86,   87,    0,    0,    0,   88,    0,    0,    2,    0,
    2,    0,    0,    2,    2,   89,    0,   90,    0,   91,
    2,    2,    2,    0,    0,    0,    0,    0,    0,   92,
    0,   93,    0,   94,   95,    0,   96,   97,    0,   98,
    0,   99,  100,    0,  101,    0,  102,    0,  103,    0,
    0,    0,    0,    0,  104,    0,  105,    0,  106,  437,
    0,    0,    0,    0,    0,  107,    0,    0,  108,  109,
  110,  111,  112,   57,   58,   59,   60,   61,   62,    0,
   63,    0,   64,    0,   65,   66,  207,    0,    0,    0,
   67,   68,    0,   69,    0,    0,    0,    0,    0,    0,
    0,   70,   71,    0,    0,    0,    0,   72,   73,    0,
   74,    0,   75,    0,   76,   77,   78,    0,    0,   79,
    0,   80,    0,   81,    0,   82,    0,   83,   36,   84,
    0,   85,   36,   86,   87,    0,    0,    0,   88,    0,
    0,   36,    0,   36,    0,    0,   36,   36,   89,    0,
   90,    0,   91,   36,   36,   36,    0,    0,    0,    0,
    0,    0,   92,    0,   93,    0,   94,   95,    0,   96,
   97,    0,   98,    0,   99,  100,    0,  101,    0,  102,
    0,  103,    0,    0,    0,    0,    0,  104,    0,  105,
    0,  106,    0,    0,    0,    0,    0,    0,  107,    0,
    0,  108,  109,  110,  111,  112,   57,   58,   59,   60,
   61,   62,    0,   63,    0,   64,    0,   65,   66,    0,
    0,    0,    0,   67,   68,    0,   69,    0,    0,    0,
    0,    0,    0,    0,   70,   71,    0,    0,    0,    0,
   72,   73,    0,   74,    0,   75,    0,   76,   77,   78,
    0,    0,   79,    0,   80,    0,   81,    0,   82,    0,
   83,   29,   84,    0,   85,   29,   86,   87,    0,    0,
    0,   88,    0,    0,   29,    0,   29,    0,    0,   29,
   29,   89,    0,   90,    0,   91,   29,   29,   29,    0,
    0,    0,    0,    0,    0,   92,    0,   93,    0,   94,
   95,    0,   96,   97,    0,   98,    0,   99,  100,    0,
  101,    0,  102,    0,  103,    0,    0,    0,    0,    0,
  104,    0,  105,    0,  106,    0,    0,    0,    0,    0,
    0,  107,    0,    0,  108,  109,  110,  111,  112,   58,
   59,   60,   61,   62,    0,   63,    0,   64,    0,   65,
   66,    0,    0,    0,    0,   67,   68,    0,   69,    0,
    0,    0,    0,    0,    0,    0,   70,   71,    0,    0,
    0,    0,   72,   73,    0,   74,    0,   75,    0,   76,
   77,   78,    0,    0,   79,    0,   80,    0,   81,    0,
   82,    0,   83,   37,   84,    0,   85,   37,   86,   87,
    0,    0,    0,   88,    0,    0,   37,    0,   37,    0,
    0,   37,   37,   89,    0,   90,    0,   91,   37,   37,
   37,    0,    0,    0,    0,    0,    0,   92,    0,   93,
    0,   94,   95,    0,   96,   97,    0,   98,    0,   99,
  100,    0,  101,    0,  102,    0,  103,    0,    0,    0,
    0,    0,  104,    0,  105,    0,  106,    0,    0,    0,
    0,    0,    0,  107,    0,  236,  108,  109,  110,  111,
  112,  236,  236,  236,    0,    0,  236,    0,    0,    0,
  236,    0,    0,  236,  236,    0,    0,  236,    0,    0,
  236,    0,    0,    0,    0,  236,    0,  236,    0,    0,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,    0,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,    0,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,    0,  236,  236,   95,  236,  236,  236,  236,
    0,   95,   95,   95,    0,    0,   95,    0,    0,    0,
   95,    0,    0,   95,   95,    0,    0,   95,    0,    0,
   95,    0,    0,    0,    0,   95,    0,   95,    0,    0,
   95,   95,   95,    0,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,    0,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,    0,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,    0,   95,   95,   96,   95,   95,   95,   95,
    0,   96,   96,   96,    0,    0,   96,    0,    0,    0,
   96,    0,    0,   96,   96,    0,    0,   96,    0,    0,
   96,    0,    0,    0,    0,   96,    0,   96,    0,    0,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,    0,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,    0,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,    0,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,    0,   96,   96,  233,   96,   96,   96,   96,
    0,  233,  233,  233,    0,    0,  233,    0,    0,    0,
  233,    0,    0,  233,  233,    0,    0,  233,    0,    0,
  233,    0,    0,    0,    0,  233,    0,  233,    0,    0,
  233,  233,  233,    0,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  233,    0,  233,
  233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
  233,    0,  233,  233,  233,  233,  233,  233,  233,  233,
  233,  233,    0,  233,  233,  263,  233,  233,  233,  233,
    0,  263,  263,  263,    0,    0,  263,    0,    0,    0,
  263,    0,    0,  263,  263,    0,    0,  263,    0,    0,
  263,    0,    0,    0,    0,  263,    0,  263,    0,    0,
  263,  263,  263,    0,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,  263,  263,  263,  263,  263,  263,    0,  263,
  263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
  263,    0,  263,  263,  263,  263,  263,  263,  263,  263,
  263,  263,    0,  263,  263,  234,  263,  263,  263,  263,
    0,  234,  234,  234,    0,    0,  234,    0,    0,    0,
  234,    0,    0,  234,  234,    0,    0,  234,    0,    0,
  234,    0,    0,    0,    0,  234,    0,  234,    0,    0,
  234,  234,  234,    0,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,    0,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,    0,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,    0,  234,  234,   97,  234,  234,  234,  234,
    0,   97,   97,   97,    0,    0,   97,    0,    0,    0,
   97,    0,    0,   97,   97,    0,    0,   97,    0,    0,
   97,    0,    0,    0,    0,   97,    0,   97,    0,    0,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,    0,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,    0,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,    0,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,    0,   97,   97,  235,   97,   97,   97,   97,
    0,  235,  235,  235,    0,    0,  235,    0,    0,    0,
  235,    0,    0,  235,  235,    0,    0,  235,    0,    0,
  235,    0,    0,    0,    0,  235,    0,  235,    0,    0,
  235,  235,  235,    0,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,    0,  235,
  235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
  235,    0,  235,  235,  235,  235,  235,  235,  235,  235,
  235,  235,    0,  235,  235,  262,  235,  235,  235,  235,
    0,  262,  262,  262,    0,    0,  262,    0,    0,    0,
  262,    0,    0,  262,  262,    0,    0,  262,    0,    0,
  262,    0,    0,    0,    0,  262,    0,  262,    0,    0,
  262,  262,  262,    0,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,  262,  262,  262,  262,  262,  262,    0,  262,
  262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
  262,    0,  262,  262,  262,  262,  262,  262,  262,  262,
  262,  262,    0,  262,  262,  267,  262,  262,  262,  262,
    0,  267,  267,  267,    0,    0,  267,    0,    0,    0,
  267,    0,    0,  267,  267,    0,    0,  267,    0,    0,
  267,    0,    0,    0,    0,  267,    0,  267,    0,    0,
  267,  267,  267,    0,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,  267,  267,  267,  267,  267,  267,    0,  267,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,    0,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  267,    0,  267,  267,  260,  267,  267,  267,  267,
    0,  260,  260,  260,    0,    0,  260,    0,    0,    0,
  260,    0,    0,  260,  260,    0,    0,  260,    0,    0,
  260,    0,    0,    0,    0,  260,    0,  260,    0,    0,
  260,  260,  260,    0,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,  260,  260,  260,  260,  260,  260,    0,  260,
  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
  260,    0,  260,  260,  260,  260,  260,  260,  260,  260,
  260,  260,    0,  260,  260,  258,  260,  260,  260,  260,
    0,  258,  258,  258,    0,    0,  258,    0,    0,    0,
  258,    0,    0,  258,  258,    0,    0,  258,    0,    0,
  258,    0,    0,    0,    0,  258,    0,  258,    0,    0,
  258,  258,  258,    0,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,  258,  258,  258,  258,  258,  258,    0,  258,
  258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
  258,    0,  258,  258,  258,  258,  258,  258,  258,  258,
  258,  258,    0,  258,  258,  269,  258,  258,  258,  258,
    0,  269,  269,  269,    0,    0,  269,    0,    0,    0,
  269,    0,    0,  269,  269,    0,    0,  269,    0,    0,
  269,    0,    0,    0,    0,  269,    0,  269,    0,    0,
  269,  269,  269,    0,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,  269,  269,  269,  269,  269,  269,    0,  269,
  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
  269,    0,  269,  269,  269,  269,  269,  269,  269,  269,
  269,  269,    0,  269,  269,  133,  269,  269,  269,  269,
    0,  133,  133,  133,    0,    0,  133,    0,    0,    0,
  133,    0,    0,  133,  133,    0,    0,  133,    0,    0,
  133,    0,    0,    0,    0,  133,    0,    0,    0,    0,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,  133,  133,  133,  133,  133,  133,  133,    0,  133,
  133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
  133,    0,  133,  133,  133,  133,  133,  133,  133,  133,
  133,    0,    0,  133,  133,  142,  133,  133,  133,  133,
    0,  142,  142,  142,    0,    0,  142,    0,    0,    0,
  142,    0,    0,  142,  142,    0,    0,  142,    0,    0,
  142,    0,    0,    0,    0,  142,    0,  142,    0,    0,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,  142,  142,    0,  142,    0,  142,    0,  142,
  142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
  142,    0,  142,  142,  142,  142,  142,  142,  142,  142,
  142,  142,    0,  142,  142,  261,  142,  142,  142,  142,
    0,    0,  261,  261,    0,    0,  261,    0,    0,    0,
  261,    0,    0,  261,  261,    0,    0,  261,    0,    0,
  261,    0,    0,    0,    0,  261,    0,  261,    0,    0,
  261,  261,  261,    0,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,  261,  261,  261,  261,  261,  261,    0,  261,
  261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
  261,    0,  261,  261,  261,  261,  261,  261,  261,  261,
  261,  261,    0,  261,  261,   95,  261,  261,  261,  261,
    0,    0,   95,   95,    0,    0,   95,    0,    0,    0,
   95,    0,    0,   95,   95,    0,    0,   95,    0,    0,
   95,    0,    0,    0,    0,   95,    0,   95,    0,    0,
   95,   95,   95,    0,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,    0,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,    0,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,    0,   95,   95,  259,   95,   95,   95,   95,
    0,    0,  259,  259,    0,    0,  259,    0,    0,    0,
  259,    0,    0,  259,  259,    0,    0,  259,    0,    0,
  259,    0,    0,    0,    0,  259,    0,  259,    0,    0,
  259,  259,  259,    0,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  259,  259,  259,  259,  259,    0,  259,
  259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
  259,    0,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  259,    0,  259,  259,  257,  259,  259,  259,  259,
    0,    0,  257,  257,    0,    0,  257,    0,    0,    0,
  257,    0,    0,  257,  257,    0,    0,  257,    0,    0,
  257,    0,    0,    0,    0,  257,    0,  257,    0,    0,
  257,  257,  257,    0,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,    0,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,    0,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,    0,  257,  257,  134,  257,  257,  257,  257,
    0,  134,  134,  134,    0,    0,  134,    0,    0,    0,
  134,    0,    0,  134,  134,    0,    0,  134,    0,    0,
  134,    0,    0,    0,    0,  134,    0,    0,    0,    0,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,    0,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,    0,  134,  134,  134,  134,  134,  134,  134,  134,
  134,    0,    0,  134,  134,  153,  134,  134,  134,  134,
    0,  153,  153,  153,    0,    0,  153,    0,    0,    0,
  153,    0,    0,  153,  153,    0,    0,  153,    0,    0,
  153,    0,    0,    0,    0,  153,    0,  153,    0,    0,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,    0,  153,    0,  153,    0,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,    0,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,    0,  153,  153,  147,  153,  153,  153,  153,
    0,  147,  147,  147,    0,    0,  147,    0,    0,    0,
  147,    0,    0,  147,  147,    0,    0,  147,    0,    0,
  147,    0,    0,    0,    0,  147,    0,  147,    0,    0,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,    0,  147,    0,  147,    0,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,    0,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,    0,  147,  147,  146,  147,  147,  147,  147,
    0,  146,  146,  146,    0,    0,  146,    0,    0,    0,
  146,    0,    0,  146,  146,    0,    0,  146,    0,    0,
  146,    0,    0,    0,    0,  146,    0,  146,    0,    0,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,    0,  146,    0,  146,    0,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,    0,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,    0,  146,  146,  152,  146,  146,  146,  146,
    0,  152,  152,  152,    0,    0,  152,    0,    0,    0,
  152,    0,    0,  152,  152,    0,    0,  152,    0,    0,
  152,    0,    0,    0,    0,  152,    0,  152,    0,    0,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,    0,  152,    0,  152,    0,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,    0,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,    0,  152,  152,  149,  152,  152,  152,  152,
    0,  149,  149,  149,    0,    0,  149,    0,    0,    0,
  149,    0,    0,  149,  149,    0,    0,  149,    0,    0,
  149,    0,    0,    0,    0,  149,    0,  149,    0,    0,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,    0,  149,    0,  149,    0,  149,
  149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  149,    0,  149,  149,  149,  149,  149,  149,  149,  149,
  149,  149,    0,  149,  149,  143,  149,  149,  149,  149,
    0,  143,  143,  143,    0,    0,  143,    0,    0,    0,
  143,    0,    0,  143,  143,    0,    0,  143,    0,    0,
  143,    0,    0,    0,    0,  143,    0,  143,    0,    0,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,    0,  143,    0,  143,    0,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,    0,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,    0,  143,  143,  155,  143,  143,  143,  143,
    0,  155,  155,  155,    0,    0,  155,    0,    0,    0,
  155,    0,    0,  155,  155,    0,    0,  155,    0,    0,
  155,    0,    0,    0,    0,  155,    0,  155,    0,    0,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,    0,  155,    0,  155,    0,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,    0,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,    0,  155,  155,  151,  155,  155,  155,  155,
    0,  151,  151,  151,    0,    0,  151,    0,    0,    0,
  151,    0,    0,  151,  151,    0,    0,  151,    0,    0,
  151,    0,    0,    0,    0,  151,    0,  151,    0,    0,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,    0,  151,    0,  151,    0,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,    0,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,    0,  151,  151,  150,  151,  151,  151,  151,
    0,  150,  150,  150,    0,    0,  150,    0,    0,    0,
  150,    0,    0,  150,  150,    0,    0,  150,    0,    0,
  150,    0,    0,    0,    0,  150,    0,  150,    0,    0,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,    0,  150,    0,  150,    0,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,    0,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,    0,  150,  150,  145,  150,  150,  150,  150,
    0,  145,  145,  145,    0,    0,  145,    0,    0,    0,
  145,    0,    0,  145,  145,    0,    0,  145,    0,    0,
  145,    0,    0,    0,    0,  145,    0,  145,    0,    0,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,    0,  145,    0,  145,    0,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,    0,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,    0,  145,  145,  144,  145,  145,  145,  145,
    0,  144,  144,  144,    0,    0,  144,    0,    0,    0,
  144,    0,    0,  144,  144,    0,    0,  144,    0,    0,
  144,    0,    0,    0,    0,  144,    0,  144,    0,    0,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,    0,  144,    0,  144,    0,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,    0,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,    0,  144,  144,  154,  144,  144,  144,  144,
    0,  154,  154,  154,    0,    0,  154,    0,    0,    0,
  154,    0,    0,  154,  154,    0,    0,  154,    0,    0,
  154,    0,    0,    0,    0,  154,    0,  154,    0,    0,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,    0,  154,    0,  154,    0,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,    0,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,    0,  154,  154,  148,  154,  154,  154,  154,
    0,  148,  148,  148,    0,    0,  148,    0,    0,    0,
  148,    0,    0,  148,  148,    0,    0,  148,    0,    0,
  148,    0,    0,    0,    0,  148,    0,  148,    0,    0,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,    0,  148,    0,  148,    0,  148,
  148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,    0,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,    0,  148,  148,  156,  148,  148,  148,  148,
    0,  156,  156,  156,    0,    0,  156,    0,    0,    0,
  156,    0,    0,  156,  156,    0,    0,  156,    0,    0,
  156,    0,    0,    0,    0,  156,    0,  156,    0,    0,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,    0,  156,    0,  156,    0,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,    0,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,    0,  156,  156,  268,  156,  156,  156,  156,
    0,  268,    0,  268,    0,    0,  268,    0,    0,    0,
  268,    0,    0,  268,  268,    0,    0,  268,    0,    0,
  268,    0,    0,    0,    0,  268,    0,  268,    0,    0,
  268,  268,  268,    0,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,  268,  268,  268,  268,  268,  268,    0,  268,
  268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
  268,    0,  268,  268,  268,  268,  268,  268,  268,  268,
  268,  268,    0,  268,  268,  160,  268,  268,  268,  268,
    0,  160,  160,  160,    0,    0,  160,    0,    0,    0,
  160,    0,    0,  160,  160,    0,    0,  160,    0,    0,
  160,    0,    0,    0,    0,  160,    0,  160,    0,    0,
  160,    0,  160,  160,  160,    0,  160,    0,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,    0,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,    0,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
  160,    0,  160,  160,  160,  160,  160,  160,  160,  160,
  160,  160,    0,  160,  160,  163,  160,  160,  160,  160,
    0,  163,  163,  163,    0,    0,  163,    0,    0,    0,
  163,    0,    0,  163,  163,    0,    0,  163,    0,    0,
  163,    0,    0,    0,    0,  163,    0,  163,    0,    0,
  163,    0,  163,  163,  163,    0,  163,    0,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,    0,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  163,    0,  163,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,    0,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  163,    0,  163,  163,  165,  163,  163,  163,  163,
    0,  165,  165,  165,    0,    0,  165,    0,    0,    0,
  165,    0,    0,  165,  165,    0,    0,  165,    0,    0,
  165,    0,    0,    0,    0,  165,    0,  165,    0,    0,
  165,    0,  165,  165,  165,    0,  165,    0,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,    0,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,    0,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,    0,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,    0,  165,  165,  166,  165,  165,  165,  165,
    0,  166,  166,  166,    0,    0,  166,    0,    0,    0,
  166,    0,    0,  166,  166,    0,    0,  166,    0,    0,
  166,    0,    0,    0,    0,  166,    0,  166,    0,    0,
  166,    0,  166,  166,  166,    0,  166,    0,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,    0,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,    0,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,    0,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,    0,  166,  166,  164,  166,  166,  166,  166,
    0,  164,  164,  164,    0,    0,  164,    0,    0,    0,
  164,    0,    0,  164,  164,    0,    0,  164,    0,    0,
  164,    0,    0,    0,    0,  164,    0,  164,    0,    0,
  164,    0,  164,  164,  164,    0,  164,    0,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,    0,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,    0,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,    0,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,    0,  164,  164,  162,  164,  164,  164,  164,
    0,  162,  162,  162,    0,    0,  162,    0,    0,    0,
  162,    0,    0,  162,  162,    0,    0,  162,    0,    0,
  162,    0,    0,    0,    0,  162,    0,  162,    0,    0,
  162,    0,  162,  162,  162,    0,  162,    0,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,    0,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  162,  162,    0,  162,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,    0,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,    0,  162,  162,  161,  162,  162,  162,  162,
    0,  161,  161,  161,    0,    0,  161,    0,    0,    0,
  161,    0,    0,  161,  161,    0,    0,  161,    0,    0,
  161,    0,    0,    0,    0,  161,    0,  161,    0,    0,
  161,    0,  161,  161,  161,    0,  161,    0,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,    0,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,    0,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,    0,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,    0,  161,  161,  187,  161,  161,  161,  161,
    0,  187,  187,  187,    0,    0,  187,    0,    0,    0,
  187,    0,    0,  187,  187,    0,    0,  187,    0,    0,
  187,    0,    0,    0,    0,  187,    0,  187,    0,    0,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,    0,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,    0,  187,
  187,  187,  187,  187,  187,    0,  187,  187,  187,  187,
  187,    0,  187,    0,  187,    0,  187,    0,  187,  187,
  187,  187,    0,  187,  187,  157,  187,  187,  187,  187,
    0,  157,  157,  157,    0,    0,  157,    0,    0,    0,
  157,    0,    0,  157,  157,    0,    0,  157,    0,    0,
  157,    0,    0,    0,    0,  157,    0,  157,    0,    0,
  157,  157,  157,  157,  157,  157,  157,  157,  157,    0,
  157,    0,  157,    0,  157,    0,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,    0,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,    0,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,    0,    0,  158,    0,  157,  157,  157,  157,
  158,  158,  158,    0,    0,  158,    0,    0,    0,  158,
    0,    0,  158,  158,    0,    0,  158,    0,    0,  158,
    0,    0,    0,    0,  158,    0,  158,    0,    0,  158,
  158,  158,  158,  158,  158,  158,  158,  158,    0,  158,
    0,  158,    0,  158,    0,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,    0,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
    0,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,    0,    0,  159,    0,  158,  158,  158,  158,  159,
  159,  159,    0,    0,  159,    0,    0,    0,  159,    0,
    0,  159,  159,    0,    0,  159,    0,    0,  159,    0,
    0,    0,    0,  159,    0,  159,    0,    0,  159,  159,
  159,  159,  159,  159,  159,  159,  159,    0,  159,    0,
  159,    0,  159,    0,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
  159,  159,  159,  159,  159,  159,    0,  159,  159,  159,
  159,  159,  159,  159,  159,  159,  159,  159,  159,    0,
  159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
    0,    0,  139,    0,  159,  159,  159,  159,  139,  139,
  139,    0,    0,  139,    0,    0,    0,  139,    0,    0,
  139,  139,    0,    0,  139,    0,    0,  139,    0,    0,
    0,    0,  139,    0,  139,    0,    0,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,  139,  139,  139,  139,  139,    0,
  139,  139,  139,    0,  139,    0,  139,    0,  139,    0,
  139,    0,  139,    0,  139,    0,  139,    0,  139,    0,
  139,    0,  139,  139,  139,  139,  139,  139,  139,  139,
    0,  139,  139,  139,  139,    0,    0,  139,    0,  139,
    0,  139,  139,  139,  139,  139,  139,  139,    0,  139,
  139,  139,  139,  139,  139,  139,  139,    0,  139,    0,
  139,  139,  100,  139,  139,  139,  139,    0,  100,  100,
  100,    0,    0,  100,    0,    0,    0,  100,    0,    0,
  100,  100,    0,    0,  100,    0,    0,  100,    0,    0,
    0,    0,  100,    0,  100,    0,    0,  100,  100,    0,
  100,    0,  100,    0,  100,    0,  100,    0,  100,    0,
  100,    0,  100,    0,  100,  100,    0,    0,    0,  100,
    0,    0,    0,  100,    0,  100,    0,  100,    0,  100,
    0,  100,    0,  100,    0,  100,    0,  100,    0,  100,
    0,  100,    0,  100,    0,  100,    0,  100,  100,    0,
  100,  100,    0,  100,    0,    0,  100,    0,  100,    0,
  100,    0,  100,  100,  100,  100,  100,  100,    0,  100,
  100,  100,  100,  100,  100,  100,    0,  100,  100,    0,
  100,  100,  172,  100,  100,  100,  100,    0,  172,  172,
  172,    0,    0,  172,    0,    0,    0,  172,    0,    0,
  172,  172,    0,    0,  172,    0,    0,  172,    0,    0,
    0,    0,  172,    0,  172,    0,    0,    0,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,    0,  172,    0,    0,  172,
  172,  172,  172,  172,  172,    0,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,    0,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,   94,
  172,  172,    0,    0,    0,   94,   94,   94,    0,    0,
   94,    0,    0,    0,   94,    0,    0,   94,   94,    0,
    0,   94,    0,    0,   94,    0,    0,    0,    0,   94,
    0,   94,    0,    0,    0,   94,   94,    0,   94,    0,
   94,    0,   94,    0,   94,    0,   94,    0,   94,    0,
   94,    0,    0,   94,   94,   94,    0,   94,   94,   94,
   94,   94,   94,   94,   94,   94,    0,   94,    0,   94,
    0,   94,   94,   94,   94,   94,   94,   94,   94,   94,
    0,   94,    0,   94,    0,    0,   94,    0,    0,   94,
    0,   94,    0,    0,   94,    0,   94,    0,   94,    0,
   94,   94,   94,   94,   94,    0,   94,    0,   94,    0,
   94,   94,   94,   94,   94,   94,  228,   94,   94,    0,
    0,    0,  228,  228,  228,    0,    0,  228,    0,    0,
    0,  228,    0,    0,  228,  228,    0,    0,  228,    0,
    0,  228,    0,    0,    0,    0,  228,    0,  228,    0,
    0,    0,  228,  228,    0,  228,    0,  228,    0,  228,
    0,  228,    0,  228,    0,  228,    0,  228,    0,    0,
  228,  228,  228,    0,  228,  228,  228,  228,  228,  228,
  228,  228,  228,    0,  228,    0,  228,    0,  228,  228,
  228,  228,  228,  228,  228,  228,  228,    0,  228,    0,
  228,    0,    0,  228,    0,    0,  228,    0,  228,    0,
    0,  228,    0,  228,    0,  228,    0,  228,  228,  228,
  228,  228,    0,  228,    0,  228,    0,  228,  228,  228,
  228,  228,  228,  229,  228,  228,    0,    0,    0,  229,
  229,  229,    0,    0,  229,    0,    0,    0,  229,    0,
    0,  229,  229,    0,    0,  229,    0,    0,  229,    0,
    0,    0,    0,  229,    0,  229,    0,    0,    0,  229,
  229,    0,  229,    0,  229,    0,  229,    0,  229,    0,
  229,    0,  229,    0,  229,    0,    0,  229,  229,  229,
    0,  229,  229,  229,  229,  229,  229,  229,  229,  229,
    0,  229,    0,  229,    0,  229,  229,  229,  229,  229,
  229,  229,  229,  229,    0,  229,    0,  229,    0,    0,
  229,    0,    0,  229,    0,  229,    0,    0,  229,    0,
  229,    0,  229,    0,  229,  229,  229,  229,  229,    0,
  229,    0,  229,    0,  229,  229,  229,  229,  229,  229,
  230,  229,  229,    0,    0,    0,  230,  230,  230,    0,
    0,  230,    0,    0,    0,  230,    0,    0,  230,  230,
    0,    0,  230,    0,    0,  230,    0,    0,    0,    0,
  230,    0,  230,    0,    0,    0,  230,  230,    0,  230,
    0,  230,    0,  230,    0,  230,    0,  230,    0,  230,
    0,  230,    0,    0,  230,  230,  230,    0,  230,  230,
  230,  230,  230,  230,  230,  230,  230,    0,  230,    0,
  230,    0,  230,  230,  230,  230,  230,  230,  230,  230,
  230,    0,  230,    0,  230,    0,    0,  230,    0,    0,
  230,    0,  230,    0,    0,  230,    0,  230,    0,  230,
    0,  230,  230,  230,  230,  230,    0,  230,    0,  230,
    0,  230,  230,  230,  230,  230,  230,  231,  230,  230,
    0,    0,    0,  231,  231,  231,    0,    0,  231,    0,
    0,    0,  231,    0,    0,  231,  231,    0,    0,  231,
    0,    0,  231,    0,    0,    0,    0,  231,    0,  231,
    0,    0,    0,  231,  231,    0,  231,    0,  231,    0,
  231,    0,  231,    0,  231,    0,  231,    0,  231,    0,
    0,  231,  231,  231,    0,  231,  231,  231,  231,  231,
  231,  231,  231,  231,    0,  231,    0,  231,    0,  231,
  231,  231,  231,  231,  231,  231,  231,  231,    0,  231,
    0,  231,    0,    0,  231,    0,    0,  231,    0,  231,
    0,    0,  231,    0,  231,    0,  231,    0,  231,  231,
  231,  231,  231,    0,  231,    0,  231,    0,  231,  231,
  231,  231,  231,  231,  175,  231,  231,    0,    0,    0,
  175,  175,  175,    0,    0,  175,    0,    0,    0,  175,
    0,    0,  175,  175,    0,    0,  175,    0,    0,  175,
    0,    0,    0,    0,  175,    0,  175,    0,    0,    0,
  175,  175,    0,  175,    0,  175,    0,  175,    0,  175,
    0,  175,    0,  175,    0,  175,    0,    0,  175,  175,
  175,    0,  175,  175,  175,  175,  175,  175,  175,  175,
  175,    0,  175,    0,  175,    0,  175,  175,  175,  175,
  175,  175,  175,  175,  175,    0,  175,    0,  175,    0,
    0,  175,    0,    0,  175,    0,  175,    0,    0,  175,
    0,  175,    0,  175,    0,  175,  175,  175,  175,  175,
    0,  175,    0,  175,    0,  175,  175,  175,  175,  175,
  175,  176,  175,  175,    0,    0,    0,  176,  176,  176,
    0,    0,  176,    0,    0,    0,  176,    0,    0,  176,
  176,    0,    0,  176,    0,    0,  176,    0,    0,    0,
    0,  176,    0,  176,    0,    0,    0,  176,  176,    0,
  176,    0,  176,    0,  176,    0,  176,    0,  176,    0,
  176,    0,  176,    0,    0,  176,  176,  176,    0,  176,
  176,  176,  176,  176,  176,  176,  176,  176,    0,  176,
    0,  176,    0,  176,  176,  176,  176,  176,  176,  176,
  176,  176,    0,  176,    0,  176,    0,    0,  176,    0,
    0,  176,    0,  176,    0,    0,  176,    0,  176,    0,
  176,    0,  176,  176,  176,  176,  176,    0,  176,    0,
  176,    0,  176,  176,  176,  176,  176,  176,  177,  176,
  176,    0,    0,    0,  177,  177,  177,    0,    0,  177,
    0,    0,    0,  177,    0,    0,  177,  177,    0,    0,
  177,    0,    0,  177,    0,    0,    0,    0,  177,    0,
  177,    0,    0,    0,  177,  177,    0,  177,    0,  177,
    0,  177,    0,  177,    0,  177,    0,  177,    0,  177,
    0,    0,  177,  177,  177,    0,  177,  177,  177,  177,
  177,  177,  177,  177,  177,    0,  177,    0,  177,    0,
  177,  177,  177,  177,  177,  177,  177,  177,  177,    0,
  177,    0,  177,    0,    0,  177,    0,    0,  177,    0,
  177,    0,    0,  177,    0,  177,    0,  177,    0,  177,
  177,  177,  177,  177,    0,  177,    0,  177,    0,  177,
  177,  177,  177,  177,  177,  178,  177,  177,    0,    0,
    0,  178,  178,  178,    0,    0,  178,    0,    0,    0,
  178,    0,    0,  178,  178,    0,    0,  178,    0,    0,
  178,    0,    0,    0,    0,  178,    0,  178,    0,    0,
    0,  178,  178,    0,  178,    0,  178,    0,  178,    0,
  178,    0,  178,    0,  178,    0,  178,    0,    0,  178,
  178,  178,    0,  178,  178,  178,  178,  178,  178,  178,
  178,  178,    0,  178,    0,  178,    0,  178,  178,  178,
  178,  178,  178,  178,  178,  178,    0,  178,    0,  178,
    0,    0,  178,    0,    0,  178,    0,  178,    0,    0,
  178,    0,  178,    0,  178,    0,  178,  178,  178,  178,
  178,    0,  178,    0,  178,    0,  178,  178,  178,  178,
  178,  178,    0,  178,  178,  136,  136,  136,    0,    0,
  136,    0,    0,    0,  136,    0,    0,  136,  136,    0,
    0,  136,    0,    0,  136,    0,    0,    0,    0,  136,
    0,  136,    0,    0,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
  136,  136,    0,  136,  136,  136,  136,  136,  136,  136,
  136,  136,  136,  136,  136,    0,  136,  136,  136,  136,
  136,  136,  136,  136,  136,  136,    0,  136,  136,    0,
  136,  136,  136,  136,  224,    0,  225,    0,  226,    0,
  227,    0,  228,    0,  229,    0,  230,    0,  231,    0,
    0,  232,  233,  234,    0,  235,  236,  237,    0,  238,
    0,  239,    0,  240,    0,  241,    0,  242,    0,  243,
    0,  244,    0,  245,    0,  246,    0,  247,    0,  248,
    0,  249,    0,    0,  250,    0,    0,  251,    0,  252,
    0,    0,  253,    0,  254,    0,  255,    0,    0,    0,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  256,  408,  409,  410,
  ]
  yycheck := [                         44,
   64,   65,  222,   67,  312,   69,  105,  326,   72,  256,
   74,   75,   76,   77,  257,  160,  341,  257,   63,  257,
  258,  346,  460,  272,  272,  316,  371,  262,   73,   74,
  279,  266,  270,  257,  296,  463,  274,  272,  270,  256,
  275,  105,  277,  271,  279,  280,  281,  257,  283,  257,
  257,  369,  287,  288,  289,  279,  257,  258,  259,  364,
  378,  106,  257,  308,  274,  310,  371,  312,  302,  314,
  302,  302,  279,  364,  302,  257,  258,  259,  260,  261,
  302,  519,  312,  303,  279,  223,  224,  225,  226,  227,
  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
  248,  249,  250,  251,  252,  253,  254,  255,  380,  547,
  302,  275,  371,  371,  371,  365,  257,  370,  282,  283,
  257,  258,  259,  260,  261,  289,  371,  382,  383,  373,
  371,   71,  377,  373,  208,  573,  337,  369,   78,  350,
   80,   81,   82,   83,   84,   85,   86,   87,  483,   89,
   90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
  100,  101,  102,  318,  365,  294,  257,  222,  108,  109,
  110,  111,  112,  302,  257,  258,  259,  260,  261,  316,
  372,  312,  270,  302,  302,  286,  299,  296,  297,  367,
  262,  520,  257,  371,  266,  513,  275,  258,  259,  260,
  261,  302,  308,  275,  283,  277,  312,  270,  280,  281,
  289,  367,  349,  377,  302,  287,  288,  289,  369,  375,
  270,  304,  367,  297,  275,  308,  300,  364,  279,  367,
  375,  282,  283,  316,  347,  372,  349,  350,  289,  302,
  569,  302,  373,  298,  367,  493,  272,  366,  303,  368,
  369,  369,  302,  279,  369,  329,  330,  331,  332,  333,
  334,  371,  345,  278,  367,  375,  349,  282,  367,  352,
  373,  316,  385,  386,  387,  388,  350,  292,  352,  364,
  354,  364,   10,   11,  371,  367,  373,  367,  375,  372,
  372,  374,  522,  272,  349,  367,  275,  367,  377,  272,
  279,  356,  372,  282,  283,  272,  364,  367,  275,  457,
  289,  372,  279,  373,  367,  282,  283,  364,  371,  364,
  371,   49,  289,  257,   52,  272,  377,  372,  275,  374,
  258,  376,  279,  367,  564,  282,  283,  371,  365,  300,
  367,  257,  289,  304,  574,  306,  373,  287,  288,  289,
  370,  291,  292,  293,  294,  367,  317,  367,  365,  507,
  367,  373,  321,  373,  257,  372,  325,  371,  327,  373,
  329,  375,  331,  371,  333,  272,  335,  375,  337,  365,
  339,  367,  341,  367,  343,  367,  372,  371,  367,  371,
  464,  302,  371,  352,  503,  504,  544,  371,  377,  358,
  367,  360,  345,  362,  371,  283,  284,  285,  286,  369,
  377,  559,  290,  365,  256,  257,  258,  259,  260,  261,
  379,  263,  257,  265,  498,  267,  268,  269,  369,  370,
  377,  273,  274,  353,  276,  355,  277,  278,  279,  280,
  281,  282,  284,  285,  365,  500,  555,  556,  290,  291,
  524,  293,  365,  295,  367,  297,  298,  299,  158,  159,
  302,  161,  304,  371,  306,  373,  308,  522,  310,  262,
  312,  257,  314,  266,  316,  317,  283,  257,  257,  321,
  260,  260,  275,  311,  277,  371,  314,  280,  281,  331,
  365,  333,  367,  335,  287,  288,  289,  257,  258,  259,
  365,  371,  367,  345,  365,  347,  367,  349,  350,  564,
  352,  353,  365,  355,  367,  357,  358,  257,  360,  574,
  362,  365,  364,  367,    3,    4,  369,  369,  370,  365,
  372,  367,  374,    3,    4,  141,  142,  275,  276,  381,
  371,  375,  384,  385,  386,  387,  388,  256,  257,  258,
  259,  260,  261,  257,  263,  365,  265,  373,  267,  268,
  319,  364,  279,  272,  273,  274,  374,  276,  337,  264,
  364,  319,  373,  272,  369,  284,  285,  257,  257,  272,
  365,  290,  291,  373,  293,  258,  295,  257,  297,  298,
  299,  373,  319,  302,  365,  304,  364,  306,  375,  308,
  364,  310,  262,  312,  319,  314,  266,  316,  317,  257,
  373,  365,  321,  272,  371,  275,  365,  277,  364,  337,
  280,  281,  331,  365,  333,  375,  335,  287,  288,  289,
  365,  365,  272,  365,  367,  365,  345,  257,  347,    1,
  349,  350,   46,  352,  353,   51,  355,   54,  357,  358,
  157,  360,  301,  362,  221,  364,  448,   66,  256,  342,
  356,  370,  371,  372,  464,  374,  354,  476,  527,   -1,
   -1,   -1,  381,   -1,   -1,  384,  385,  386,  387,  388,
  256,  257,  258,  259,  260,  261,   -1,  263,   -1,  265,
   -1,  267,  268,   -1,   -1,   -1,   -1,  273,  274,   -1,
  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,  285,
   -1,   -1,   -1,   -1,  290,  291,   -1,  293,   -1,  295,
   -1,  297,  298,  299,   -1,   -1,  302,   -1,  304,   -1,
  306,   -1,  308,   -1,  310,  262,  312,   -1,  314,  266,
  316,  317,   -1,   -1,   -1,  321,   -1,   -1,  275,   -1,
  277,   -1,   -1,  280,  281,  331,   -1,  333,   -1,  335,
  287,  288,  289,   -1,   -1,   -1,   -1,   -1,   -1,  345,
   -1,  347,   -1,  349,  350,   -1,  352,  353,   -1,  355,
   -1,  357,  358,   -1,  360,   -1,  362,   -1,  364,   -1,
   -1,   -1,   -1,   -1,  370,   -1,  372,   -1,  374,  375,
   -1,   -1,   -1,   -1,   -1,  381,   -1,   -1,  384,  385,
  386,  387,  388,  256,  257,  258,  259,  260,  261,   -1,
  263,   -1,  265,   -1,  267,  268,  269,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,   -1,  290,  291,   -1,
  293,   -1,  295,   -1,  297,  298,  299,   -1,   -1,  302,
   -1,  304,   -1,  306,   -1,  308,   -1,  310,  262,  312,
   -1,  314,  266,  316,  317,   -1,   -1,   -1,  321,   -1,
   -1,  275,   -1,  277,   -1,   -1,  280,  281,  331,   -1,
  333,   -1,  335,  287,  288,  289,   -1,   -1,   -1,   -1,
   -1,   -1,  345,   -1,  347,   -1,  349,  350,   -1,  352,
  353,   -1,  355,   -1,  357,  358,   -1,  360,   -1,  362,
   -1,  364,   -1,   -1,   -1,   -1,   -1,  370,   -1,  372,
   -1,  374,   -1,   -1,   -1,   -1,   -1,   -1,  381,   -1,
   -1,  384,  385,  386,  387,  388,  256,  257,  258,  259,
  260,  261,   -1,  263,   -1,  265,   -1,  267,  268,   -1,
   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,
  290,  291,   -1,  293,   -1,  295,   -1,  297,  298,  299,
   -1,   -1,  302,   -1,  304,   -1,  306,   -1,  308,   -1,
  310,  262,  312,   -1,  314,  266,  316,  317,   -1,   -1,
   -1,  321,   -1,   -1,  275,   -1,  277,   -1,   -1,  280,
  281,  331,   -1,  333,   -1,  335,  287,  288,  289,   -1,
   -1,   -1,   -1,   -1,   -1,  345,   -1,  347,   -1,  349,
  350,   -1,  352,  353,   -1,  355,   -1,  357,  358,   -1,
  360,   -1,  362,   -1,  364,   -1,   -1,   -1,   -1,   -1,
  370,   -1,  372,   -1,  374,   -1,   -1,   -1,   -1,   -1,
   -1,  381,   -1,   -1,  384,  385,  386,  387,  388,  257,
  258,  259,  260,  261,   -1,  263,   -1,  265,   -1,  267,
  268,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,  285,   -1,   -1,
   -1,   -1,  290,  291,   -1,  293,   -1,  295,   -1,  297,
  298,  299,   -1,   -1,  302,   -1,  304,   -1,  306,   -1,
  308,   -1,  310,  262,  312,   -1,  314,  266,  316,  317,
   -1,   -1,   -1,  321,   -1,   -1,  275,   -1,  277,   -1,
   -1,  280,  281,  331,   -1,  333,   -1,  335,  287,  288,
  289,   -1,   -1,   -1,   -1,   -1,   -1,  345,   -1,  347,
   -1,  349,  350,   -1,  352,  353,   -1,  355,   -1,  357,
  358,   -1,  360,   -1,  362,   -1,  364,   -1,   -1,   -1,
   -1,   -1,  370,   -1,  372,   -1,  374,   -1,   -1,   -1,
   -1,   -1,   -1,  381,   -1,  264,  384,  385,  386,  387,
  388,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,   -1,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,   -1,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,   -1,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,   -1,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,   -1,  354,   -1,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,   -1,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,  305,   -1,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,  305,   -1,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,  305,   -1,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,  305,   -1,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,  305,   -1,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,  305,   -1,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,   -1,  301,  302,  303,   -1,  305,   -1,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,   -1,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,   -1,  365,  366,  367,  368,
  369,   -1,  371,   -1,  373,   -1,  375,   -1,  377,  378,
  379,  380,   -1,  382,  383,  264,  385,  386,  387,  388,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  309,   -1,  311,   -1,  313,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,  358,
  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
  369,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,   -1,  264,   -1,  385,  386,  387,  388,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,  358,  359,
  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,
   -1,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  380,   -1,   -1,  264,   -1,  385,  386,  387,  388,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,  309,   -1,
  311,   -1,  313,   -1,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,  358,  359,  360,
  361,  362,  363,  364,  365,  366,  367,  368,  369,   -1,
  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
   -1,   -1,  264,   -1,  385,  386,  387,  388,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,   -1,  296,   -1,   -1,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,   -1,
  322,  323,  324,   -1,  326,   -1,  328,   -1,  330,   -1,
  332,   -1,  334,   -1,  336,   -1,  338,   -1,  340,   -1,
  342,   -1,  344,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,  354,  355,  356,   -1,   -1,  359,   -1,  361,
   -1,  363,  364,  365,  366,  367,  368,  369,   -1,  371,
  372,  373,  374,  375,  376,  377,  378,   -1,  380,   -1,
  382,  383,  264,  385,  386,  387,  388,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,   -1,  296,   -1,   -1,  299,  300,   -1,
  302,   -1,  304,   -1,  306,   -1,  308,   -1,  310,   -1,
  312,   -1,  314,   -1,  316,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,  327,   -1,  329,   -1,  331,
   -1,  333,   -1,  335,   -1,  337,   -1,  339,   -1,  341,
   -1,  343,   -1,  345,   -1,  347,   -1,  349,  350,   -1,
  352,  353,   -1,  355,   -1,   -1,  358,   -1,  360,   -1,
  362,   -1,  364,  365,  366,  367,  368,  369,   -1,  371,
  372,  373,  374,  375,  376,  377,   -1,  379,  380,   -1,
  382,  383,  264,  385,  386,  387,  388,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,
   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,   -1,  348,   -1,   -1,  351,
  352,  353,  354,  355,  356,   -1,  358,  359,  360,  361,
  362,  363,  364,  365,  366,  367,  368,  369,   -1,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  380,  264,
  382,  383,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,
   -1,  296,   -1,   -1,   -1,  300,  301,   -1,  303,   -1,
  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,   -1,   -1,  318,  319,  320,   -1,  322,  323,  324,
  325,  326,  327,  328,  329,  330,   -1,  332,   -1,  334,
   -1,  336,  337,  338,  339,  340,  341,  342,  343,  344,
   -1,  346,   -1,  348,   -1,   -1,  351,   -1,   -1,  354,
   -1,  356,   -1,   -1,  359,   -1,  361,   -1,  363,   -1,
  365,  366,  367,  368,  369,   -1,  371,   -1,  373,   -1,
  375,  376,  377,  378,  379,  380,  264,  382,  383,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,
   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,
   -1,   -1,  300,  301,   -1,  303,   -1,  305,   -1,  307,
   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,   -1,
  318,  319,  320,   -1,  322,  323,  324,  325,  326,  327,
  328,  329,  330,   -1,  332,   -1,  334,   -1,  336,  337,
  338,  339,  340,  341,  342,  343,  344,   -1,  346,   -1,
  348,   -1,   -1,  351,   -1,   -1,  354,   -1,  356,   -1,
   -1,  359,   -1,  361,   -1,  363,   -1,  365,  366,  367,
  368,  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,
  378,  379,  380,  264,  382,  383,   -1,   -1,   -1,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,   -1,
   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,  300,
  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,
  311,   -1,  313,   -1,  315,   -1,   -1,  318,  319,  320,
   -1,  322,  323,  324,  325,  326,  327,  328,  329,  330,
   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,  340,
  341,  342,  343,  344,   -1,  346,   -1,  348,   -1,   -1,
  351,   -1,   -1,  354,   -1,  356,   -1,   -1,  359,   -1,
  361,   -1,  363,   -1,  365,  366,  367,  368,  369,   -1,
  371,   -1,  373,   -1,  375,  376,  377,  378,  379,  380,
  264,  382,  383,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,
   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,
  294,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,   -1,   -1,  318,  319,  320,   -1,  322,  323,
  324,  325,  326,  327,  328,  329,  330,   -1,  332,   -1,
  334,   -1,  336,  337,  338,  339,  340,  341,  342,  343,
  344,   -1,  346,   -1,  348,   -1,   -1,  351,   -1,   -1,
  354,   -1,  356,   -1,   -1,  359,   -1,  361,   -1,  363,
   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,  373,
   -1,  375,  376,  377,  378,  379,  380,  264,  382,  383,
   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,  286,
   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,  296,
   -1,   -1,   -1,  300,  301,   -1,  303,   -1,  305,   -1,
  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,
   -1,  318,  319,  320,   -1,  322,  323,  324,  325,  326,
  327,  328,  329,  330,   -1,  332,   -1,  334,   -1,  336,
  337,  338,  339,  340,  341,  342,  343,  344,   -1,  346,
   -1,  348,   -1,   -1,  351,   -1,   -1,  354,   -1,  356,
   -1,   -1,  359,   -1,  361,   -1,  363,   -1,  365,  366,
  367,  368,  369,   -1,  371,   -1,  373,   -1,  375,  376,
  377,  378,  379,  380,  264,  382,  383,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,  289,
   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,   -1,
  300,  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,   -1,   -1,  318,  319,
  320,   -1,  322,  323,  324,  325,  326,  327,  328,  329,
  330,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
  340,  341,  342,  343,  344,   -1,  346,   -1,  348,   -1,
   -1,  351,   -1,   -1,  354,   -1,  356,   -1,   -1,  359,
   -1,  361,   -1,  363,   -1,  365,  366,  367,  368,  369,
   -1,  371,   -1,  373,   -1,  375,  376,  377,  378,  379,
  380,  264,  382,  383,   -1,   -1,   -1,  270,  271,  272,
   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,  282,
  283,   -1,   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,
   -1,  294,   -1,  296,   -1,   -1,   -1,  300,  301,   -1,
  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,   -1,   -1,  318,  319,  320,   -1,  322,
  323,  324,  325,  326,  327,  328,  329,  330,   -1,  332,
   -1,  334,   -1,  336,  337,  338,  339,  340,  341,  342,
  343,  344,   -1,  346,   -1,  348,   -1,   -1,  351,   -1,
   -1,  354,   -1,  356,   -1,   -1,  359,   -1,  361,   -1,
  363,   -1,  365,  366,  367,  368,  369,   -1,  371,   -1,
  373,   -1,  375,  376,  377,  378,  379,  380,  264,  382,
  383,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,   -1,
  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,   -1,
  296,   -1,   -1,   -1,  300,  301,   -1,  303,   -1,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,
   -1,   -1,  318,  319,  320,   -1,  322,  323,  324,  325,
  326,  327,  328,  329,  330,   -1,  332,   -1,  334,   -1,
  336,  337,  338,  339,  340,  341,  342,  343,  344,   -1,
  346,   -1,  348,   -1,   -1,  351,   -1,   -1,  354,   -1,
  356,   -1,   -1,  359,   -1,  361,   -1,  363,   -1,  365,
  366,  367,  368,  369,   -1,  371,   -1,  373,   -1,  375,
  376,  377,  378,  379,  380,  264,  382,  383,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,  282,  283,   -1,   -1,  286,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,  296,   -1,   -1,
   -1,  300,  301,   -1,  303,   -1,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,   -1,  315,   -1,   -1,  318,
  319,  320,   -1,  322,  323,  324,  325,  326,  327,  328,
  329,  330,   -1,  332,   -1,  334,   -1,  336,  337,  338,
  339,  340,  341,  342,  343,  344,   -1,  346,   -1,  348,
   -1,   -1,  351,   -1,   -1,  354,   -1,  356,   -1,   -1,
  359,   -1,  361,   -1,  363,   -1,  365,  366,  367,  368,
  369,   -1,  371,   -1,  373,   -1,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,  282,  283,   -1,
   -1,  286,   -1,   -1,  289,   -1,   -1,   -1,   -1,  294,
   -1,  296,   -1,   -1,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  368,  369,   -1,  371,  372,  373,  374,
  375,  376,  377,  378,  379,  380,   -1,  382,  383,   -1,
  385,  386,  387,  388,  301,   -1,  303,   -1,  305,   -1,
  307,   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,
   -1,  318,  319,  320,   -1,  322,  323,  324,   -1,  326,
   -1,  328,   -1,  330,   -1,  332,   -1,  334,   -1,  336,
   -1,  338,   -1,  340,   -1,  342,   -1,  344,   -1,  346,
   -1,  348,   -1,   -1,  351,   -1,   -1,  354,   -1,  356,
   -1,   -1,  359,   -1,  361,   -1,  363,   -1,   -1,   -1,
  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  378,  271,  272,  273,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 388
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","CRITICAL",
"DEFAULT","DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","INVOCABLE","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"PROCEDURE","RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","THREAD","TO",
"UNTIL","WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","SWAP","NMLT","AUGNMLT","REVASSIGN",
"REVSWAP","SLT","AUGSLT","SLE","AUGSLE","NMLE","AUGNMLE","NMEQ","AUGNMEQ","SEQ",
"AUGSEQ","EQUIV","AUGEQUIV","NMGT","AUGNMGT","NMGE","AUGNMGE","SGT","AUGSGT",
"SGE","AUGSGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET",
"BAR","CONCAT","AUGCONCAT","LCONCAT","AUGLCONCAT","TILDE","NMNE","AUGNMNE",
"SNE","AUGSNE","NEQUIV","AUGNEQUIV","LPAREN","RPAREN","PCOLON","COMMA","MCOLON",
"COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR",
"ABSTRACT","PMATCH","PAND","POR","PUNEVAL","PASSNONMATCH","PIMDASSN","PSETCUR",
"SND","SNDBK","RCV","RCVBK",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : proc",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : invocable",
"decl : cl",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial procbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial procbody",
"optsemi :",
"optsemi : SEMICOL",
"cl : classhead SEMICOL END",
"cl : classhead optsemi clocals methods optsemi initiallysection END",
"classhead : CLASS IDENT supers LPAREN carglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON IDENT",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"invocable : INVOCABLE invoclist",
"invoclist : invocop",
"invoclist : invoclist COMMA invocop",
"invocop : IDENT",
"invocop : STRINGLIT",
"invocop : STRINGLIT COLON INTLIT",
"package : PACKAGE lnkfile",
"import : IMPORT implist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"implist : lnkfile",
"implist : implist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"fldlist :",
"fldlist : idlist",
"proc : prochead SEMICOL locals initial procbody END",
"meth : methhead SEMICOL locals initial procbody END",
"meth : ABSTRACT methhead",
"prochead : PROCEDURE IDENT LPAREN arglist RPAREN",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"carglist :",
"carglist : cparmlist",
"carglist : cparmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"varlist : IDENT",
"varlist : IDENT ASSIGN expr1",
"varlist : varlist COMMA IDENT",
"varlist : varlist COMMA IDENT ASSIGN expr1",
"stalist : IDENT",
"stalist : IDENT ASSIGN expr1",
"stalist : stalist COMMA IDENT",
"stalist : stalist COMMA IDENT ASSIGN expr1",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"cparmlist : carg",
"cparmlist : cparmlist COMMA carg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"arg : IDENT COLON AND IDENT",
"arg : IDENT COLON IDENT COLON AND IDENT",
"arg : IDENT COLON LBRACK RBRACK",
"arg : IDENT COLON IDENT COLON LBRACK RBRACK",
"carg : priv arg",
"priv :",
"priv : PLUS",
"priv : MINUS",
"clocals :",
"clocals : clocals LOCAL varlist optsemi",
"locals :",
"locals : locals LOCAL varlist SEMICOL",
"locals : locals STATIC stalist SEMICOL",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"procbody :",
"procbody : nexpr SEMICOL procbody",
"nexpr :",
"nexpr : expr",
"expr : expr1a",
"expr : expr AND expr1a",
"expr1a : expr1",
"expr1a : expr1a QMARK expr1",
"expr1 : expr2a",
"expr1 : expr2a SWAP expr1",
"expr1 : expr2a ASSIGN expr1",
"expr1 : expr2a REVSWAP expr1",
"expr1 : expr2a REVASSIGN expr1",
"expr1 : expr2a AUGCONCAT expr1",
"expr1 : expr2a AUGLCONCAT expr1",
"expr1 : expr2a AUGDIFF expr1",
"expr1 : expr2a AUGUNION expr1",
"expr1 : expr2a AUGPLUS expr1",
"expr1 : expr2a AUGMINUS expr1",
"expr1 : expr2a AUGSTAR expr1",
"expr1 : expr2a AUGINTER expr1",
"expr1 : expr2a AUGSLASH expr1",
"expr1 : expr2a AUGMOD expr1",
"expr1 : expr2a AUGCARET expr1",
"expr1 : expr2a AUGNMEQ expr1",
"expr1 : expr2a AUGEQUIV expr1",
"expr1 : expr2a AUGNMGE expr1",
"expr1 : expr2a AUGNMGT expr1",
"expr1 : expr2a AUGNMLE expr1",
"expr1 : expr2a AUGNMLT expr1",
"expr1 : expr2a AUGNMNE expr1",
"expr1 : expr2a AUGNEQUIV expr1",
"expr1 : expr2a AUGSEQ expr1",
"expr1 : expr2a AUGSGE expr1",
"expr1 : expr2a AUGSGT expr1",
"expr1 : expr2a AUGSLE expr1",
"expr1 : expr2a AUGSLT expr1",
"expr1 : expr2a AUGSNE expr1",
"expr1 : expr2a AUGQMARK expr1",
"expr1 : expr2a AUGAND expr1",
"expr1 : expr2a AUGAT expr1",
"expr2a : expr2",
"expr2a : expr2a PMATCH expr2",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr2 : expr2 POR expr3",
"expr3 : expr4",
"expr3 : expr4 PAND expr3",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 SEQ expr5",
"expr4 : expr4 SGE expr5",
"expr4 : expr4 SGT expr5",
"expr4 : expr4 SLE expr5",
"expr4 : expr4 SLT expr5",
"expr4 : expr4 SNE expr5",
"expr4 : expr4 NMEQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr4 : expr4 EQUIV expr5",
"expr4 : expr4 NEQUIV expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr5 : expr5 LCONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PIMDASSN expr7",
"expr6 : expr6 PASSNONMATCH expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : postfixthreadop",
"expr8 : expr9 CARET expr8",
"postfixthreadop : expr9 SND",
"postfixthreadop : expr9 SNDBK",
"postfixthreadop : expr9 RCV",
"postfixthreadop : expr9 RCVBK",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 SND expr10",
"expr9 : expr9 SNDBK expr10",
"expr9 : expr9 RCV expr10",
"expr9 : expr9 RCVBK expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : SND expr10",
"expr10 : SNDBK expr10",
"expr10 : RCV expr10",
"expr10 : RCVBK expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : LCONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NMEQ expr10",
"expr10 : NMNE expr10",
"expr10 : SEQ expr10",
"expr10 : SNE expr10",
"expr10 : EQUIV expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : NEQUIV expr10",
"expr10 : BACKSLASH expr10",
"expr10 : PSETCUR expr10",
"expr11 : literal",
"$$1 :",
"expr11 : NMLT $$1 regex NMGT",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : SND",
"expr11 : SNDBK",
"expr11 : RCV",
"expr11 : RCVBK",
"expr11 : PUNEVAL",
"expr11 : CREATE expr",
"expr11 : THREAD expr",
"expr11 : CRITICAL expr2a COLON expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK caselist RBRACK",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : LBRACK COLON expr COLON RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : packageref",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"regex : neregex",
"regex :",
"neregex : neregex2",
"neregex : neregex2 neregex",
"neregex : neregex2 BAR neregex",
"neregex2 : neregex3",
"neregex2 : neregex2 STAR",
"neregex2 : neregex2 PLUS",
"neregex2 : neregex2 QMARK",
"neregex2 : neregex2 LBRACE INTLIT RBRACE",
"neregex3 : IDENT",
"neregex3 : INTLIT",
"neregex3 : REALLIT",
"neregex3 : STRINGLIT",
"neregex3 : CSETLIT",
"neregex3 : DOT",
"neregex3 : LPAREN regex RPAREN",
"neregex3 : LBRACK brackchars RBRACK",
"neregex3 : LBRACK CARET brackchars RBRACK",
"neregex3 : BACKSLASH neregex",
"brackchars : brackchars2",
"brackchars : brackchars MINUS brackchars2",
"brackchars2 : IDENT",
"brackchars2 : INTLIT",
"brackchars2 : REALLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"proc : prochead error procbody END",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  local i
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 871 "unigram.y"

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
   local rhs

   if /iconc then
      return nd
   if not (*nd.children = 3) then
      return nd
   rhs := nd.children[3]
   if (not(type(rhs) == "treenode")) then
      return nd
   if (not(rhs.label == "invoke")) then
      return nd
   rhs := node("Paren", "(", rhs, ")")
   nd.children[3] := rhs
   return nd
end

procedure FieldRef(lhs, dot, rhs)
   if /iconc | (type(lhs) ~== "treenode") then
      return Field(lhs, dot, rhs)

   if (lhs.label == "invoke") then {
      tmpcount +:= 1;
      return node("Paren", "(",
         node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
         node("invoke", Field("__" || tmpcount, ".", rhs))
         );
      }
   return Field(lhs, dot, rhs)
end

procedure InvocationNode(args[])
   tmpcount +:= 1
   if type(args[1]) == "token" & (args[1].tok = IDENT) then {
       n1 := args[1]
       lparen := copy(args[1])
       lparen.tok := LPAREN
       lparen.s := "("
   }
   else {
       n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
       if lparen := Clone1stToken(args[1]) then {
	   lparen.tok := LPAREN
	   lparen.s := "("
       }
       else lparen := "("
   }
   if *args = 6 then {
       return node("Paren",lparen,node("invoke",
		    # iconc uses no __m business
		   (if /iconc then Field(Field(n1, ".", "__m"), "." , args[3])
			      else Field(n1, ".", args[3])),

	     args[4], node("exprlist",
	     if n1 === args[1] then args[1] else "__"||tmpcount,
	     if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
	     ,")")
      }
   else {
      if /iconc then
	 return  node("Paren",lparen,node("invoke",Field(Field(
			  Field(n1,".", "__m"),
			 "." , args[3]),".",args[5]),
		       args[6], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
		      ,")")
      else return SuperMethodInvok ! args
   }
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
   if /iconc then
      return node("invoke", expr11, lparen, args, rparen)

   if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
      return node("invoke", expr11, lparen, args, rparen)
      }

   if (type(expr11) == "treenode") then {
      case expr11.label of {
         "field": {
            #
            # need to examine lhs of field-ref to determine
            # whether we need to decompose the expr11 further...
            #
            if (type(expr11.children[1]) == "treenode") then {
               tmpcount +:= 1;
               n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
                  expr11.children[1]), ")")
               return node("exprlist", "(", n1, "&",
                  node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
                  lparen, args, rparen), ")")
               }
            else {
               return node("invoke", expr11, lparen, args, rparen)
               }
            }
         default: {
            return node("invoke", expr11, lparen, args, rparen)
            }
         }
      }
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
   tmpcount +:= 1
   if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
      n1 := args[1]
      lparen := copy(args[1])
      lparen.tok := LPAREN
      lparen.s := "("
      }
   else {
      n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
      if lparen := Clone1stToken(args[1]) then {
         lparen.tok := LPAREN
         lparen.s := "("
         }
      else
         lparen := "("
      }

   args[3].s := mangle_class_sym(args[3].s)
   args[3].s ||:= "__oprec"
   return node("exprlist", "(", n1, ")", " & ",
      node("Paren", lparen, node("invoke",
      Field(args[3], ".", args[5]),
      args[6], node("exprlist",
      if n1 === args[1] then args[1] else "__" || tmpcount,
      if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
      ")", ))
end

procedure isloco(node, s)
case type(node) of {
   "treenode": {
      if *node.children > 0 then return isloco(!node.children, s)
      }
   "token" : {
      if (node.tok = IDENT) & (node.s == s) then return
      }
   }
end

procedure buildtab_from_cclause(n, args)
   if type(n) ~== "treenode" then stop("bad table literal")
   comma := copy(n.children[2])
   comma.tok := COMMA
   comma.s := ","
   case n.label of {
     "cclause0": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	}
     "cclause1": {
        if *args.children > 0 then push(args.children, comma)
	push(args.children, n.children[3])
	push(args.children, comma)
	push(args.children, n.children[1])
	}
   }
end

# build a tree equivalent to
# {__tmp :=[]; every put(__tmp, expr); if __tmp>0 then __tmp}
procedure ListComp(expr)
   local tmp
   tmpcount +:= 1
   tmp := "__" || tmpcount
   return node("ListComp",
		"{" || tmp || " :=[]; every put(" || tmp || ", ",
		expr,
		"); if *" || tmp || ">0 then " || tmp || "}")
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
   args := node("elst1")
   write("I am a tablelit, cl is ", image(cl.label))
   while type(cl)=="treenode" & cl.label == "Caselist" do {
      buildtab_from_cclause(cl.children[3], args)
      cl := cl.children[1]
      }
   buildtab_from_cclause(cl, args)
   tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
   lp := copy(lb); lp.tok := LPAREN; lp.s := "("
   rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
   return node("invoke", tabid, lp, args, rp)
end

#
# A record type for recording errors for later reporting e.g. within an IDE,
# or to stderr.
#
record ParseError ( lineNumber, errorMessage )
#line 2820 "unigram.icn"
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    action[yyn]()          # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 301 "unigram.y"
 Progend(valstk[2]);
end

procedure action_2()
#line 303 "unigram.y"
 yyval := EmptyNode 
end

procedure action_3()
#line 304 "unigram.y"

	     if /parsingErrors | *parsingErrors = 0 then iwrites(&errout,".")
	     yyval := node("decls", valstk[2], valstk[1])
	     
end

procedure action_12()
#line 319 "unigram.y"
 yyval := EmptyNode 
end

procedure action_13()
#line 320 "unigram.y"

	   yyval := Method( , , , , , valstk[5], "initially", EmptyNode, "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_14()
#line 326 "unigram.y"

	   yyval := Method( , , , , , valstk[8], "initially", valstk[6], "method", "(", ")")
	   yyval.locals := valstk[3]
	   yyval.initl := valstk[2]
	   yyval.procbody := valstk[1]
	
end

procedure action_15()
#line 334 "unigram.y"
 yyval := EmptyNode 
end

procedure action_17()
#line 337 "unigram.y"

   yyval := valstk[3]
   yyval.methods := methodstaque(&null, yyval)
   
end

procedure action_18()
#line 341 "unigram.y"

   yyval := valstk[7]
   if valstk[5] ~=== EmptyNode then {
      if valstk[5].label == "locals3" then
         yyerror("static class variables not yet implemented")
      # splice in any class locals into the field list
      yyval.fields.traverse(valstk[5], "classlocal")
      }
   if valstk[2] ~=== EmptyNode then
      valstk[4] := node("methods", valstk[4], valstk[2])
   yyval.methods := methodstaque(valstk[4], yyval)
   
end

procedure action_19()
#line 354 "unigram.y"

   yyval := Class()
   yyval.tag := valstk[6]
   yyval.unmangled_name := valstk[5].s
   yyval.name := package_mangled_symbol(valstk[5].s)
   if proc(yyval.name, 0) then
      warning("Warning: class "|| yyval.name ||" overrides the built-in function")
   else if \ (foobar := classes.lookup(yyval.name)) then {
      yyerror("redeclaration of class " || yyval.name)
      }
   else
      classes.insert(yyval, yyval.name)

   yyval.supers_node := valstk[4]
   yyval.fields := valstk[2]
   yyval.lptoken := valstk[3]
   yyval.rptoken := valstk[1]
   
end

procedure action_20()
#line 373 "unigram.y"
 yyval := EmptyNode 
end

procedure action_21()
#line 374 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_22()
#line 375 "unigram.y"
 yyval := node("supers", valstk[3], valstk[2], valstk[1]) 
end

procedure action_23()
#line 378 "unigram.y"
 yyval := node("packageref", valstk[3],valstk[2],valstk[1]) 
end

procedure action_24()
#line 379 "unigram.y"
 yyval := node("packageref", valstk[2],valstk[1]) 
end

procedure action_25()
#line 382 "unigram.y"
 yyval := EmptyNode 
end

procedure action_26()
#line 383 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_27()
#line 384 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_28()
#line 385 "unigram.y"
 yyval := node("methods", valstk[2],valstk[1]) 
end

procedure action_29()
#line 388 "unigram.y"
 yyval := node("invocable", valstk[2], valstk[1]);
end

procedure action_31()
#line 391 "unigram.y"
 yyval := node("invoclist", valstk[3],valstk[2],valstk[1]);
end

procedure action_34()
#line 395 "unigram.y"
yyval := node("invocop3", valstk[3],valstk[2],valstk[1]);
end

procedure action_35()
#line 397 "unigram.y"

   if \thePackage then {
      if not (thePackage.name == valstk[1].s) then {
         yyerror(fName || " cannot be in both package "|| thePackage.name ||
            " and package " || valstk[1].s)
         yyval := EmptyNode
         }
      else { # this branch allowed for -C / iconc
         thePackage.insertfname(fName)
         thePackage.add_imported()
         }
      }
   else {
      yyval := node("package", valstk[2],valstk[1]);
      thePackage := Package(valstk[1].s)
      thePackage.insertfname(fName)
      thePackage.add_imported()
      }
   
end

procedure action_36()
#line 417 "unigram.y"

   yyval := node("import", valstk[2],valstk[1]," ")
   import_class(valstk[1])
   
end

procedure action_37()
#line 422 "unigram.y"
 yyval := node("link", valstk[2],valstk[1]," "); 
end

procedure action_39()
#line 425 "unigram.y"
 yyval := node("lnklist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_41()
#line 428 "unigram.y"
 yyval := node("implist", valstk[3],valstk[2],valstk[1]); 
end

procedure action_44()
#line 433 "unigram.y"
 yyval := node("global", valstk[2],valstk[1]) 
end

procedure action_45()
#line 435 "unigram.y"

		yyval := declaration(valstk[4],valstk[2],valstk[5],valstk[3],valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_46()
#line 441 "unigram.y"
 yyval := EmptyNode 
end

procedure action_48()
#line 444 "unigram.y"

#		body_scopeck(valstk[2])
		yyval := node("proc", valstk[6],";",valstk[4],valstk[3],valstk[2],valstk[1])
		
end

procedure action_49()
#line 449 "unigram.y"

		yyval := valstk[6]
		yyval.locals := valstk[4]
		yyval.initl := valstk[3]
		yyval.procbody := valstk[2]
		
end

procedure action_50()
#line 455 "unigram.y"

		yyval := valstk[1]
                yyval.abstract_flag := 1
		
end

procedure action_51()
#line 460 "unigram.y"

		yyval := declaration(valstk[4], valstk[2], valstk[5], valstk[3], valstk[1])
		if \iconc then
		   ca_add_proc(yyfilename, valstk[4].s)
		
end

procedure action_52()
#line 466 "unigram.y"

		yyval := Method( , , , , , valstk[5], valstk[4].s, valstk[2], valstk[5].s, valstk[3], valstk[1])
		
end

procedure action_53()
#line 471 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_54()
#line 472 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_55()
#line 473 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_56()
#line 475 "unigram.y"
 yyval := argList( , , &null) 
end

procedure action_57()
#line 476 "unigram.y"
 yyval := argList( , , valstk[1]) 
end

procedure action_58()
#line 477 "unigram.y"
 yyval := argList("[]" , , valstk[3]) 
end

procedure action_60()
#line 481 "unigram.y"
 yyval := node("idlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_62()
#line 484 "unigram.y"
 yyval := node("varlist2", valstk[3], valstk[2], valstk[1])
end

procedure action_63()
#line 485 "unigram.y"
 yyval := node("varlist3", valstk[3], valstk[2], valstk[1])
end

procedure action_64()
#line 486 "unigram.y"
 yyval := node("varlist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_66()
#line 489 "unigram.y"
 yyval := node("stalist2", valstk[3], valstk[2], valstk[1])
end

procedure action_67()
#line 490 "unigram.y"
 yyval := node("stalist3", valstk[3], valstk[2], valstk[1])
end

procedure action_68()
#line 491 "unigram.y"
 yyval := node("stalist4",valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_70()
#line 494 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_72()
#line 497 "unigram.y"
 yyval := node("parmlist", valstk[3],valstk[2],valstk[1]) 
end

procedure action_74()
#line 500 "unigram.y"
 yyval := node("arg2", valstk[3], valstk[2], valstk[1]) 
end

procedure action_75()
#line 501 "unigram.y"
 yyval := node("arg3", valstk[3], valstk[2], valstk[1]) 
end

procedure action_76()
#line 502 "unigram.y"
 yyval := node("arg4", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
end

procedure action_77()
#line 503 "unigram.y"
 yyval := node("arg5", valstk[4], valstk[3], Keyword(valstk[2], valstk[1])) 
end

procedure action_78()
#line 504 "unigram.y"
 yyval := node("arg6", valstk[6], valstk[5], valstk[4], valstk[3], Keyword(valstk[2], valstk[1])) 
end

procedure action_79()
#line 505 "unigram.y"
 yyval := node("arg7", valstk[4], valstk[3], "[]") 
end

procedure action_80()
#line 506 "unigram.y"
 yyval := node("arg8", valstk[6], valstk[5], valstk[4], valstk[3], "[]") 
end

procedure action_81()
#line 509 "unigram.y"
 yyval := valstk[1] 
end

procedure action_82()
#line 511 "unigram.y"
 yyval := EmptyNode;
end

procedure action_85()
#line 515 "unigram.y"
 yyval := EmptyNode;
end

procedure action_86()
#line 516 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_87()
#line 518 "unigram.y"
 yyval := EmptyNode;
end

procedure action_88()
#line 519 "unigram.y"
 yyval := node("locals2", valstk[4],valstk[3],valstk[2],";");
end

procedure action_89()
#line 520 "unigram.y"
 yyval := node("locals3", valstk[4],valstk[3],valstk[2],";");
end

procedure action_90()
#line 522 "unigram.y"
 yyval := EmptyNode 
end

procedure action_91()
#line 523 "unigram.y"

	   yyval := node("initial", valstk[3], valstk[2],";")
	      
end

procedure action_92()
#line 527 "unigram.y"
 yyval := EmptyNode 
end

procedure action_93()
#line 528 "unigram.y"
 yyval := node("procbody", valstk[3],";",valstk[1]);
end

procedure action_94()
#line 530 "unigram.y"
 yyval := EmptyNode 
end

procedure action_97()
#line 534 "unigram.y"
 yyval := node("and", valstk[3],valstk[2],valstk[1]) 
end

procedure action_99()
#line 537 "unigram.y"
 yyval := node("binques", valstk[3],valstk[2],valstk[1]);
end

procedure action_101()
#line 540 "unigram.y"
 yyval := node("swap", valstk[3],valstk[2],valstk[1]);
end

procedure action_102()
#line 541 "unigram.y"
 
          yyval := parenthesize_assign(node("assign",valstk[3],valstk[2],valstk[1]));
          
end

procedure action_103()
#line 544 "unigram.y"
 yyval := node("revswap", valstk[3],valstk[2],valstk[1]);
end

procedure action_104()
#line 545 "unigram.y"
 yyval := node("revasgn", valstk[3],valstk[2],valstk[1]);
end

procedure action_105()
#line 546 "unigram.y"
 yyval := node("augcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_106()
#line 547 "unigram.y"
 yyval := node("auglcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_107()
#line 548 "unigram.y"
 yyval := node("Bdiffa", valstk[3],valstk[2],valstk[1]);
end

procedure action_108()
#line 549 "unigram.y"
 yyval := node("Buniona", valstk[3],valstk[2],valstk[1]);
end

procedure action_109()
#line 550 "unigram.y"
 yyval := node("Bplusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_110()
#line 551 "unigram.y"
 yyval := node("Bminusa", valstk[3],valstk[2],valstk[1]);
end

procedure action_111()
#line 552 "unigram.y"
 yyval := node("Bstara", valstk[3],valstk[2],valstk[1]);
end

procedure action_112()
#line 553 "unigram.y"
 yyval := node("Bintera", valstk[3],valstk[2],valstk[1]);
end

procedure action_113()
#line 554 "unigram.y"
 yyval := node("Bslasha", valstk[3],valstk[2],valstk[1]);
end

procedure action_114()
#line 555 "unigram.y"
 yyval := node("Bmoda", valstk[3],valstk[2],valstk[1]);
end

procedure action_115()
#line 556 "unigram.y"
 yyval := node("Bcareta", valstk[3],valstk[2],valstk[1]);
end

procedure action_116()
#line 557 "unigram.y"
 yyval := node("Baugeq", valstk[3],valstk[2],valstk[1]);
end

procedure action_117()
#line 558 "unigram.y"
 yyval := node("Baugeqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_118()
#line 559 "unigram.y"
 yyval := node("Baugge", valstk[3],valstk[2],valstk[1]);
end

procedure action_119()
#line 560 "unigram.y"
 yyval := node("Bauggt", valstk[3],valstk[2],valstk[1]);
end

procedure action_120()
#line 561 "unigram.y"
 yyval := node("Baugle", valstk[3],valstk[2],valstk[1]);
end

procedure action_121()
#line 562 "unigram.y"
 yyval := node("Bauglt", valstk[3],valstk[2],valstk[1]);
end

procedure action_122()
#line 563 "unigram.y"
 yyval := node("Baugne", valstk[3],valstk[2],valstk[1]);
end

procedure action_123()
#line 564 "unigram.y"
 yyval := node("Baugneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_124()
#line 565 "unigram.y"
 yyval := node("Baugseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_125()
#line 566 "unigram.y"
 yyval := node("Baugsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_126()
#line 567 "unigram.y"
 yyval := node("Baugsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_127()
#line 568 "unigram.y"
 yyval := node("Baugsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_128()
#line 569 "unigram.y"
 yyval := node("Baugslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_129()
#line 570 "unigram.y"
 yyval := node("Baugsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_130()
#line 571 "unigram.y"
 yyval := node("Baugques", valstk[3],valstk[2],valstk[1]);
end

procedure action_131()
#line 572 "unigram.y"
 yyval := node("Baugamper", valstk[3],valstk[2],valstk[1]);
end

procedure action_132()
#line 573 "unigram.y"
 yyval := node("Baugact", valstk[3],valstk[2],valstk[1]);
end

procedure action_134()
#line 576 "unigram.y"
 yyval := node("BPmatch", valstk[3],valstk[2],valstk[1]);
end

procedure action_136()
#line 579 "unigram.y"
 yyval := node("to", valstk[3],valstk[2],valstk[1]);
end

procedure action_137()
#line 580 "unigram.y"
 yyval := node("toby", valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_138()
#line 581 "unigram.y"
 yyval := node("BPor", valstk[3],valstk[2],valstk[1]); 
end

procedure action_140()
#line 584 "unigram.y"
 yyval := node("BPand", valstk[3],valstk[2],valstk[1]); 
end

procedure action_141()
#line 585 "unigram.y"
yyval := node(BAR, valstk[3],valstk[2],valstk[1]);
end

procedure action_143()
#line 588 "unigram.y"
 yyval := node("Bseq", valstk[3],valstk[2],valstk[1]);
end

procedure action_144()
#line 589 "unigram.y"
 yyval := node("Bsge", valstk[3],valstk[2],valstk[1]);
end

procedure action_145()
#line 590 "unigram.y"
 yyval := node("Bsgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_146()
#line 591 "unigram.y"
 yyval := node("Bsle", valstk[3],valstk[2],valstk[1]);
end

procedure action_147()
#line 592 "unigram.y"
 yyval := node("Bslt", valstk[3],valstk[2],valstk[1]);
end

procedure action_148()
#line 593 "unigram.y"
 yyval := node("Bsne", valstk[3],valstk[2],valstk[1]);
end

procedure action_149()
#line 594 "unigram.y"
 yyval := node("Beq", valstk[3],valstk[2],valstk[1]);
end

procedure action_150()
#line 595 "unigram.y"
 yyval := node("Bge", valstk[3],valstk[2],valstk[1]);
end

procedure action_151()
#line 596 "unigram.y"
 yyval := node("Bgt", valstk[3],valstk[2],valstk[1]);
end

procedure action_152()
#line 597 "unigram.y"
 yyval := node("Ble", valstk[3],valstk[2],valstk[1]);
end

procedure action_153()
#line 598 "unigram.y"
 yyval := node("Blt", valstk[3],valstk[2],valstk[1]);
end

procedure action_154()
#line 599 "unigram.y"
 yyval := node("Bne", valstk[3],valstk[2],valstk[1]);
end

procedure action_155()
#line 600 "unigram.y"
 yyval := node("Beqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_156()
#line 601 "unigram.y"
 yyval := node("Bneqv", valstk[3],valstk[2],valstk[1]);
end

procedure action_158()
#line 604 "unigram.y"
 yyval := node("Bcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_159()
#line 605 "unigram.y"
 yyval := node("Blcat", valstk[3],valstk[2],valstk[1]);
end

procedure action_161()
#line 608 "unigram.y"
 yyval := node("BPiam", valstk[3],valstk[2],valstk[1]);
end

procedure action_162()
#line 609 "unigram.y"
 yyval := node("BPaom", valstk[3],valstk[2],valstk[1]);
end

procedure action_163()
#line 610 "unigram.y"
 yyval := node("Bplus", valstk[3],valstk[2],valstk[1]);
end

procedure action_164()
#line 611 "unigram.y"
 yyval := node("Bdiff", valstk[3],valstk[2],valstk[1]);
end

procedure action_165()
#line 612 "unigram.y"
 yyval := node("Bunion", valstk[3],valstk[2],valstk[1]);
end

procedure action_166()
#line 613 "unigram.y"
 yyval := node("Bminus", valstk[3],valstk[2],valstk[1]);
end

procedure action_168()
#line 616 "unigram.y"
 yyval := node("Bstar", valstk[3],valstk[2],valstk[1]);
end

procedure action_169()
#line 617 "unigram.y"
 yyval := node("Binter", valstk[3],valstk[2],valstk[1]);
end

procedure action_170()
#line 618 "unigram.y"
 yyval := node("Bslash", valstk[3],valstk[2],valstk[1]);
end

procedure action_171()
#line 619 "unigram.y"
 yyval := node("Bmod", valstk[3],valstk[2],valstk[1]);
end

procedure action_174()
#line 623 "unigram.y"
 yyval := node("Bcaret", valstk[3],valstk[2],valstk[1]);
end

procedure action_175()
#line 626 "unigram.y"
 yyval := node("Bsnd", valstk[2],valstk[1],EmptyNode);
end

procedure action_176()
#line 627 "unigram.y"
 yyval := node("Bsndbk", valstk[2],valstk[1],EmptyNode);
end

procedure action_177()
#line 628 "unigram.y"
 yyval := node("Brcv", valstk[2],valstk[1],EmptyNode);
end

procedure action_178()
#line 629 "unigram.y"
 yyval := node("Brcvbk", valstk[2],valstk[1],EmptyNode);
end

procedure action_180()
#line 632 "unigram.y"
 yyval := node("limit", valstk[3],valstk[2],valstk[1]);
end

procedure action_181()
#line 633 "unigram.y"
 yyval := node("at", valstk[3],valstk[2],valstk[1]);
end

procedure action_182()
#line 634 "unigram.y"
 yyval := node("Bsnd", valstk[3],valstk[2],valstk[1]);
end

procedure action_183()
#line 635 "unigram.y"
 yyval := node("Bsndbk", valstk[3],valstk[2],valstk[1]);
end

procedure action_184()
#line 636 "unigram.y"
 yyval := node("Brcv", valstk[3],valstk[2],valstk[1]);
end

procedure action_185()
#line 637 "unigram.y"
 yyval := node("Brcvbk", valstk[3],valstk[2],valstk[1]);
end

procedure action_186()
#line 638 "unigram.y"
 yyval := node("apply", valstk[3],valstk[2],valstk[1]);
end

procedure action_188()
#line 641 "unigram.y"
 yyval := node("uat", valstk[2],valstk[1]);
end

procedure action_189()
#line 642 "unigram.y"
 yyval := node("Bsnd", EmptyNode,valstk[2],valstk[1]);
end

procedure action_190()
#line 643 "unigram.y"
 yyval := node("Bsndbk", EmptyNode,valstk[2],valstk[1]);
end

procedure action_191()
#line 644 "unigram.y"
 yyval := node("Brcv", EmptyNode,valstk[2],valstk[1]);
end

procedure action_192()
#line 645 "unigram.y"
 yyval := node("Brcvbk", EmptyNode,valstk[2],valstk[1]);
end

procedure action_193()
#line 646 "unigram.y"
 yyval := node("unot", valstk[2],valstk[1]);
end

procedure action_194()
#line 647 "unigram.y"
 yyval := node("ubar", valstk[2],valstk[1]);
end

procedure action_195()
#line 648 "unigram.y"
 yyval := node("uconcat", valstk[2],valstk[1]);
end

procedure action_196()
#line 649 "unigram.y"
 yyval := node("ulconcat", valstk[2],valstk[1]);
end

procedure action_197()
#line 650 "unigram.y"
 yyval := node("udot", valstk[2],valstk[1]);
end

procedure action_198()
#line 651 "unigram.y"
 yyval := node("ubang", valstk[2],valstk[1]);
end

procedure action_199()
#line 652 "unigram.y"
 yyval := node("udiff", valstk[2],valstk[1]);
end

procedure action_200()
#line 653 "unigram.y"
 yyval := node("uplus", valstk[2],valstk[1]);
end

procedure action_201()
#line 654 "unigram.y"
 yyval := node("ustar", valstk[2],valstk[1]);
end

procedure action_202()
#line 655 "unigram.y"
 yyval := node("uslash", valstk[2],valstk[1]);
end

procedure action_203()
#line 656 "unigram.y"
 yyval := node("ucaret", valstk[2],valstk[1]);
end

procedure action_204()
#line 657 "unigram.y"
 yyval := node("uinter", valstk[2],valstk[1]);
end

procedure action_205()
#line 658 "unigram.y"
 yyval := node("utilde", valstk[2],valstk[1]);
end

procedure action_206()
#line 659 "unigram.y"
 yyval := node("uminus", valstk[2],valstk[1]);
end

procedure action_207()
#line 660 "unigram.y"
 yyval := node("unumeq", valstk[2],valstk[1]);
end

procedure action_208()
#line 661 "unigram.y"
 yyval := node("unumne", valstk[2],valstk[1]);
end

procedure action_209()
#line 662 "unigram.y"
 yyval := node("ulexeq", valstk[2],valstk[1]);
end

procedure action_210()
#line 663 "unigram.y"
 yyval := node("ulexne", valstk[2],valstk[1]);
end

procedure action_211()
#line 664 "unigram.y"
 yyval := node("uequiv", valstk[2],valstk[1]);
end

procedure action_212()
#line 665 "unigram.y"
 yyval := node("uunion", valstk[2],valstk[1]);
end

procedure action_213()
#line 666 "unigram.y"
 yyval := node("uqmark", valstk[2],valstk[1]);
end

procedure action_214()
#line 667 "unigram.y"
 yyval := node("unotequiv", valstk[2],valstk[1]);
end

procedure action_215()
#line 668 "unigram.y"
 yyval := node("ubackslash", valstk[2],valstk[1]);
end

procedure action_216()
#line 669 "unigram.y"
 yyval := node("upsetcur", valstk[2],valstk[1]);
end

procedure action_218()
#line 672 "unigram.y"
 next_gt_is_ender := 1 
end

procedure action_219()
#line 672 "unigram.y"
 yyval := node("regex", valstk[2]); 
end

procedure action_228()
#line 681 "unigram.y"
 yyval := node("Bsnd", EmptyNode,valstk[1],EmptyNode);
end

procedure action_229()
#line 682 "unigram.y"
 yyval := node("Bsndbk", EmptyNode,valstk[1],EmptyNode);
end

procedure action_230()
#line 683 "unigram.y"
 yyval := node("Brcv", EmptyNode,valstk[1],EmptyNode);
end

procedure action_231()
#line 684 "unigram.y"
 yyval := node("Brcvbk", EmptyNode,valstk[1],EmptyNode);
end

procedure action_232()
#line 685 "unigram.y"
 yyval := node("BPuneval", valstk[1]);
end

procedure action_233()
#line 686 "unigram.y"
 yyval := node("create", valstk[2],valstk[1]);
end

procedure action_234()
#line 687 "unigram.y"

	      fakeThreadIdent := Clone1stToken(valstk[2])
	      fakeThreadIdent.tok := IDENT
	      fakeCreate := Clone1stToken(valstk[2])
	      fakeCreate.tok := CREATE
	      fakeCreate.s := "create"
	      fakeThreadIdent.s := "spawn"
	      fakeLParen := Clone1stToken(valstk[2])
	      fakeLParen.tok := LPAREN
	      fakeLParen.s := "("
	      fakeRParen := Clone1stToken(valstk[2])
	      fakeRParen.tok := RPAREN
	      fakeRParen.s := ")"

	      yyval := SimpleInvocation(fakeThreadIdent,fakeLParen,
				     node("create", fakeCreate, valstk[1]),
				     fakeRParen);
	      
end

procedure action_235()
#line 705 "unigram.y"
 yyval := node("critical", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_237()
#line 707 "unigram.y"
 yyval := node("Next", valstk[1]);
end

procedure action_238()
#line 708 "unigram.y"
 yyval := node("Break", valstk[2],valstk[1]);
end

procedure action_239()
#line 709 "unigram.y"
 yyval := node("Paren", valstk[3],valstk[2],valstk[1]);
end

procedure action_240()
#line 710 "unigram.y"
 yyval := node("Brace", valstk[3],valstk[2],valstk[1]);
end

procedure action_241()
#line 711 "unigram.y"
 yyval := tablelit(valstk[3],valstk[2],valstk[1]);
end

procedure action_242()
#line 712 "unigram.y"
 yyval := node("Brack", valstk[3],valstk[2],valstk[1]);
end

procedure action_243()
#line 713 "unigram.y"
 yyval := ListComp(valstk[3]);
end

procedure action_244()
#line 714 "unigram.y"
 yyval := node("Subscript", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_245()
#line 715 "unigram.y"
 yyval := node("Pdco0", valstk[3],valstk[2],valstk[1]);
end

procedure action_246()
#line 716 "unigram.y"
 yyval := node("Pdco1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_247()
#line 717 "unigram.y"

           yyval := SimpleInvocation(valstk[4],valstk[3],valstk[2],valstk[1]);
      
end

procedure action_248()
#line 720 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_249()
#line 723 "unigram.y"

	   yyval := InvocationNode(valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_250()
#line 726 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_251()
#line 729 "unigram.y"

	   yyval := InvocationNode(valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1])
	   
end

procedure action_252()
#line 732 "unigram.y"

           yyval := FieldRef(valstk[3],valstk[2],valstk[1]);
      
end

procedure action_254()
#line 736 "unigram.y"
 yyval := Field(valstk[3],valstk[2],valstk[1]) 
end

procedure action_255()
#line 737 "unigram.y"
 yyval := node("keyword",valstk[2],valstk[1]) 
end

procedure action_256()
#line 738 "unigram.y"
 yyval := Keyword(valstk[2],valstk[1]) 
end

procedure action_257()
#line 740 "unigram.y"

	    yyval := node("While0", valstk[2],valstk[1]);
	    
end

procedure action_258()
#line 743 "unigram.y"

	    # warn if a while loop should be an every.
	    # should generalize; compute a semantic attribute and
	    # warn if a while loop control expression is a generator.
	    # but for now, only complain about the most obvious case
	    if type(valstk[3]) == "treenode" & valstk[3].label === "assign" &
	       *valstk[3].children = 3 & type(valstk[3].children[3]) == "treenode" &
	       valstk[3].children[3].label == "to" & *(valstk[3].children[3].children)=3 &
		     (type(valstk[3].children[3].children[1]) ===
		      type(valstk[3].children[3].children[3]) === "token") &
		     (valstk[3].children[3].children[1].tok = 
		      valstk[3].children[3].children[3].tok = INTLIT) &
		     valstk[3].children[3].children[1].s<=valstk[3].children[3].children[3].s
	    then {
		warning("infinite loop; use \"every\" to loop on generator results",
			valstk[4].line, valstk[4].filename, valstk[4].s
			)
	       }
	    yyval := node("While1", valstk[4],valstk[3],valstk[2],valstk[1]);
	    
end

procedure action_259()
#line 764 "unigram.y"
 yyval := node("until", valstk[2],valstk[1]);
end

procedure action_260()
#line 765 "unigram.y"
 yyval := node("until1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_261()
#line 767 "unigram.y"
 yyval := node("every", valstk[2],valstk[1]);
end

procedure action_262()
#line 768 "unigram.y"
 yyval := node("every1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_263()
#line 770 "unigram.y"
 yyval := node("repeat", valstk[2],valstk[1]);
end

procedure action_265()
#line 773 "unigram.y"
 yyval := node("return", valstk[2], valstk[1]);
end

procedure action_266()
#line 774 "unigram.y"
 yyval := node("Suspend0", valstk[2],valstk[1]);
end

procedure action_267()
#line 775 "unigram.y"
 yyval := node("Suspend1", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_268()
#line 777 "unigram.y"
 yyval := node("If0", valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_269()
#line 778 "unigram.y"
 yyval := node("If1", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_270()
#line 780 "unigram.y"
 yyval := node("Case", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_272()
#line 783 "unigram.y"
 yyval := node("Caselist", valstk[3],";",valstk[1]);
end

procedure action_273()
#line 785 "unigram.y"
 yyval := node("cclause0", valstk[3],valstk[2],valstk[1]);
end

procedure action_274()
#line 786 "unigram.y"
 yyval := node("cclause1", valstk[3],valstk[2],valstk[1]);
end

procedure action_276()
#line 789 "unigram.y"

	   if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
	      yyval := valstk[3]; put(yyval.children, valstk[2], valstk[1])
	      }
	   else
	      yyval := node("elst1", valstk[3],valstk[2],valstk[1])
	   
end

procedure action_277()
#line 797 "unigram.y"
 yyval := node("pdcolist0", valstk[1]) 
end

procedure action_278()
#line 798 "unigram.y"
 yyval := node("pdcolist1", valstk[3],valstk[2],valstk[1]); 
end

procedure action_283()
#line 805 "unigram.y"
 yyval := regexp(valstk[1]) 
end

procedure action_284()
#line 806 "unigram.y"
 yyval := "emptyregex" 
end

procedure action_286()
#line 811 "unigram.y"
 yyval := node("regexconcat", valstk[2], valstk[1]) 
end

procedure action_287()
#line 812 "unigram.y"
 yyval := node("regexbar", valstk[3], valstk[2], valstk[1]) 
end

procedure action_289()
#line 816 "unigram.y"
 yyval := node("kleene", valstk[2], valstk[1]) 
end

procedure action_290()
#line 817 "unigram.y"
 yyval := node("oneormore", valstk[2], valstk[1]) 
end

procedure action_291()
#line 818 "unigram.y"
 yyval := node("optional", valstk[2], valstk[1]) 
end

procedure action_292()
#line 819 "unigram.y"

	   if valstk[2].s < 0 then {
	      yyerror("regex occurrences may not be negative")
	      yyval := node("error")
	      }
	   else if valstk[2].s = 0 then {
	      yyerror("regex occurrences may not be zero yet")
	      yyval := node("error")
	      }
	   else if valstk[2].s = 1 then yyval := valstk[4]
	   else { # normal case, positive number of repeats of valstk[4]
	      yyval := valstk[4]
	      every i := 2 to valstk[2].s do {
	         yyval := node("regexconcat", yyval, valstk[4])
	         }
	      }
	   
end

procedure action_299()
#line 844 "unigram.y"
 yyval := node("Paren",valstk[3],valstk[2],valstk[1]); 
end

procedure action_300()
#line 845 "unigram.y"
 yyval := node("acset", valstk[3], valstk[2], valstk[1]) 
end

procedure action_301()
#line 846 "unigram.y"
 yyval := node("notany", valstk[4], valstk[3], valstk[2], valstk[1]) 
end

procedure action_302()
#line 847 "unigram.y"
 yyval := node("escape", valstk[2], valstk[1]) 
end

procedure action_304()
#line 851 "unigram.y"
 yyval := node("brackchars", valstk[3], valstk[2], valstk[1]) 
end

procedure action_308()
#line 857 "unigram.y"
 yyval := node("section", valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]);
end

procedure action_313()
#line 864 "unigram.y"
 yyval := node("compound", valstk[3],";",valstk[1]);
end

procedure action_315()
#line 867 "unigram.y"
 yyval := node("error", valstk[4],valstk[2],valstk[1]); 
end

procedure action_316()
#line 868 "unigram.y"
 yyval := node("error"); 
end

#line 4347 "unigram.icn"
