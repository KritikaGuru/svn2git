procedure yyerror(s)
static t
initial {
   t := table(table("syntax error"))
   t[0] := table("invalid declaration")
   t[47] := table("procedure not allowed within a class")
   t[10] := table("link list expected")
   t[57] := table("parameter name expected")
   t[256] := table("missing or invalid second argument to +")
   t[277] := table("invalid local declaration")
   t[261] := table("missing or invalid second argument to *")
   t[418] := table("malformed case expression")
   t[88] := table("bad keyword name or bogus & precedes this token")
   t[114] := table("invalid compound expression")
   t[114,271] := "invalid compound expression"
   t[114,317] := "assignment missing its left operand"
   t[376] := table("parenthesis is required for method invocation")
   t[9] := table("invocable list expected")
   t[77] := table("invalid every control expression")
   t[119] := table("too many closing curly braces")
   t[140] := table("invalid procedure body")
   t[82] := table("invalid repeat control expression")
   t[370] := table("unclosed parenthesis")
   t[24] := table("missing semicolon")
   t[24,274] := "semicolon expected"
   t[24,271] := "missing semicolon"
   t[87] := table("invalid argument to unary !")
   t[113] := table("unclosed list")
   t[197] := table("unclosed parenthesis")
   t[380] := table("illegal assignment in declaration")
   t[76] := table("invalid create expression")
   t[160] := table("missing \"of\" in case expression")
   t[254] := table("missing operand after || or illegal space inside ||:=")
   t[427] := table("unclosed parenthesis")
   t[39] := table("missing parameter list in procedure declaration")
   t[301] := table("a while loop is missing } somewhere before \"end\"")
   t[23] := table("procedure not allowed within a class")
   t[86] := table("invalid while control expression")
   t[264] := table("missing or invalid second argument to !")
   t[7] := table("unexpected end of file")
   t[28] := table("invalid global declaration")
   t[75] := table("invalid case control expression")
   t[12] := table("procedure name expected")
   t[85] := table("invalid until control expression")
   t[200] := table("missing operator or unbalanced parenthesis/bracket")
   t[48] := table("a ; or \\n is missing between method header and body")
   t[69] := table("unclosed literal or missing operator")
   t[163] := table("missing then")
   t[163,369] := "missing then"
   t[163,363] := "spurious close-parenthesis"
   t[268] := table("field name expected")
   t[273] := table("invalid initial expression")
   t[37] := table("invalid link declaration")
   t[53] := table("missing identifier")
   t[79] := table("invalid if control expression")
   t[42] := table("method expected")
   t[131] := table("missing operator or closing bracket")
   t[199] := table("unclosed list")
   t[283] := table("parameter name expected")
   }

   /errors := 0
   if errors = 0 then write(&errout)
   else if map(s)== "stack underflow. aborting..." then return
   errors +:= 1
   if errors > 10 then stop("too many errors, aborting")
   writes(&errout, \fName, ":")
   if s == "syntax error" then
      s := t[statestk[1], yychar]
   if s == "syntax error" then {
      s ||:= " (" || statestk[1] ||";"|| yychar || ")"
      if /merrflag then s ||:= "\n(use -M for assistance with this error)"
      }
   write(&errout, yylineno, ": # \"", yytext, "\": ", s)
   if \merrflag then {
       if ferr2 := open(\fName) then {
	 write(&errout, "Reporting (-M) your error to the Oracle (",
	       merraddress, ") for assistance.")
	 write(&errout, "Type any question you have on the lines below.",
	       " Type a blank line to finish.")
	 ferr := open("mail " || merraddress, "pw")
	 while write(ferr, "" ~== read())
	 write(ferr)
	 write(ferr, yylineno, ": # \"", yytext, "\": ", s)
	 write(ferr)
	 while write(ferr, read(ferr2))
	 close(ferr2)
	 close(ferr)
         }
      }
   return
end
