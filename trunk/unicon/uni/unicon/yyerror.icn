procedure yyerror(s)

local errorObject

static t, __merr_errors
initial {
   t := table(table("syntax error"))
   t[0] := table("invalid declaration")
   t[26] := table("left parenthesis expected to start class fieldlist")
   t[26,373] := "fieldlist starts with left *parenthesis*, not curly brace!"
   t[26,257] := "left parenthesis expected to start class fieldlist"
   t[136] := table("missing fieldname or right parenthesis")
   t[162] := table("missing then")
   t[162,370] := "missing then"
   t[162,364] := "spurious close-parenthesis"
   t[403] := table("missing \"do\" or some such keyword earlier, or expected a comma or right brace here")
   t[10] := table("link list expected")
   t[78] := table("bad keyword name or bogus & precedes this token")
   t[277] := table("field name expected")
   t[324] := table("missing } somewhere before \"end\"")
   t[104] := table("invalid compound expression")
   t[104,272] := "invalid compound expression"
   t[104,318] := "assignment missing its left operand"
   t[282] := table("invalid initial expression")
   t[67] := table("invalid every control expression")
   t[72] := table("invalid repeat control expression")
   t[203] := table("missing operator or unbalanced parenthesis/bracket")
   t[313] := table("missing then-part")
   t[9] := table("invocable list expected")
   t[77] := table("invalid argument to unary !")
   t[208] := table("expression expected, or need to move declaration to top of procedure or method")
   t[40] := table("missing parameter list in procedure declaration")
   t[103] := table("unclosed list")
   t[124] := table("missing operator or \"do\" keyword")
   t[3] := table("global, class, or link expected")
   t[3,307] := "global, class, or link expected"
   t[3,283] := "method declaration outside any class"
   t[24] := table("missing semicolon")
   t[24,272] := "missing semicolon"
   t[24,275] := "semicolon expected"
   t[155] := table("a ; or \\n is missing between method header and body")
   t[265] := table("missing or invalid second argument to +")
   t[270] := table("missing or invalid second argument to *")
   t[76] := table("invalid while control expression")
   t[296] := table("parameter name expected")
   t[474] := table("unclosed parenthesis")
   t[23] := table("procedure not allowed within a class")
   t[65] := table("invalid create expression")
   t[112] := table("missing semicolon or operator")
   t[112,272] := "missing semicolon or operator"
   t[112,366] := "missing semicolon or operator"
   t[112,374] := "too many closing curly braces"
   t[133] := table("invalid procedure body")
   t[154] := table("procedure not allowed within a class")
   t[196] := table("unclosed parenthesis")
   t[264] := table("missing operand after |||")
   t[264,308] := "missing operand after |||"
   t[264,318] := "illegal space inside |||:="
   t[7] := table("unexpected end of file")
   t[28] := table("invalid global declaration")
   t[75] := table("invalid until control expression")
   t[12] := table("procedure name expected")
   t[38] := table("invalid link declaration")
   t[436] := table("malformed case expression")
   t[64] := table("invalid case control expression")
   t[263] := table("missing operand after ||")
   t[263,308] := "missing operand after ||"
   t[263,318] := "illegal space inside ||:="
   t[48] := table("missing identifier")
   t[69] := table("invalid if control expression")
   t[158] := table("missing \"of\" in case expression")
   t[273] := table("missing or invalid second argument to !")
   t[294] := table("parameter modifier must be a (atomic) literal or a convertor")
   t[404] := table("parenthesis is required for method invocation")
   t[53] := table("parameter name expected")
   t[58] := table("unclosed literal or missing operator")
   t[142] := table("missing comma or unclosed class field arguments")
   t[142,257] := "missing comma or unclosed class field arguments"
   t[142,283] := "unclosed class field arguments"
   t[42] := table("method expected")
   t[199] := table("unclosed list")
   t[199,272] := "missing operator or closing bracket"
   t[199,370] := "unclosed list"
   t[283] := table("invalid local declaration")
   t[398] := table("unclosed parenthesis")
   __merr_errors := 0
   }

   if s == "reinitialize merr errors" then {
      __merr_errors := 0
      return
      }

   if __merr_errors = 0 then iwrite(&errout)
   else if map(s)== "stack underflow. aborting..." then return
   __merr_errors +:= 1
   if __merr_errors > 10 then
      istop("too many errors, aborting")
   prefix := (\fName||":") | ""
   if s == "syntax error" then
      s := t[(\statestk)[1], yychar]
   if s == "syntax error" then {
      s ||:= " (" || (\statestk)[1] ||";"|| yychar || ")"
      if /merrflag then s ||:= "\n(use -M for assistance with this error)"
      }
   s := prefix ||yylineno||": # \""|| yytext || "\" " || s
   if \merrflag then {
      if ferr2 := open(\fName) then {
	 iwrite(&errout, "Reporting (-M) your error to the Oracle (",
	       merraddress, ") for assistance.")
	 iwrite(&errout, "Type any question you have on the lines below.",
	       " Type a blank line to finish.")
	 ferr := open("mail " || merraddress, "pw")
	 while iwrite(ferr, "" ~== read())
	 iwrite(ferr)
	 iwrite(ferr, s)
	 iwrite(ferr)
	 while iwrite(ferr, read(ferr2))
	 close(ferr2)
	 close(ferr)
         }
      }
   /parsingErrors := []
   errorObject := ParseError( yylineno, s )
   put( parsingErrors, errorObject )
   return
end
