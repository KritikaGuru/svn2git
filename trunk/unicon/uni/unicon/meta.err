procedure main()
every x do { }
}
end
::: too many closing curly braces

global::: unexpected end of file
global x y::: invalid global declaration
global x, , y::: missing identifier
procedure p(x) end::: missing semicolon
link procedure p(x)
end
::: link list expected
invocable procedure p(x)
end
:::  invocable list expected
local x
::: invalid declaration
procedure main()
  a +
end
::: missing or invalid second argument to +
procedure main()
  a *
end
::: missing or invalid second argument to *
procedure main()
  a !
end
::: missing or invalid second argument to !
procedure ()
end
::: procedure name expected
procedure p(1)
end
::: parameter name expected
procedure p(x,)
end
::: parameter name expected
procedure p(x)
global x
end
::: semicolon expected
procedure p(x);
global x
end
::: invalid procedure body
procedure p()
!
end
::: invalid argument to unary !
procedure p()
c$m || x
end
::: parenthesis is required for method invocation
procedure p()
create
end
::: invalid create expression
procedure p()
{
end
::: invalid compound expression
procedure p()
if
end
::: invalid if control expression
procedure p()
case
end
::: invalid case control expression
procedure p()
while
end
::: invalid while control expression
procedure p()
until
end
::: invalid until control expression
procedure p()
every
end
::: invalid every control expression
procedure p()
repeat
end
::: invalid repeat control expression
link x+
procedure p()
end
::: invalid link declaration
procedure p
write()
end
::: missing parameter list in procedure declaration
procedure p()
local "hello"
end
::: invalid local declaration
class c()
[
end
::: method expected
class c()
method m(); [
end
::: unclosed list
class c()
method m(); ["help!"
end
::: unclosed list
class c()
method m(); ["help!" end
end
::: unclosed list
class c()
method m();end
procedure p();end
end
::: procedure not allowed within a class
class c()
procedure p();end
end
::: procedure not allowed within a class
procedure p()
initial ]
end
::: invalid initial expression
procedure p()
if (1) {
hello
}
end
::: missing then
procedure p()
write(p()
hello
end
::: unclosed parenthesis
procedure p()
local l := []
end
::: illegal assignment in declaration
procedure p()
if \a.b | (\a.b & c(e) == "\t" then {
end
::: unclosed parenthesis
procedure p()
    a$b(c[3]
{
end
::: unclosed parenthesis
procedure main()
   case x of {
       y:
	   f(); g()
   }
end
::: malformed case expression
procedure main()
   case x of {
      case y:
	   f()
   }
end
::: missing "of" in case expression
procedure main()
   while x do { x
end
::: missing } somewhere before "end"
