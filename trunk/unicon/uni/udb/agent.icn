#
# agent.icn
# it is an abstract class that handles the basic extra monitoring
# architecture, it will be derived into internals and externals
# type of minitors
# Author  : Ziad Al-Sharif
# Date    : Feb 24, 2008
# e-mail  : zsharif@gmail.com
#

$include "defaults.icn"

#
# Loads and initializes the internal monitors
#
class Agent(
   DState,          # An object of the class State()
   eventMask,       # Monitored events of the external or internal agent
   Clients,         # A table of the InternalClient record
   activeClients,   # A set of the current active clients
   disabledClients, # A set of the current disabled clients
   mtype,           # it holds the derived class identity (internal or external)
   count,           # an integer holds the tatal number of monitors (Agents)
   enabled          # an integer hold the total number of enabled monitors
   )

#
# Enables the internal monitor
#
method cmdEnable(name)
   local msg:="??", obj

   if obj := \Clients[name] then{
      if obj.State = DISABLED then{
         obj.State := ENABLED
         insert(activeClients, obj)
         delete(disabledClients, name)
         enabled +:= 1
         build_Mask()
         msg := "\n   The "||mtype||" monitor ("||name||") is ENABLED"
         }
      else
         msg := "\n   The "||mtype||" monitor ("||name||") is already ENABLED"
      }
   else
      msg := "\n   The "||mtype||" monitor ("||name||") is NOT Found!"
   #DState.Write(msg)
end

#
# Disables the internal monitor
#
method cmdDisable(name)
   local msg:="??"

   if \Clients[name] then{
      if Clients[name].State = ENABLED then{
         Clients[name].State := DISABLED
         insert(disabledClients, name)
         delete(activeClients, name)
         enabled -:= 1
         build_Mask()
         msg := "\n   The "||mtype||" monitor ("||name||") is DISABLED"
         }
      else
         msg := "\n   The "||mtype||" monitor ("||name||") is already DISABLED"
      }
   else
      msg := "\n   The "||mtype||" monitor ("||name||") is NOT Found!"
   DState.Write(msg)
end

#
# printd out information about the enabled internals
#
method cmdInfo(name)
   local i:=1, msg:="\n   "
    
   ## what if there is more than one monitor loaded with the same name??
   if \name then{
      if \Clients[name] then{
         if Clients[name].State = DISABLED then
            msg := "\n   The "||mtype||" monitor ("||name||") is DISABLED"
         else
            msg := "\n   The "||mtype||" monitor ("||name||") is ENABLED"
         }
      else
         msg := "\n   The "||mtype||" monitor ("||name||") is NOT Found!"
      }
   else if *activeClients > 0 then{
      every name := !activeClients do
         msg ||:= i ||":"||name||"\n   "
      if *msg >= 5 then
         msg := "\n   The following are the enabled "||mtype||" monitors:"||msg
      else
         msg := "\n   There is no enabled "||mtype||"s !"
      }
   DState.Write(msg)
end

#
# it constructs/re-constucts the eventMask from all active monitors  
#
method build_Mask()
   local obj

   eventMask := cset('')
   every obj := !activeClients do
      eventMask ++:= obj.eventMask

   DState.eventMask ++:= eventMask
   if mtype == "internal" then{
      DState.internalMask := eventMask 
      #DState.Update()
      }
   else if mtype == ("external"|"semi-internal") then{
      DState.externalMask := eventMask 
      #DState.Update()
      }
end

#
# Initialization
#
initially(t)

   mtype   := t
   count   := 0
   enabled := 0
   Clients := table()
   activeClients   := set()
   disabledClients := set()
   eventMask := cset('')
end
