#
# stepping.icn
# It handles UDB's stepping and continuing related tasks
# Author: Ziad Al-Sharif
# Date:   7-15-2008
# e-mail: zsharif@gmail.com
#

$include "evdefs.icn"
$include "defaults.icn"
$include "patdefs.icn"

class Stepping(
   DState,      # (Alias) object of type State class
   step_count,  # the cmdStep optional counter, initial value 0, default 1
   next_count,  # the cmdNext optional counter, initial value 0, default 1
   nex_level,   # used with the next command to skip over a call
   msg,         # a string with latest message from this class
   pat,         # store the current pstep pattern
   assignVal,   # assignment value	       
   curPelem,    # the current pelem we are on	       
   totalMatch   # stores the total match      
   )	
	       
#
# while next_count > 0, keep next until it is 0,
# then stop there and change the state to step
#
method checkNext()
   local  level
   static once:=0 # To help not coming back to the calling line

   level := keyword("level", Monitored)

   if level > nex_level & once = 0 then{
      next_count +:=1
      once := 1
      } 

   if level = nex_level then{
      if next_count > 1 then{
         next_count -:= 1
         }
      else if next_count = 1 then{
         next_count := 0
         step_count := 1
         DState.State := PAUSE
         DState.RunCode := STEP
         once := 0
         }
      }
end

#
# Steps only one line of execution, treats procedure call as one operation
# [next], [next n]; n's default value is one  
#
method cmdNext(cmd)
   local count

   if DState.State = PAUSE & DState.RunCode ~= ERROR then {
      if count := integer(cmd[2]) then
	 next_count := count
      else
	 next_count := 1

      nex_level := keyword("level", Monitored)
      DState.Update(NEXT)
      DState.Write("   Nexting.")
      }
   else {
      DState.State := ERROR
      msg   := "\n   The program is not being run._
                \n   Try \"run\", or Type \"help\" for assistance"
      DState.Write(msg)
      }
end

#
# helps return from the current procedure level to the previous level
#
method cmdReturn(cmd) 

   if DState.State = PAUSE & DState.RunCode ~= ERROR then {
      #if count := integer(cmd[2]) then
      #   next_count := count
      #else
      next_count := 1

      nex_level := keyword("level", Monitored) -1
      DState.Update(NEXT)
      DState.Write("   Returning.")
      }
   else {
      DState.State := ERROR
      msg   := "\n   The program is not being run._
                \n   Try \"run\", or Type \"help\" for assistance"
      DState.Write(msg)
      }
end
#
# while step_count > 0, keep step until it is 0,
# then stop there and make State := STEP
#
method checkStep()
   local cur_line, cur_file

   cur_file := keyword("file", Monitored)
   cur_line := keyword("line", Monitored)

   if DState.RunCode = PSTEP & step_count = 1 then {
      msg := "\n   No pattern event detected before: " || cur_file ||
             ", line " || cur_line
      msg||:= "\n   Stepping \n"
      DState.Write(msg)
      }
   else if DState.RunCode = PSTEP & step_count > 1 then {
      return ##do nothing... still checking for pattern events 
      }

   if step_count > 1 then {
      step_count -:= 1
      DState.State := RUN
      DState.RunCode := STEP
      }
   else if step_count = 1 then {
      if cur_file == "__faux.icn" then {
	 DState.State := RUN
	 DState.RunCode := STEP
	 return
	 }

      step_count -:= 1

      msg:="\n   file "||cur_file||", line "||cur_line||"."
      msg||:="\n   "||cur_line-1||":"||
             DState.srcFile.getSrcLine(cur_file, cur_line-1)
      msg||:="\n-->"||cur_line||":"||
             DState.srcFile.getSrcLine(cur_file, cur_line)
      msg||:="\n   "||cur_line+1||":"||
             DState.srcFile.getSrcLine(cur_file, cur_line+1)
      DState.Write(msg)

      DState.State := PAUSE
      DState.RunCode := STEP
   }
end

#
# Steps only on line of execution
# [step], [step n]; n's default value is one
#
method cmdStep(cmd)
   local count

   if DState.State = PAUSE & DState.RunCode ~= ERROR then {
      if count := integer(cmd[2]) then
         step_count := count
      else
         step_count := 1

      DState.Update(STEP)
      DState.Write("   Stepping.")
      }
   else {
      DState.State := ERROR
      msg := "\n   The program is not being run._
              \n   Try \"run\", or Type \"help\" for assistance"
      DState.Write(msg)
      }
end

#
# while step_count > 0, keep step until it is 0,
# then stop there and make State := PSTEP
#
method checkPStep()
   local cur_line, cur_file

   cur_file := keyword("file", Monitored)
   cur_line := keyword("line", Monitored)
 
   if step_count > 1 then {
      silentStep()
      DState.State := RUN
      DState.RunCode := PSTEP
      }
   else if step_count = 1 then {
      if cur_file == "__faux.icn" then {
	 DState.State := RUN
	 DState.RunCode := PSTEP
	 return
         }  

      step_count -:= 1

      if &eventcode === E_PatAttempt then {
         pat := &eventvalue
         msg := "\n   Pattern match started"
         msg||:="\n   file "||cur_file||", line "||cur_line||"."
         msg||:="\n   "||cur_line-1||":"||
                DState.srcFile.getSrcLine(cur_file, cur_line-1)
         msg||:="\n-->"||cur_line||":"||
                DState.srcFile.getSrcLine(cur_file, cur_line)
         msg||:="\n   "||cur_line+1||":"||
         DState.srcFile.getSrcLine(cur_file, cur_line+1)
         DState.Write(msg)
         DState.State := PAUSE
         DState.RunCode := PSTEP
         return
         }
      else if &eventcode === E_PelemAttempt then { handle_pstep_attempt() }
      else if &eventcode === E_PelemFail then    { handle_pstep_fail();   }
      else if &eventcode === E_PelemMatch then   { handle_pstep_match()   }
      }
end

method handle_pstep_fail()
   local cur_line, cur_file, cur_index

   cur_index := keyword("patindex", Monitored)
   cur_file := keyword("file", Monitored)
   cur_line := keyword("line", Monitored)

   case &eventvalue of {
      PC_Assign | PC_R_Remove | PC_R_Restore :{
         step_count := 1     ##Restore Stepping, not really a "step"
         DState.State := RUN
         DState.RunCode := PSTEP
         return
         }
   default :{
         msg := "\n   file "||cur_file||", line "||cur_line
         msg ||:= "\n   Pattern Element Failed to Match "
         msg ||:= "\n   Total Match: "||image(totalMatch)
         msg ||:= "\n   Failed Pattern Element: "
         msg ||:= "\n   " || pindex_image(pat, cur_index)
         DState.Write(msg)
         DState.State := PAUSE
         DState.RunCode := PSTEP
         return
         }
      }
end

## several pcodes related to pushing and popping
## require special handling before they hit
## node_fail. This is where they are handled. 

method handle_pstep_attempt()
   local cur_line, cur_file

   cur_file := keyword("file", Monitored)
   cur_line := keyword("line", Monitored)
   curPelem := &eventvalue

   if curPelem = PC_R_Restore | curPelem = PC_R_Remove then {
      if curPelem = PC_R_Restore then 
         msg := "\n   Pattern Element Failed, Entering Nest Pattern... "
      else
         msg := "\n   Nested Pattern Failed to Match, Exiting... "
      step_count := 1
      DState.Write(msg)
      DState.State := RUN
      DState.RunCode := PSTEP
      return 
      }
   else if curPelem = PC_Arbno_X | curPelem = PC_Arbno_S then {
      cur_index := keyword("patindex", Monitored)
      msg := "\n\n   Placing Arbno on the pattern stack, Continuing... "
      msg ||:= "\n   "||pindex_image(pat, cur_index)
      step_count := 1
      DState.Write(msg)
      DState.State := RUN
      DState.RunCode := PSTEP
      }
   else if curPelem = PC_Arb_X then {
      cur_index := keyword("patindex", Monitored)
      msg := "\n\n   Placing Arb on the pattern stack, Continuing... "
      msg ||:= "\n   "||pindex_image(pat, cur_index - 1)
      step_count := 1
      DState.Write(msg)
      DState.State := RUN
      DState.RunCode := PSTEP
      }
   else if curPelem = PC_R_Enter then {
      step_count := 1
      assignPos := keyword("pos", Monitored)
      return  #keep track of assign position begins
      }

   step_count := 1 ##could get here via other pelem_attempts
end

method handle_pstep_match()
   local cur_line, cur_file, cur_index, cur_match, assign_match

   cur_index := keyword("patindex", Monitored)
   cur_file := keyword("file", Monitored)
   cur_line := keyword("line", Monitored)
   cur_match := getSubstring()

   msg := "\n   file "||cur_file||", line "||cur_line

   case curPelem of {
      PC_Pos_Nat | PC_Pos_NF | PC_Pos_NP | PC_Pos_NMF |
      PC_RPos_Nat | PC_RPos_NF | PC_RPos_NP | PC_RPos_NMF : {
         msg ||:= "\n   Total Matched String: "||image(totalMatch)
         msg ||:= "\n   "||"Cursor Position: "||keyword("pos", Monitored)
         }
      PC_Setcur : {
         msg ||:= "\n   Total Matched String: "||image(totalMatch)
         msg ||:= "\n   "||"Cursor Position on Assignment: "
         msg ||:= keyword("pos", Monitored)
         msg ||:= "\n   Assigned Pattern Element: "
         msg ||:= "\n   "||pindex_image(pat, cur_index)
         DState.Write(msg)
         DState.State := PAUSE
         DState.RunCode := PSTEP
         return
      }
      PC_Assign_Imm | PC_Assign_OnM : {
         msg ||:= "\n   Total Matched String: "||image(totalMatch)
         if curPelem = PC_Assign_Imm then
            msg ||:= "\n   Assignment Value: "
         else
            msg ||:= "\n   Assignment Value if Match: "
         msg ||:= image(assignVal)
         msg ||:= "\n   Assigned Pattern Element: "
         msg ||:= "\n   "||pindex_image(pat, cur_index)
         DState.Write(msg)
         DState.State := PAUSE
         DState.RunCode := PSTEP
         return 
         }
      PC_Fence_X | PC_R_Enter | PC_EOP : { ## no ops 
         step_count := 1
         DState.State := RUN
         DState.RunCode := PSTEP
         return 
         }
      PC_Unanchored : { ## Match is retrying. Set new position,reset totalMatch
         msg := "\n   Match has failed with no alternatives,"
         msg ||:= " starting from the beginning..."
         totalMatch := &null
         step_count := 1
         DState.Write(msg) 
         DState.State := RUN
         DState.RunCode := PSTEP
         return 
         }
      default : {  
         msg ||:= "\n   Total Matched String: "||image(totalMatch)
         msg ||:= "\n   Matched String: "||image(cur_match)
         }
      }
      msg ||:= "\n   Matched Pattern Element: "
      msg ||:= "\n   " ||pindex_image(pat, cur_index)  
      DState.Write(msg)
      DState.State := PAUSE
      DState.RunCode := PSTEP
end

method getSubstring()
   local cur_match := &eventvalue

   if totalMatch === &null then     { totalMatch := cur_match}
   else if cur_match === &null then { totalMatch := totalMatch              }
   else {
      cur_match ? {
         find(totalMatch)
         move(*totalMatch)
         cur_match := tab(0)
         totalMatch := &eventvalue
      }
   }
   return cur_match 
end

method silentStep()

   if &eventcode == E_PatAttempt then {
      pat := curPelem
      step_count -:= 1
      }
   else {
    case curPelem of {
       PC_Fence_X | PC_R_Enter | PC_EOP | PC_Arbno_X | PC_Arbno_S | 
       PC_Assign | PC_Arb_X | PC_R_Remove | PC_R_Restore : {
          return
          }
       PC_Unanchored :{
          totalMatch := &null
          return 
          }
       default : {
          step_count -:= 1
          }
       }
   }
end

#
# Steps during pattern execution or on line if a
# E_Line event has been triggered. 
# [pstep], [pstep n]; n's default value is one
#

method cmdPStep(cmd)
   local count

   if DState.State = PAUSE & DState.RunCode ~= ERROR then {
      if count := integer(cmd[2]) then
         step_count := count
      else
         step_count := 1
         DState.Update(PSTEP)
         DState.Write("   Pattern Stepping.")
         }
   else {
      DState.State := ERROR
      msg := "\n   The program is not being run._
              \n   Try \"run\", or Type \"help\" for assistance"
      DState.Write(msg)
      }
end

# Concludes the pattern step environment
# when a pattern recieves either a pattern failure
# or pattern success event

method pEnd()

   if DState.RunCode = PSTEP  & step_count = 1 then {
      step_count -:= 1
      if &eventcode = E_PatMatch then{
         msg := "\n   Pattern matched on string"
         msg ||:= "\n   Total Matched String: "||totalMatch
         msg ||:= "\n   Resuming normal stepping..."
         DState.Write(msg)
         DState.State := PAUSE
         DState.RunCode := STEP
         }
      else{
         msg := "\n   Pattern failed to match on string"
         msg ||:= "\n   Resuming normal stepping..."
         DState.Write(msg)
         DState.State := PAUSE
         DState.RunCode := STEP
         }
      }

   pat := &null
   assignVal := &null 
   totalMatch := &null 
end

#
# Continue the full speed execution after a PAUSE
# [cont]
#
method cmdContinue()

   if DState.State = PAUSE & DState.RunCode ~= ERROR then{
      DState.Update(CONTINUE)
      DState.Write("   Continuing.")
      }
   else{
      DState.State := ERROR
      msg := "\n   The program is not being run._
              \n   Try \"run\", or Type \"help\" for assistance"
      DState.Write(msg)
      }
end

#
# Initialization
#
initially()
   
   step_count := 0
   next_count := 0
   nex_level  := &null
   pat   := &null
   assignVal := &null 
   totalMatch := &null 
end
